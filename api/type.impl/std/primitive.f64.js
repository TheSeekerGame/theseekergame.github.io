(function() {var type_impls = {
"bevy_xpbd_2d":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/dec2flt/mod.rs.html#164\">source</a></span><a href=\"#impl-FromStr-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/dec2flt/mod.rs.html#164\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/num/dec2flt/struct.ParseFloatError.html\" title=\"struct core::num::dec2flt::ParseFloatError\">ParseFloatError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string in base 10 to a float.\nAccepts an optional decimal exponent.</p>\n<p>This function accepts strings such as</p>\n<ul>\n<li>‘3.14’</li>\n<li>‘-3.14’</li>\n<li>‘2.5E10’, or equivalently, ‘2.5e10’</li>\n<li>‘2.5E-10’</li>\n<li>‘5.’</li>\n<li>‘.5’, or, equivalently, ‘0.5’</li>\n<li>‘inf’, ‘-inf’, ‘+infinity’, ‘NaN’</li>\n</ul>\n<p>Note that alphabetical characters are not case-sensitive.</p>\n<p>Leading and trailing whitespace represent an error.</p>\n<h5 id=\"grammar\"><a href=\"#grammar\">Grammar</a></h5>\n<p>All strings that adhere to the following <a href=\"https://www.w3.org/TR/REC-xml/#sec-notation\">EBNF</a> grammar when\nlowercased will result in an <a href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok</code></a> being returned:</p>\n<div class=\"example-wrap\"><pre class=\"language-txt\"><code>Float  ::= Sign? ( &#39;inf&#39; | &#39;infinity&#39; | &#39;nan&#39; | Number )\nNumber ::= ( Digit+ |\n             Digit+ &#39;.&#39; Digit* |\n             Digit* &#39;.&#39; Digit+ ) Exp?\nExp    ::= &#39;e&#39; Sign? Digit+\nSign   ::= [+-]\nDigit  ::= [0-9]\n</code></pre></div><h5 id=\"arguments\"><a href=\"#arguments\">Arguments</a></h5>\n<ul>\n<li>src - A string</li>\n</ul>\n<h5 id=\"return-value\"><a href=\"#return-value\">Return value</a></h5>\n<p><code>Err(ParseFloatError)</code> if the string did not represent a valid\nnumber. Otherwise, <code>Ok(n)</code> where <code>n</code> is the closest\nrepresentable floating-point number to the number represented\nby <code>src</code> (following the same rules for rounding as for the\nresults of primitive operations).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/num/dec2flt/struct.ParseFloatError.html\" title=\"struct core::num::dec2flt::ParseFloatError\">ParseFloatError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details></div></details>","FromStr","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#619\">source</a></span><a href=\"#impl-Rem%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#619\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#619\">source</a></span><a href=\"#impl-Rem-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"docblock\"><p>The remainder from the division of two floats.</p>\n<p>The remainder has the same sign as the dividend and is computed as:\n<code>x - (x / y).trunc() * y</code>.</p>\n<h4 id=\"examples\"><a href=\"#examples\">Examples</a></h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: f32 = <span class=\"number\">50.50</span>;\n<span class=\"kw\">let </span>y: f32 = <span class=\"number\">8.125</span>;\n<span class=\"kw\">let </span>remainder = x - (x / y).trunc() * y;\n\n<span class=\"comment\">// The answer to both operations is 1.75\n</span><span class=\"macro\">assert_eq!</span>(x % y, remainder);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#619\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1438-1440\">source</a></span><a href=\"#impl-PartialEq-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1438-1440\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1438-1440\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-SimdCast-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/portable-simd/crates/core_simd/src/cast.rs.html#51\">source</a><a href=\"#impl-SimdCast-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/core_simd/cast/trait.SimdCast.html\" title=\"trait core::core_simd::cast::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","SimdCast","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Cu16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u16>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Cisize%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cisize%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<isize>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Ci32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i32>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Cu32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u32>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Cu8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u8>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Cusize%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cusize%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<usize>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Ci8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i8>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Ci128%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci128%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i128>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Ci16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i16>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Ci64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Ci64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<i64>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Cu128%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu128%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u128>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-FloatToInt%3Cu64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#39\">source</a><a href=\"#impl-FloatToInt%3Cu64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","FloatToInt<u64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-LowerExp-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-Display-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Sum%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum<&'a f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Sum-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-Debug-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#503\">source</a></span><a href=\"#impl-Div-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#503\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#503\">source</a></span><a href=\"#impl-Div%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#503\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1492\">source</a></span><a href=\"#impl-PartialOrd-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1492\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#157\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#157\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<i16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#162\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#162\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<u8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#165\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#165\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<u32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#158\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#158\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<i32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#164\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#164\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<u16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#155\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#155\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<i8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cf32%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#168\">source</a></span><a href=\"#impl-From%3Cf32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#168\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>f32</code> to <code>f64</code> losslessly.</p>\n</div></details></div></details>","From<f32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.68.0\">1.68.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#191\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/num.rs.html#205\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>bool</code> to <code>f64</code> losslessly. The resulting value is positive\n<code>0.0</code> for <code>false</code> and <code>1.0</code> for <code>true</code> values.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: f64 = <span class=\"bool-val\">false</span>.into();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">0.0</span>);\n<span class=\"macro\">assert!</span>(x.is_sign_positive());\n\n<span class=\"kw\">let </span>y: f64 = <span class=\"bool-val\">true</span>.into();\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"number\">1.0</span>);</code></pre></div>\n</div></details></div></details>","From<bool>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-Copy-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/marker.rs.html#489-499\">source</a></span><a href=\"#impl-Copy-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","Copy","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a></span><a href=\"#impl-UpperExp-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/float.rs.html#230\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#948\">source</a><a href=\"#impl-SimdElement-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/core_simd/vector/trait.SimdElement.html\" title=\"trait core::core_simd::vector::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/core_simd/vector/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/default.rs.html#177\">source</a></span><a href=\"#impl-Default-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/default.rs.html#177\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0.0</code></p>\n</div></details></div></details>","Default","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Product-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a></span><a href=\"#impl-Product%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/accum.rs.html#150\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product<&'a f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26f64%3E-for-f64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RelativeEq-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/approx/relative_eq.rs.html#84\">source</a><a href=\"#impl-RelativeEq-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"approx/relative_eq/trait.RelativeEq.html\" title=\"trait approx::relative_eq::RelativeEq\">RelativeEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_relative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/relative_eq.rs.html#84\">source</a><a href=\"#method.default_max_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.default_max_relative\" class=\"fn\">default_max_relative</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The default relative tolerance for testing values that are far-apart. <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.default_max_relative\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/relative_eq.rs.html#84\">source</a><a href=\"#method.relative_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.relative_eq\" class=\"fn\">relative_eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, epsilon: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, max_relative: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses a relative comparison if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/relative_eq.rs.html#22-27\">source</a><a href=\"#method.relative_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#method.relative_ne\" class=\"fn\">relative_ne</a>(\n    &amp;self,\n    other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>,\n    epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n    max_relative: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.relative_eq\" title=\"method approx::relative_eq::RelativeEq::relative_eq\"><code>RelativeEq::relative_eq</code></a>.</div></details></div></details>","RelativeEq","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbsDiffEq-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/approx/abs_diff_eq.rs.html#87\">source</a><a href=\"#impl-AbsDiffEq-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Epsilon\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" class=\"associatedtype\">Epsilon</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Used for specifying relative comparisons.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_epsilon\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/abs_diff_eq.rs.html#87\">source</a><a href=\"#method.default_epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.default_epsilon\" class=\"fn\">default_epsilon</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The default tolerance to use when testing values that are close together. <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.default_epsilon\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/abs_diff_eq.rs.html#87\">source</a><a href=\"#method.abs_diff_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.abs_diff_eq\" class=\"fn\">abs_diff_eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, epsilon: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses the absolute difference to compute the approximate\nequality of two numbers.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/abs_diff_eq.rs.html#24\">source</a><a href=\"#method.abs_diff_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#method.abs_diff_ne\" class=\"fn\">abs_diff_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.abs_diff_eq\" title=\"method approx::abs_diff_eq::AbsDiffEq::abs_diff_eq\"><code>AbsDiffEq::abs_diff_eq</code></a>.</div></details></div></details>","AbsDiffEq","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UlpsEq-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/approx/ulps_eq.rs.html#71\">source</a><a href=\"#impl-UlpsEq-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"approx/ulps_eq/trait.UlpsEq.html\" title=\"trait approx::ulps_eq::UlpsEq\">UlpsEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_ulps\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/ulps_eq.rs.html#71\">source</a><a href=\"#method.default_max_ulps\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.default_max_ulps\" class=\"fn\">default_max_ulps</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The default ULPs to tolerate when testing values that are far-apart. <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.default_max_ulps\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/ulps_eq.rs.html#71\">source</a><a href=\"#method.ulps_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.ulps_eq\" class=\"fn\">ulps_eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, epsilon: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses units in the last place (ULP) if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/ulps_eq.rs.html#23\">source</a><a href=\"#method.ulps_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#method.ulps_ne\" class=\"fn\">ulps_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>, max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.ulps_eq\" title=\"method approx::ulps_eq::UlpsEq::ulps_eq\"><code>UlpsEq::ulps_eq</code></a>.</div></details></div></details>","UlpsEq","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#61\">source</a><a href=\"#impl-Zero-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#61\">source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the additive identity element of <code>Self</code>, <code>0</code>. <a href=\"num_traits/identities/trait.Zero.html#tymethod.zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#61\">source</a><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the additive identity.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#23\">source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","Zero","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumCast-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#704\">source</a><a href=\"#impl-NumCast-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.NumCast.html\" title=\"trait num_traits::cast::NumCast\">NumCast</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#704\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.NumCast.html#tymethod.from\" class=\"fn\">from</a>&lt;N&gt;(n: N) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"num_traits/cast/trait.ToPrimitive.html\" title=\"trait num_traits::cast::ToPrimitive\">ToPrimitive</a>,</span></h4></section></summary><div class='docblock'>Creates a number from another value that can be converted into\na primitive via the <code>ToPrimitive</code> trait. If the source value cannot be\nrepresented by the target type, then <code>None</code> is returned. <a href=\"num_traits/cast/trait.NumCast.html#tymethod.from\">Read more</a></div></details></div></details>","NumCast","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloatConst-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#impl-FloatConst-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/float/trait.FloatConst.html\" title=\"trait num_traits::float::FloatConst\">FloatConst</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.E\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.E\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.E\" class=\"fn\">E</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return Euler’s number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_1_PI\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_1_PI\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_1_PI\" class=\"fn\">FRAC_1_PI</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>1.0 / π</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_1_SQRT_2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_1_SQRT_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_1_SQRT_2\" class=\"fn\">FRAC_1_SQRT_2</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>1.0 / sqrt(2.0)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_2_PI\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_2_PI\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_2_PI\" class=\"fn\">FRAC_2_PI</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>2.0 / π</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_2_SQRT_PI\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_2_SQRT_PI\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_2_SQRT_PI\" class=\"fn\">FRAC_2_SQRT_PI</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>2.0 / sqrt(π)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_PI_2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_PI_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_PI_2\" class=\"fn\">FRAC_PI_2</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>π / 2.0</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_PI_3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_PI_3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_PI_3\" class=\"fn\">FRAC_PI_3</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>π / 3.0</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_PI_4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_PI_4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_PI_4\" class=\"fn\">FRAC_PI_4</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>π / 4.0</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_PI_6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_PI_6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_PI_6\" class=\"fn\">FRAC_PI_6</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>π / 6.0</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.FRAC_PI_8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.FRAC_PI_8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.FRAC_PI_8\" class=\"fn\">FRAC_PI_8</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>π / 8.0</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.LN_10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.LN_10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.LN_10\" class=\"fn\">LN_10</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>ln(10.0)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.LN_2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.LN_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.LN_2\" class=\"fn\">LN_2</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>ln(2.0)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.LOG10_E\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.LOG10_E\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.LOG10_E\" class=\"fn\">LOG10_E</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>log10(e)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.LOG2_E\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.LOG2_E\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.LOG2_E\" class=\"fn\">LOG2_E</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>log2(e)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.PI\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.PI\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.PI\" class=\"fn\">PI</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return Archimedes’ constant <code>π</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.SQRT_2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.SQRT_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#tymethod.SQRT_2\" class=\"fn\">SQRT_2</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>sqrt(2.0)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.TAU\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.TAU\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#method.TAU\" class=\"fn\">TAU</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return the full circle constant <code>τ</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.LOG10_2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.LOG10_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#method.LOG10_2\" class=\"fn\">LOG10_2</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>log10(2.0)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.LOG2_10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2178-2211\">source</a><a href=\"#method.LOG2_10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatConst.html#method.LOG2_10\" class=\"fn\">LOG2_10</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return <code>log2(10.0)</code>.</div></details></div></details>","FloatConst","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Signed-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/sign.rs.html#154\">source</a><a href=\"#impl-Signed-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/sign/trait.Signed.html\" title=\"trait num_traits::sign::Signed\">Signed</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/sign.rs.html#154\">source</a><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/sign/trait.Signed.html#tymethod.abs\" class=\"fn\">abs</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value. Returns <code>NAN</code> if the number is <code>NAN</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/sign.rs.html#154\">source</a><a href=\"#method.abs_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/sign/trait.Signed.html#tymethod.abs_sub\" class=\"fn\">abs_sub</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>The positive difference of two numbers. Returns <code>0.0</code> if the number is\nless than or equal to <code>other</code>, otherwise the difference between<code>self</code>\nand <code>other</code> is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/sign.rs.html#154\">source</a><a href=\"#method.signum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/sign/trait.Signed.html#tymethod.signum\" class=\"fn\">signum</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><h5 id=\"returns\"><a href=\"#returns\">Returns</a></h5>\n<ul>\n<li><code>1.0</code> if the number is positive, <code>+0.0</code> or <code>INFINITY</code></li>\n<li><code>-1.0</code> if the number is negative, <code>-0.0</code> or <code>NEG_INFINITY</code></li>\n<li><code>NAN</code> if the number is NaN</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/sign.rs.html#154\">source</a><a href=\"#method.is_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/sign/trait.Signed.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is positive, including <code>+0.0</code> and <code>INFINITY</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/sign.rs.html#154\">source</a><a href=\"#method.is_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/sign/trait.Signed.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is negative, including <code>-0.0</code> and <code>NEG_INFINITY</code></p>\n</div></details></div></details>","Signed","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToPrimitive-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#impl-ToPrimitive-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.ToPrimitive.html\" title=\"trait num_traits::cast::ToPrimitive\">ToPrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_isize\" class=\"fn\">to_isize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>isize</code>. If the value cannot be\nrepresented by an <code>isize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_i8\" class=\"fn\">to_i8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nrepresented by an <code>i8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_i16\" class=\"fn\">to_i16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot be\nrepresented by an <code>i16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_i32\" class=\"fn\">to_i32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot be\nrepresented by an <code>i32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#tymethod.to_i64\" class=\"fn\">to_i64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot be\nrepresented by an <code>i64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_i128\" class=\"fn\">to_i128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot be\nrepresented by an <code>i128</code> (<code>i64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_usize\" class=\"fn\">to_usize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot be\nrepresented by a <code>usize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_u8\" class=\"fn\">to_u8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be\nrepresented by a <code>u8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_u16\" class=\"fn\">to_u16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nrepresented by a <code>u16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_u32\" class=\"fn\">to_u32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nrepresented by a <code>u32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#tymethod.to_u64\" class=\"fn\">to_u64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nrepresented by a <code>u64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_u128\" class=\"fn\">to_u128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot be\nrepresented by a <code>u128</code> (<code>u64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_f32\" class=\"fn\">to_f32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f32</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#383\">source</a><a href=\"#method.to_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_f64\" class=\"fn\">to_f64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f64</code>. <a href=\"num_traits/cast/trait.ToPrimitive.html#method.to_f64\">Read more</a></div></details></div></details>","ToPrimitive","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBytes-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#impl-ToBytes-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#method.to_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in big-endian byte order. <a href=\"num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_be_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#method.to_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in little-endian byte order. <a href=\"num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_le_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#method.to_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/bytes/trait.ToBytes.html#method.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in native byte order. <a href=\"num_traits/ops/bytes/trait.ToBytes.html#method.to_ne_bytes\">Read more</a></div></details></div></details>","ToBytes","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26i8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#155\">source</a><a href=\"#impl-Pow%3C%26i8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#155\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a i8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26i16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#157\">source</a><a href=\"#impl-Pow%3C%26i16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#157\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a i16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26i32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#159\">source</a><a href=\"#impl-Pow%3C%26i32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#159\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a i32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Ci16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#157\">source</a><a href=\"#impl-Pow%3Ci16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#157\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<i16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cf32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#161\">source</a><a href=\"#impl-Pow%3Cf32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#161\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<f32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#158\">source</a><a href=\"#impl-Pow%3Cu16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#158\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#156\">source</a><a href=\"#impl-Pow%3Cu8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#156\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#158\">source</a><a href=\"#impl-Pow%3C%26u16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#158\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cf64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#162\">source</a><a href=\"#impl-Pow%3Cf64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#162\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Ci8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#155\">source</a><a href=\"#impl-Pow%3Ci8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#155\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<i8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26f32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#161\">source</a><a href=\"#impl-Pow%3C%26f32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#161\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a f32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26f64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#162\">source</a><a href=\"#impl-Pow%3C%26f64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#162\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Ci32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#159\">source</a><a href=\"#impl-Pow%3Ci32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#159\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<i32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#156\">source</a><a href=\"#impl-Pow%3C%26u8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/pow.rs.html#156\">source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#148\">source</a><a href=\"#impl-One-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#148\">source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the multiplicative identity element of <code>Self</code>, <code>1</code>. <a href=\"num_traits/identities/trait.One.html#tymethod.one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#148\">source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the multiplicative identity. <a href=\"num_traits/identities/trait.One.html#method.is_one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#100\">source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details></div></details>","One","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Float-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#impl-Float-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.nan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.nan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.nan\" class=\"fn\">nan</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the <code>NaN</code> value. <a href=\"num_traits/float/trait.Float.html#tymethod.nan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.infinity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.infinity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.infinity\" class=\"fn\">infinity</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the infinite value. <a href=\"num_traits/float/trait.Float.html#tymethod.infinity\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_infinity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.neg_infinity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.neg_infinity\" class=\"fn\">neg_infinity</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the negative infinite value. <a href=\"num_traits/float/trait.Float.html#tymethod.neg_infinity\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.neg_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.neg_zero\" class=\"fn\">neg_zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>-0.0</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.neg_zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the smallest finite value that this type can represent. <a href=\"num_traits/float/trait.Float.html#tymethod.min_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_positive_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.min_positive_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.min_positive_value\" class=\"fn\">min_positive_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the smallest positive, normalized value that this type can represent. <a href=\"num_traits/float/trait.Float.html#tymethod.min_positive_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.epsilon\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#method.epsilon\" class=\"fn\">epsilon</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns epsilon, a small positive value. <a href=\"num_traits/float/trait.Float.html#method.epsilon\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the largest finite value that this type can represent. <a href=\"num_traits/float/trait.Float.html#tymethod.max_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.abs_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.abs_sub\" class=\"fn\">abs_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The positive difference of two numbers. <a href=\"num_traits/float/trait.Float.html#tymethod.abs_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integer_decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.integer_decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.integer_decode\" class=\"fn\">integer_decode</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by <code>sign * mantissa * 2 ^ exponent</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.integer_decode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_nan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.is_nan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this value is <code>NaN</code> and false otherwise. <a href=\"num_traits/float/trait.Float.html#tymethod.is_nan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_infinite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.is_infinite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this value is positive infinity or negative infinity and\nfalse otherwise. <a href=\"num_traits/float/trait.Float.html#tymethod.is_infinite\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_finite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.is_finite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.is_finite\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_normal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.is_normal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the number is neither zero, infinite,\n<a href=\"http://en.wikipedia.org/wiki/Subnormal_number\">subnormal</a>, or <code>NaN</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.is_normal\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.classify\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.classify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.classify\" class=\"fn\">classify</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/num/enum.FpCategory.html\" title=\"enum core::num::FpCategory\">FpCategory</a></h4></section></summary><div class='docblock'>Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead. <a href=\"num_traits/float/trait.Float.html#tymethod.classify\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.floor\" class=\"fn\">floor</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the largest integer less than or equal to a number. <a href=\"num_traits/float/trait.Float.html#tymethod.floor\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.ceil\" class=\"fn\">ceil</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the smallest integer greater than or equal to a number. <a href=\"num_traits/float/trait.Float.html#tymethod.ceil\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.round\" class=\"fn\">round</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the nearest integer to a number. Round half-way cases away from\n<code>0.0</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.round\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trunc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.trunc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.trunc\" class=\"fn\">trunc</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return the integer part of a number. <a href=\"num_traits/float/trait.Float.html#tymethod.trunc\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.fract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the fractional part of a number. <a href=\"num_traits/float/trait.Float.html#tymethod.fract\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> if the\nnumber is <code>Float::nan()</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.signum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns a number that represents the sign of <code>self</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.is_sign_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>,\n<code>Float::infinity()</code>, and <code>Float::nan()</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.is_sign_positive\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.is_sign_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>,\n<code>Float::neg_infinity()</code>, and <code>-Float::nan()</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.is_sign_negative\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.mul_add\" class=\"fn\">mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Fused multiply-add. Computes <code>(self * a) + b</code> with only one rounding\nerror, yielding a more accurate result than an unfused multiply-add. <a href=\"num_traits/float/trait.Float.html#tymethod.mul_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recip\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.recip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Take the reciprocal (inverse) of a number, <code>1/x</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.recip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.powi\" class=\"fn\">powi</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Raise a number to an integer power. <a href=\"num_traits/float/trait.Float.html#tymethod.powi\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.powf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.powf\" class=\"fn\">powf</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Raise a number to a floating point power. <a href=\"num_traits/float/trait.Float.html#tymethod.powf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Take the square root of a number. <a href=\"num_traits/float/trait.Float.html#tymethod.sqrt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.exp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>e^(self)</code>, (the exponential function). <a href=\"num_traits/float/trait.Float.html#tymethod.exp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.exp2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>2^(self)</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.exp2\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.ln\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the natural logarithm of the number. <a href=\"num_traits/float/trait.Float.html#tymethod.ln\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.log\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.log\" class=\"fn\">log</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the logarithm of the number with respect to an arbitrary base. <a href=\"num_traits/float/trait.Float.html#tymethod.log\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.log2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the base 2 logarithm of the number. <a href=\"num_traits/float/trait.Float.html#tymethod.log2\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.log10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the base 10 logarithm of the number. <a href=\"num_traits/float/trait.Float.html#tymethod.log10\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_degrees\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.to_degrees\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#method.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Converts radians to degrees. <a href=\"num_traits/float/trait.Float.html#method.to_degrees\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_radians\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.to_radians\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#method.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Converts degrees to radians. <a href=\"num_traits/float/trait.Float.html#method.to_radians\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.max\" class=\"fn\">max</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the maximum of the two numbers. <a href=\"num_traits/float/trait.Float.html#tymethod.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.min\" class=\"fn\">min</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the minimum of the two numbers. <a href=\"num_traits/float/trait.Float.html#tymethod.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cbrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.cbrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.cbrt\" class=\"fn\">cbrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Take the cubic root of a number. <a href=\"num_traits/float/trait.Float.html#tymethod.cbrt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hypot\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.hypot\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.hypot\" class=\"fn\">hypot</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length <code>x</code> and <code>y</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.hypot\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sin\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.sin\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the sine of a number (in radians). <a href=\"num_traits/float/trait.Float.html#tymethod.sin\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.cos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the cosine of a number (in radians). <a href=\"num_traits/float/trait.Float.html#tymethod.cos\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.tan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.tan\" class=\"fn\">tan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the tangent of a number (in radians). <a href=\"num_traits/float/trait.Float.html#tymethod.tan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.asin\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.asin\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.asin\" class=\"fn\">asin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1]. <a href=\"num_traits/float/trait.Float.html#tymethod.asin\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.acos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.acos\" class=\"fn\">acos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1]. <a href=\"num_traits/float/trait.Float.html#tymethod.acos\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.atan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.atan\" class=\"fn\">atan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2]; <a href=\"num_traits/float/trait.Float.html#tymethod.atan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atan2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.atan2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.atan2\" class=\"fn\">atan2</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code> (<code>x</code>). <a href=\"num_traits/float/trait.Float.html#tymethod.atan2\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sin_cos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.sin_cos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.sin_cos\" class=\"fn\">sin_cos</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Simultaneously computes the sine and cosine of the number, <code>x</code>. Returns\n<code>(sin(x), cos(x))</code>. <a href=\"num_traits/float/trait.Float.html#tymethod.sin_cos\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp_m1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.exp_m1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.exp_m1\" class=\"fn\">exp_m1</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>e^(self) - 1</code> in a way that is accurate even if the\nnumber is close to zero. <a href=\"num_traits/float/trait.Float.html#tymethod.exp_m1\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln_1p\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.ln_1p\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.ln_1p\" class=\"fn\">ln_1p</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nthe operations were performed separately. <a href=\"num_traits/float/trait.Float.html#tymethod.ln_1p\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sinh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.sinh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.sinh\" class=\"fn\">sinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Hyperbolic sine function. <a href=\"num_traits/float/trait.Float.html#tymethod.sinh\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cosh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.cosh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.cosh\" class=\"fn\">cosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Hyperbolic cosine function. <a href=\"num_traits/float/trait.Float.html#tymethod.cosh\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tanh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.tanh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.tanh\" class=\"fn\">tanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Hyperbolic tangent function. <a href=\"num_traits/float/trait.Float.html#tymethod.tanh\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.asinh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.asinh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.asinh\" class=\"fn\">asinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Inverse hyperbolic sine function. <a href=\"num_traits/float/trait.Float.html#tymethod.asinh\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acosh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.acosh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.acosh\" class=\"fn\">acosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Inverse hyperbolic cosine function. <a href=\"num_traits/float/trait.Float.html#tymethod.acosh\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atanh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.atanh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#tymethod.atanh\" class=\"fn\">atanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Inverse hyperbolic tangent function. <a href=\"num_traits/float/trait.Float.html#tymethod.atanh\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copysign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.copysign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#method.copysign\" class=\"fn\">copysign</a>(self, sign: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns a number composed of the magnitude of <code>self</code> and the sign of\n<code>sign</code>. <a href=\"num_traits/float/trait.Float.html#method.copysign\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subnormal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#2048\">source</a><a href=\"#method.is_subnormal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.Float.html#method.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the number is <a href=\"https://en.wikipedia.org/wiki/Subnormal_number\">subnormal</a>. <a href=\"num_traits/float/trait.Float.html#method.is_subnormal\">Read more</a></div></details></div></details>","Float","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Num-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/lib.rs.html#392\">source</a><a href=\"#impl-Num-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.FromStrRadixErr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.FromStrRadixErr\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/trait.Num.html#associatedtype.FromStrRadixErr\" class=\"associatedtype\">FromStrRadixErr</a> = <a class=\"struct\" href=\"num_traits/struct.ParseFloatError.html\" title=\"struct num_traits::ParseFloatError\">ParseFloatError</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/lib.rs.html#392\">source</a><a href=\"#method.from_str_radix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/trait.Num.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>(\n    src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>,\n    radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/trait.Num.html#associatedtype.FromStrRadixErr\" title=\"type num_traits::Num::FromStrRadixErr\">FromStrRadixErr</a>&gt;</h4></section></summary><div class='docblock'>Convert from a string and radix (typically <code>2..=36</code>). <a href=\"num_traits/trait.Num.html#tymethod.from_str_radix\">Read more</a></div></details></div></details>","Num","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAddAssign-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/mul_add.rs.html#82\">source</a><a href=\"#impl-MulAddAssign-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/ops/mul_add/trait.MulAddAssign.html\" title=\"trait num_traits::ops::mul_add::MulAddAssign\">MulAddAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/mul_add.rs.html#84\">source</a><a href=\"#method.mul_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/mul_add/trait.MulAddAssign.html#tymethod.mul_add_assign\" class=\"fn\">mul_add_assign</a>(&amp;mut self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Performs the fused multiply-add assignment operation <code>*self = (*self * a) + b</code></div></details></div></details>","MulAddAssign","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cu8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cf32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cf32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<f32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Ci16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cu16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cisize%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cisize%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.isize.html\">isize</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<isize>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Ci64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Ci32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Ci8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cu64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cf64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cf64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cusize%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cusize%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<usize>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci128%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Ci128%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i128>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu128%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cu128%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u128>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#impl-AsPrimitive%3Cu32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#776\">source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Euclid-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/euclid.rs.html#123\">source</a><a href=\"#impl-Euclid-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/ops/euclid/trait.Euclid.html\" title=\"trait num_traits::ops::euclid::Euclid\">Euclid</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/euclid.rs.html#123\">source</a><a href=\"#method.div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/euclid/trait.Euclid.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Calculates Euclidean division, the matching method for <code>rem_euclid</code>. <a href=\"num_traits/ops/euclid/trait.Euclid.html#tymethod.div_euclid\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/euclid.rs.html#123\">source</a><a href=\"#method.rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/euclid/trait.Euclid.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Calculates the least nonnegative remainder of <code>self (mod v)</code>. <a href=\"num_traits/ops/euclid/trait.Euclid.html#tymethod.rem_euclid\">Read more</a></div></details></div></details>","Euclid","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bounded-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/bounds.rs.html#113\">source</a><a href=\"#impl-Bounded-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/bounds/trait.Bounded.html\" title=\"trait num_traits::bounds::Bounded\">Bounded</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/bounds.rs.html#113\">source</a><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/bounds/trait.Bounded.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the smallest finite number this type can represent</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/bounds.rs.html#113\">source</a><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/bounds/trait.Bounded.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the largest finite number this type can represent</div></details></div></details>","Bounded","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPrimitive-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#impl-FromPrimitive-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_isize\" class=\"fn\">from_isize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>isize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_i8\" class=\"fn\">from_i8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_i16\" class=\"fn\">from_i16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_i32\" class=\"fn\">from_i32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#tymethod.from_i64\" class=\"fn\">from_i64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_i128\" class=\"fn\">from_i128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_usize\" class=\"fn\">from_usize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>usize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_u8\" class=\"fn\">from_u8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_u16\" class=\"fn\">from_u16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_u32\" class=\"fn\">from_u32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#tymethod.from_u64\" class=\"fn\">from_u64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_u128\" class=\"fn\">from_u128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_f32\" class=\"fn\">from_f32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>f32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/cast.rs.html#581\">source</a><a href=\"#method.from_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_f64\" class=\"fn\">from_f64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>f64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"num_traits/cast/trait.FromPrimitive.html#method.from_f64\">Read more</a></div></details></div></details>","FromPrimitive","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloatCore-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#835\">source</a><a href=\"#impl-FloatCore-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/float/trait.FloatCore.html\" title=\"trait num_traits::float::FloatCore\">FloatCore</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.infinity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.infinity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.infinity\" class=\"fn\">infinity</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns positive infinity. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.infinity\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_infinity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.neg_infinity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.neg_infinity\" class=\"fn\">neg_infinity</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns negative infinity. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.neg_infinity\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.nan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.nan\" class=\"fn\">nan</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns NaN. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.nan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.neg_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.neg_zero\" class=\"fn\">neg_zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns <code>-0.0</code>. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.neg_zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the smallest finite value that this type can represent. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.min_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_positive_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.min_positive_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.min_positive_value\" class=\"fn\">min_positive_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the smallest positive, normalized value that this type can represent. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.min_positive_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.epsilon\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.epsilon\" class=\"fn\">epsilon</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns epsilon, a small positive value. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.epsilon\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#836-845\">source</a><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the largest finite value that this type can represent. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.max_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integer_decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#848\">source</a><a href=\"#method.integer_decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.integer_decode\" class=\"fn\">integer_decode</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by <code>sign * mantissa * 2 ^ exponent</code>. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.integer_decode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_nan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.is_nan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the number is NaN. <a href=\"num_traits/float/trait.FloatCore.html#method.is_nan\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_infinite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.is_infinite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the number is infinite. <a href=\"num_traits/float/trait.FloatCore.html#method.is_infinite\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_finite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.is_finite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the number is neither infinite or NaN. <a href=\"num_traits/float/trait.FloatCore.html#method.is_finite\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_normal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.is_normal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the number is neither zero, infinite, subnormal or NaN. <a href=\"num_traits/float/trait.FloatCore.html#method.is_normal\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.classify\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.classify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.classify\" class=\"fn\">classify</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/num/enum.FpCategory.html\" title=\"enum core::num::FpCategory\">FpCategory</a></h4></section></summary><div class='docblock'>Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.classify\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.is_sign_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and\n<code>FloatCore::infinity()</code>, and <code>FloatCore::nan()</code>. <a href=\"num_traits/float/trait.FloatCore.html#method.is_sign_positive\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.is_sign_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and\n<code>FloatCore::neg_infinity()</code>, and <code>-FloatCore::nan()</code>. <a href=\"num_traits/float/trait.FloatCore.html#method.is_sign_negative\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.min\" class=\"fn\">min</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the minimum of the two numbers. <a href=\"num_traits/float/trait.FloatCore.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.max\" class=\"fn\">max</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the maximum of the two numbers. <a href=\"num_traits/float/trait.FloatCore.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recip\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.recip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.recip\" class=\"fn\">recip</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the reciprocal (multiplicative inverse) of the number. <a href=\"num_traits/float/trait.FloatCore.html#method.recip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_degrees\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.to_degrees\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Converts to degrees, assuming the number is in radians. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.to_degrees\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_radians\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#852-865\">source</a><a href=\"#method.to_radians\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#tymethod.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Converts to radians, assuming the number is in degrees. <a href=\"num_traits/float/trait.FloatCore.html#tymethod.to_radians\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subnormal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#868-870\">source</a><a href=\"#method.is_subnormal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the number is <a href=\"https://en.wikipedia.org/wiki/Subnormal_number\">subnormal</a>. <a href=\"num_traits/float/trait.FloatCore.html#method.is_subnormal\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.floor\" class=\"fn\">floor</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the largest integer less than or equal to a number. <a href=\"num_traits/float/trait.FloatCore.html#method.floor\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.ceil\" class=\"fn\">ceil</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the smallest integer greater than or equal to a number. <a href=\"num_traits/float/trait.FloatCore.html#method.ceil\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.round\" class=\"fn\">round</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the nearest integer to a number. Round half-way cases away from <code>0.0</code>. <a href=\"num_traits/float/trait.FloatCore.html#method.round\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trunc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.trunc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.trunc\" class=\"fn\">trunc</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return the integer part of a number. <a href=\"num_traits/float/trait.FloatCore.html#method.trunc\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.fract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.fract\" class=\"fn\">fract</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the fractional part of a number. <a href=\"num_traits/float/trait.FloatCore.html#method.fract\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Computes the absolute value of <code>self</code>. Returns <code>FloatCore::nan()</code> if the\nnumber is <code>FloatCore::nan()</code>. <a href=\"num_traits/float/trait.FloatCore.html#method.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.signum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns a number that represents the sign of <code>self</code>. <a href=\"num_traits/float/trait.FloatCore.html#method.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/float.rs.html#873-882\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/float/trait.FloatCore.html#method.powi\" class=\"fn\">powi</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Raise a number to an integer power. <a href=\"num_traits/float/trait.FloatCore.html#method.powi\">Read more</a></div></details></div></details>","FloatCore","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytes-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#impl-FromBytes-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#method.from_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Create a number from its representation as a byte array in big endian. <a href=\"num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_be_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#method.from_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Create a number from its representation as a byte array in little endian. <a href=\"num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_le_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/bytes.rs.html#342\">source</a><a href=\"#method.from_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/bytes/trait.FromBytes.html#method.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Create a number from its memory representation as a byte array in native endianness. <a href=\"num_traits/ops/bytes/trait.FromBytes.html#method.from_ne_bytes\">Read more</a></div></details></div></details>","FromBytes","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAdd-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/mul_add.rs.html#48\">source</a><a href=\"#impl-MulAdd-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/ops/mul_add/trait.MulAdd.html\" title=\"trait num_traits::ops::mul_add::MulAdd\">MulAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/ops/mul_add/trait.MulAdd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The resulting type after applying the fused multiply-add.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/mul_add.rs.html#52\">source</a><a href=\"#method.mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/mul_add/trait.MulAdd.html#tymethod.mul_add\" class=\"fn\">mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"num_traits/ops/mul_add/trait.MulAdd.html\" title=\"trait num_traits::ops::mul_add::MulAdd\">MulAdd</a>&gt;::<a class=\"associatedtype\" href=\"num_traits/ops/mul_add/trait.MulAdd.html#associatedtype.Output\" title=\"type num_traits::ops::mul_add::MulAdd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the fused multiply-add operation <code>(self * a) + b</code></div></details></div></details>","MulAdd","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Inv-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/inv.rs.html#27\">source</a><a href=\"#impl-Inv-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"num_traits/ops/inv/trait.Inv.html\" title=\"trait num_traits::ops::inv::Inv\">Inv</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"num_traits/ops/inv/trait.Inv.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inv\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/ops/inv.rs.html#30\">source</a><a href=\"#method.inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/ops/inv/trait.Inv.html#tymethod.inv\" class=\"fn\">inv</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Returns the multiplicative inverse of <code>self</code>. <a href=\"num_traits/ops/inv/trait.Inv.html#tymethod.inv\">Read more</a></div></details></div></details>","Inv","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26DualQuaternion%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/dual_quaternion_ops.rs.html#957\">source</a><a href=\"#impl-Mul%3C%26DualQuaternion%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/dual_quaternion_ops.rs.html#957\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    right: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b DualQuaternion<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDualQuaternion%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/dual_quaternion_ops.rs.html#957\">source</a><a href=\"#impl-Mul%3CDualQuaternion%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/dual_quaternion_ops.rs.html#957\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    right: <a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/dual_quaternion/struct.DualQuaternion.html\" title=\"struct nalgebra::geometry::dual_quaternion::DualQuaternion\">DualQuaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<DualQuaternion<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26OPoint%3Cf64,+D%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/point_ops.rs.html#295\">source</a><a href=\"#impl-Mul%3C%26OPoint%3Cf64,+D%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.DimName.html\" title=\"trait nalgebra::base::dimension::DimName\">DimName</a>,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/point_ops.rs.html#295\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    right: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b OPoint<f64, D>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Matrix%3Cf64,+R,+C,+S%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/ops.rs.html#548\">source</a><a href=\"#impl-Mul%3C%26Matrix%3Cf64,+R,+C,+S%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, R, C, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, S&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C&gt;,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/ops.rs.html#548\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, S&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, S&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Matrix<f64, R, C, S>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CQuaternion%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/quaternion_ops.rs.html#538\">source</a><a href=\"#impl-Mul%3CQuaternion%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/quaternion_ops.rs.html#538\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, right: <a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Quaternion<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3COPoint%3Cf64,+D%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/point_ops.rs.html#295\">source</a><a href=\"#impl-Mul%3COPoint%3Cf64,+D%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.DimName.html\" title=\"trait nalgebra::base::dimension::DimName\">DimName</a>,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/point_ops.rs.html#295\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, right: <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<OPoint<f64, D>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Quaternion%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/quaternion_ops.rs.html#538\">source</a><a href=\"#impl-Mul%3C%26Quaternion%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/quaternion_ops.rs.html#538\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    right: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/quaternion/struct.Quaternion.html\" title=\"struct nalgebra::geometry::quaternion::Quaternion\">Quaternion</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Quaternion<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CMatrix%3Cf64,+R,+C,+S%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/ops.rs.html#548\">source</a><a href=\"#impl-Mul%3CMatrix%3Cf64,+R,+C,+S%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, C, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, S&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C&gt;,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/ops.rs.html#548\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, S&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, R, C, S&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Matrix<f64, R, C, S>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CWideF64x4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1541\">source</a><a href=\"#impl-SubsetOf%3CWideF64x4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF64x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF64x4\">WideF64x4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1541\">source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF64x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF64x4\">WideF64x4</a></h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1541\">source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(element: &amp;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF64x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF64x4\">WideF64x4</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1541\">source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(c: &amp;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF64x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF64x4\">WideF64x4</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<WideF64x4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3Cf64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#impl-SubsetOf%3Cf64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(element: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(_: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CAutoSimd%3CN2%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/simd/auto_simd_impl.rs.html#229\">source</a><a href=\"#impl-SubsetOf%3CAutoSimd%3CN2%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N2&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"simba/simd/auto_simd_impl/struct.AutoSimd.html\" title=\"struct simba::simd::auto_simd_impl::AutoSimd\">AutoSimd</a>&lt;N2&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    <a class=\"struct\" href=\"simba/simd/auto_simd_impl/struct.AutoSimd.html\" title=\"struct simba::simd::auto_simd_impl::AutoSimd\">AutoSimd</a>&lt;N2&gt;: <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    &lt;<a class=\"struct\" href=\"simba/simd/auto_simd_impl/struct.AutoSimd.html\" title=\"struct simba::simd::auto_simd_impl::AutoSimd\">AutoSimd</a>&lt;N2&gt; as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/auto_simd_impl.rs.html#229\">source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"simba/simd/auto_simd_impl/struct.AutoSimd.html\" title=\"struct simba::simd::auto_simd_impl::AutoSimd\">AutoSimd</a>&lt;N2&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/auto_simd_impl.rs.html#229\">source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(element: &amp;<a class=\"struct\" href=\"simba/simd/auto_simd_impl/struct.AutoSimd.html\" title=\"struct simba::simd::auto_simd_impl::AutoSimd\">AutoSimd</a>&lt;N2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/auto_simd_impl.rs.html#229\">source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(c: &amp;<a class=\"struct\" href=\"simba/simd/auto_simd_impl/struct.AutoSimd.html\" title=\"struct simba::simd::auto_simd_impl::AutoSimd\">AutoSimd</a>&lt;N2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<AutoSimd<N2>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CWideF32x4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1540\">source</a><a href=\"#impl-SubsetOf%3CWideF32x4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x4\">WideF32x4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1540\">source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x4\">WideF32x4</a></h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1540\">source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(element: &amp;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x4\">WideF32x4</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1540\">source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(c: &amp;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x4.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x4\">WideF32x4</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<WideF32x4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CWideF32x8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1544\">source</a><a href=\"#impl-SubsetOf%3CWideF32x8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x8.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x8\">WideF32x8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1544\">source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x8.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x8\">WideF32x8</a></h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1544\">source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(element: &amp;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x8.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x8\">WideF32x8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/wide_simd_impl.rs.html#1544\">source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(c: &amp;<a class=\"struct\" href=\"simba/simd/wide_simd_impl/struct.WideF32x8.html\" title=\"struct simba::simd::wide_simd_impl::WideF32x8\">WideF32x8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<WideF32x8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CComplex%3CN2%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#216-218\">source</a><a href=\"#impl-SubsetOf%3CComplex%3CN2%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N2&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;N2&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    N2: <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#216-218\">source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;N2&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#216-218\">source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(element: &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;N2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#216-218\">source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(c: &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;N2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<Complex<N2>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3Cf32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#impl-SubsetOf%3Cf32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(element: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#132-149\">source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(_: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<f32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RealField-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#impl-RealField-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The smallest finite positive value representable using this type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The largest finite positive value representable using this type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.pi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.pi\" class=\"fn\">pi</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Archimedes’ constant.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.two_pi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.two_pi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.two_pi\" class=\"fn\">two_pi</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>2.0 * pi.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_pi_2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_pi_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_pi_2\" class=\"fn\">frac_pi_2</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>pi / 2.0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_pi_3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_pi_3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_pi_3\" class=\"fn\">frac_pi_3</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>pi / 3.0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_pi_4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_pi_4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_pi_4\" class=\"fn\">frac_pi_4</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>pi / 4.0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_pi_6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_pi_6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_pi_6\" class=\"fn\">frac_pi_6</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>pi / 6.0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_pi_8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_pi_8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_pi_8\" class=\"fn\">frac_pi_8</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>pi / 8.0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_1_pi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_1_pi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_1_pi\" class=\"fn\">frac_1_pi</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>1.0 / pi.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_2_pi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_2_pi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_2_pi\" class=\"fn\">frac_2_pi</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>2.0 / pi.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frac_2_sqrt_pi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.frac_2_sqrt_pi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.frac_2_sqrt_pi\" class=\"fn\">frac_2_sqrt_pi</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>2.0 / sqrt(pi).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.e\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.e\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.e\" class=\"fn\">e</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Euler’s number.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log2_e\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.log2_e\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.log2_e\" class=\"fn\">log2_e</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>log2(e).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log10_e\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.log10_e\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.log10_e\" class=\"fn\">log10_e</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>log10(e).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln_2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.ln_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.ln_2\" class=\"fn\">ln_2</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>ln(2.0).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln_10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.ln_10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.ln_10\" class=\"fn\">ln_10</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>ln(10.0).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.is_sign_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is the sign of this real number positive?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.is_sign_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is the sign of this real number negative?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copysign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.copysign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Copies the sign of <code>sign</code> to <code>self</code>. <a href=\"simba/scalar/real/trait.RealField.html#tymethod.copysign\">Read more</a></div></details><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.max\" class=\"fn\">max</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.min\" class=\"fn\">min</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.clamp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.clamp\" class=\"fn\">clamp</a>(self, min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, max: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.atan2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/real.rs.html#227\">source</a><a href=\"#method.atan2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/real/trait.RealField.html#tymethod.atan2\" class=\"fn\">atan2</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","RealField","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ComplexField-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#impl-ComplexField-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.RealField\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RealField\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" class=\"associatedtype\">RealField</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_real\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.from_real\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.from_real\" class=\"fn\">from_real</a>(re: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Builds a pure-real complex number from the given value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.real\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.real\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.real\" class=\"fn\">real</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a></h4></section></summary><div class='docblock'>The real part of this complex number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.imaginary\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.imaginary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.imaginary\" class=\"fn\">imaginary</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a></h4></section></summary><div class='docblock'>The imaginary part of this complex number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.norm1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.norm1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.norm1\" class=\"fn\">norm1</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a></h4></section></summary><div class='docblock'>The sum of the absolute value of this complex number’s real and imaginary part.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.modulus\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.modulus\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.modulus\" class=\"fn\">modulus</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a></h4></section></summary><div class='docblock'>The modulus of this complex number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.modulus_squared\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.modulus_squared\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.modulus_squared\" class=\"fn\">modulus_squared</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a></h4></section></summary><div class='docblock'>The squared modulus of this complex number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.argument\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.argument\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.argument\" class=\"fn\">argument</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a></h4></section></summary><div class='docblock'>The argument of this complex number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_exp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.to_exp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.to_exp\" class=\"fn\">to_exp</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>The exponential form of this complex number: (modulus, e^{i arg})</div></details><section id=\"method.recip\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.recip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.conjugate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.conjugate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.conjugate\" class=\"fn\">conjugate</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.scale\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.scale\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.scale\" class=\"fn\">scale</a>(self, factor: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Multiplies this complex number by <code>factor</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unscale\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.unscale\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.unscale\" class=\"fn\">unscale</a>(self, factor: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Divides this complex number by <code>factor</code>.</div></details><section id=\"method.floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.floor\" class=\"fn\">floor</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.ceil\" class=\"fn\">ceil</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.round\" class=\"fn\">round</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.trunc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.trunc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.trunc\" class=\"fn\">trunc</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.fract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.fract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The absolute value of this complex number: <code>self / self.signum()</code>. <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.abs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.signum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The exponential part of this complex number: <code>self / self.modulus()</code></div></details><section id=\"method.mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.mul_add\" class=\"fn\">mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.powi\" class=\"fn\">powi</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.powf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.powf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.powf\" class=\"fn\">powf</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.powc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.powc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.powc\" class=\"fn\">powc</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.try_sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.try_sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.try_sqrt\" class=\"fn\">try_sqrt</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section><section id=\"method.exp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.exp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.exp2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.exp2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.exp_m1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.exp_m1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.exp_m1\" class=\"fn\">exp_m1</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.ln_1p\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.ln_1p\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.ln_1p\" class=\"fn\">ln_1p</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.ln\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.ln\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.log\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.log\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.log\" class=\"fn\">log</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.log2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.log2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.log10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.log10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.cbrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.cbrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.cbrt\" class=\"fn\">cbrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.hypot\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.hypot\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.hypot\" class=\"fn\">hypot</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/scalar/complex/trait.ComplexField.html\" title=\"trait simba::scalar::complex::ComplexField\">ComplexField</a>&gt;::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a></h4></section></summary><div class='docblock'>Computes (self.conjugate() * self + other.conjugate() * other).sqrt()</div></details><section id=\"method.sin\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.sin\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.cos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.cos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.tan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.tan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.tan\" class=\"fn\">tan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.asin\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.asin\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.asin\" class=\"fn\">asin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.acos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.acos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.acos\" class=\"fn\">acos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.atan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.atan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.atan\" class=\"fn\">atan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.sin_cos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.sin_cos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.sin_cos\" class=\"fn\">sin_cos</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section><section id=\"method.sinh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.sinh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.sinh\" class=\"fn\">sinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.cosh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.cosh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.cosh\" class=\"fn\">cosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.tanh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.tanh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.tanh\" class=\"fn\">tanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.asinh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.asinh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.asinh\" class=\"fn\">asinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.acosh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.acosh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.acosh\" class=\"fn\">acosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.atanh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.atanh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.atanh\" class=\"fn\">atanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.is_finite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#491-494\">source</a><a href=\"#method.is_finite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#tymethod.is_finite\" class=\"fn\">is_finite</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_polar\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#186\">source</a><a href=\"#method.to_polar\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.to_polar\" class=\"fn\">to_polar</a>(self) -&gt; (Self::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a>, Self::<a class=\"associatedtype\" href=\"simba/scalar/complex/trait.ComplexField.html#associatedtype.RealField\" title=\"type simba::scalar::complex::ComplexField::RealField\">RealField</a>)</h4></section></summary><div class='docblock'>The polar form of this complex number: (modulus, arg)</div></details><section id=\"method.sinh_cosh\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#186\">source</a><a href=\"#method.sinh_cosh\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.sinh_cosh\" class=\"fn\">sinh_cosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(Self, Self)</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.sinc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#186\">source</a><a href=\"#method.sinc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.sinc\" class=\"fn\">sinc</a>(self) -&gt; Self</h4></section></summary><div class='docblock'>Cardinal sine</div></details><section id=\"method.sinhc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#186\">source</a><a href=\"#method.sinhc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.sinhc\" class=\"fn\">sinhc</a>(self) -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.cosc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#186\">source</a><a href=\"#method.cosc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.cosc\" class=\"fn\">cosc</a>(self) -&gt; Self</h4></section></summary><div class='docblock'>Cardinal cos</div></details><section id=\"method.coshc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/complex.rs.html#186\">source</a><a href=\"#method.coshc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/complex/trait.ComplexField.html#method.coshc\" class=\"fn\">coshc</a>(self) -&gt; Self</h4></section></div></details>","ComplexField","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-PrimitiveSimdValue-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#impl-PrimitiveSimdValue-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","PrimitiveSimdValue","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdValue-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#impl-SimdValue-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" class=\"associatedtype\">Element</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The type of the elements of each lane of this SIMD value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.SimdBool\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SimdBool\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.SimdBool\" class=\"associatedtype\">SimdBool</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Type of the result of comparing two SIMD values like <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lanes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#method.lanes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.lanes\" class=\"fn\">lanes</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The number of lanes of this SIMD value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splat\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#method.splat\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.splat\" class=\"fn\">splat</a>(val: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Initializes an SIMD value with each lanes set to <code>val</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#method.extract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.extract\" class=\"fn\">extract</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a></h4></section></summary><div class='docblock'>Extracts the i-th lane of <code>self</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.extract\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#method.extract_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.extract_unchecked\" class=\"fn\">extract_unchecked</a>(&amp;self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a></h4></section></summary><div class='docblock'>Extracts the i-th lane of <code>self</code> without bound-checking.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#method.replace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, val: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>)</h4></section></summary><div class='docblock'>Replaces the i-th lane of <code>self</code> by <code>val</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.replace\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#method.replace_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.replace_unchecked\" class=\"fn\">replace_unchecked</a>(\n    &amp;mut self,\n    _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>,\n    val: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>\n)</h4></section></summary><div class='docblock'>Replaces the i-th lane of <code>self</code> by <code>val</code> without bound-checking.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#193-195\">source</a><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.select\" class=\"fn\">select</a>(self, cond: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.SimdBool\" title=\"type simba::simd::simd_value::SimdValue::SimdBool\">SimdBool</a>, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.select\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_lanes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#39-41\">source</a><a href=\"#method.map_lanes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.map_lanes\" class=\"fn\">map_lanes</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h4></section></summary><div class='docblock'>Applies a function to each lane of <code>self</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.map_lanes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_map_lanes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#58-64\">source</a><a href=\"#method.zip_map_lanes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.zip_map_lanes\" class=\"fn\">zip_map_lanes</a>(\n    self,\n    b: Self,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>\n) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h4></section></summary><div class='docblock'>Applies a function to each lane of <code>self</code> paired with the corresponding lane of <code>b</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.zip_map_lanes\">Read more</a></div></details></div></details>","SimdValue","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-Field-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/simba/scalar/field.rs.html#37\">source</a><a href=\"#impl-Field-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"simba/scalar/field/trait.Field.html\" title=\"trait simba::scalar::field::Field\">Field</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","Field","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CComplex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Add%3CComplex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Add%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&'a Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Mul%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'a Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CComplex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Mul%3CComplex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CComplex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Sub%3CComplex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Sub%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&'a Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Rem%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;'a <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&'a Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CComplex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Rem%3CComplex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CComplex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Div%3CComplex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#impl-Div%3C%26Complex%3Cf64%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'a <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_complex/lib.rs.html#1148\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&'a Complex<f64>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cf64x2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#217\">source</a><a href=\"#impl-Add%3Cf64x2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#221\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<f64x2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cf64x4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#158\">source</a><a href=\"#impl-Add%3Cf64x4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#162\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<f64x4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cf64x2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#235\">source</a><a href=\"#impl-Mul%3Cf64x2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#239\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<f64x2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cf64x4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#176\">source</a><a href=\"#impl-Mul%3Cf64x4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#180\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<f64x4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cf64x2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#226\">source</a><a href=\"#impl-Sub%3Cf64x2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#230\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<f64x2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cf64x4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#167\">source</a><a href=\"#impl-Sub%3Cf64x4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#171\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<f64x4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cf64x4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#185\">source</a><a href=\"#impl-Div%3Cf64x4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x4_.rs.html#189\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"wide/f64x4_/struct.f64x4.html\" title=\"struct wide::f64x4_::f64x4\">f64x4</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<f64x4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cf64x2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#244\">source</a><a href=\"#impl-Div%3Cf64x2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wide/f64x2_.rs.html#248\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"wide/f64x2_/struct.f64x2.html\" title=\"struct wide::f64x2_::f64x2\">f64x2</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<f64x2>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-Pod-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/pod.rs.html#53\">source</a><a href=\"#impl-Pod-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/pod/trait.Pod.html\" title=\"trait bytemuck::pod::Pod\">Pod</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","Pod","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroable-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable.rs.html#52\">source</a><a href=\"#impl-Zeroable-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytemuck/zeroable/trait.Zeroable.html\" title=\"trait bytemuck::zeroable::Zeroable\">Zeroable</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytemuck/zeroable.rs.html#32\">source</a><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytemuck/zeroable/trait.Zeroable.html#method.zeroed\" class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Calls <a href=\"https://doc.rust-lang.org/1.75.0/core/mem/fn.zeroed.html\" title=\"fn core::mem::zeroed\"><code>zeroed</code></a>. <a href=\"bytemuck/zeroable/trait.Zeroable.html#method.zeroed\">Read more</a></div></details></div></details>","Zeroable","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CPInt%3CU%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#impl-Pow%3CPInt%3CU%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U&gt; <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/int/struct.PInt.html\" title=\"struct typenum::int::PInt\">PInt</a>&lt;U&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"typenum/marker_traits/trait.Unsigned.html\" title=\"trait typenum::marker_traits::Unsigned\">Unsigned</a> + <a class=\"trait\" href=\"typenum/marker_traits/trait.NonZero.html\" title=\"trait typenum::marker_traits::NonZero\">NonZero</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"typenum/int/struct.PInt.html\" title=\"struct typenum::int::PInt\">PInt</a>&lt;U&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/int/struct.PInt.html\" title=\"struct typenum::int::PInt\">PInt</a>&lt;U&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<PInt<U>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CZ0%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#impl-Pow%3CZ0%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/int/struct.Z0.html\" title=\"struct typenum::int::Z0\">Z0</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"typenum/int/struct.Z0.html\" title=\"struct typenum::int::Z0\">Z0</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/int/struct.Z0.html\" title=\"struct typenum::int::Z0\">Z0</a>&gt;&gt;::<a class=\"associatedtype\" href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<Z0>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CUInt%3CU,+B%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#impl-Pow%3CUInt%3CU,+B%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, B&gt; <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;U, B&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"typenum/marker_traits/trait.Unsigned.html\" title=\"trait typenum::marker_traits::Unsigned\">Unsigned</a>,\n    B: <a class=\"trait\" href=\"typenum/marker_traits/trait.Bit.html\" title=\"trait typenum::marker_traits::Bit\">Bit</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;U, B&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;U, B&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<UInt<U, B>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CUTerm%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#impl-Pow%3CUTerm%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>&gt;&gt;::<a class=\"associatedtype\" href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<UTerm>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CNInt%3CU%3E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#impl-Pow%3CNInt%3CU%3E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U&gt; <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/int/struct.NInt.html\" title=\"struct typenum::int::NInt\">NInt</a>&lt;U&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"typenum/marker_traits/trait.Unsigned.html\" title=\"trait typenum::marker_traits::Unsigned\">Unsigned</a> + <a class=\"trait\" href=\"typenum/marker_traits/trait.NonZero.html\" title=\"trait typenum::marker_traits::NonZero\">NonZero</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/typenum/type_operators.rs.html#188\">source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"typenum/int/struct.NInt.html\" title=\"struct typenum::int::NInt\">NInt</a>&lt;U&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"typenum/int/struct.NInt.html\" title=\"struct typenum::int::NInt\">NInt</a>&lt;U&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<NInt<U>>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CDVec4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#828\">source</a><a href=\"#impl-Div%3CDVec4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#831\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<DVec4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CDVec3%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#847\">source</a><a href=\"#impl-Div%3CDVec3%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#850\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<DVec3>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CDVec2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#770\">source</a><a href=\"#impl-Div%3CDVec2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#773\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<DVec2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CDVec4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#1064\">source</a><a href=\"#impl-Rem%3CDVec4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#1067\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<DVec4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CDVec3%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#1063\">source</a><a href=\"#impl-Rem%3CDVec3%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#1066\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<DVec3>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CDVec2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#966\">source</a><a href=\"#impl-Rem%3CDVec2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#969\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<DVec2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CDVec2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#917\">source</a><a href=\"#impl-Sub%3CDVec2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#920\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<DVec2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CDVec4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#1005\">source</a><a href=\"#impl-Sub%3CDVec4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#1008\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<DVec4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CDVec3%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#1009\">source</a><a href=\"#impl-Sub%3CDVec3%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#1012\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<DVec3>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDVec4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#887\">source</a><a href=\"#impl-Mul%3CDVec4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#890\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<DVec4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDMat3%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dmat3.rs.html#614\">source</a><a href=\"#impl-Mul%3CDMat3%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat3/struct.DMat3.html\" title=\"struct glam::f64::dmat3::DMat3\">DMat3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat3/struct.DMat3.html\" title=\"struct glam::f64::dmat3::DMat3\">DMat3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dmat3.rs.html#617\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat3/struct.DMat3.html\" title=\"struct glam::f64::dmat3::DMat3\">DMat3</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat3/struct.DMat3.html\" title=\"struct glam::f64::dmat3::DMat3\">DMat3</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<DMat3>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDMat4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dmat4.rs.html#1133\">source</a><a href=\"#impl-Mul%3CDMat4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat4/struct.DMat4.html\" title=\"struct glam::f64::dmat4::DMat4\">DMat4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat4/struct.DMat4.html\" title=\"struct glam::f64::dmat4::DMat4\">DMat4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dmat4.rs.html#1136\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat4/struct.DMat4.html\" title=\"struct glam::f64::dmat4::DMat4\">DMat4</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat4/struct.DMat4.html\" title=\"struct glam::f64::dmat4::DMat4\">DMat4</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<DMat4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDVec3%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#901\">source</a><a href=\"#impl-Mul%3CDVec3%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#904\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<DVec3>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDMat2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dmat2.rs.html#347\">source</a><a href=\"#impl-Mul%3CDMat2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat2/struct.DMat2.html\" title=\"struct glam::f64::dmat2::DMat2\">DMat2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat2/struct.DMat2.html\" title=\"struct glam::f64::dmat2::DMat2\">DMat2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dmat2.rs.html#350\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat2/struct.DMat2.html\" title=\"struct glam::f64::dmat2::DMat2\">DMat2</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dmat2/struct.DMat2.html\" title=\"struct glam::f64::dmat2::DMat2\">DMat2</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<DMat2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDVec2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#819\">source</a><a href=\"#impl-Mul%3CDVec2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#822\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<DVec2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CDVec3%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#955\">source</a><a href=\"#impl-Add%3CDVec3%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec3.rs.html#958\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec3/struct.DVec3.html\" title=\"struct glam::f64::dvec3::DVec3\">DVec3</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<DVec3>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CDVec2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#868\">source</a><a href=\"#impl-Add%3CDVec2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec2.rs.html#871\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<DVec2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CDVec4%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#946\">source</a><a href=\"#impl-Add%3CDVec4%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/glam/0.24.2/src/glam/f64/dvec4.rs.html#949\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/glam/0.24.2/glam/f64/dvec4/struct.DVec4.html\" title=\"struct glam::f64::dvec4::DVec4\">DVec4</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<DVec4>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#382-388\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#382-388\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</span></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/value.rs.html#306\">source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, E&gt; <a class=\"trait\" href=\"serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a><span class=\"where fmt-newline\">where\n    E: <a class=\"trait\" href=\"serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"serde/de/value/struct.F64Deserializer.html\" title=\"struct serde::de::value::F64Deserializer\">F64Deserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/value.rs.html#306\">source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; <a class=\"struct\" href=\"serde/de/value/struct.F64Deserializer.html\" title=\"struct serde::de::value::F64Deserializer\">F64Deserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#35\">source</a><a href=\"#impl-Serialize-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#35\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</span></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytes-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3021-3070\">source</a><a href=\"#impl-FromBytes-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#1842-1844\">source</a><a href=\"#method.ref_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.ref_from\" class=\"fn\">ref_from</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Interprets the given <code>bytes</code> as a <code>&amp;Self</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.ref_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#1884-1886\">source</a><a href=\"#method.ref_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.ref_from_prefix\" class=\"fn\">ref_from_prefix</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>bytes</code> as a <code>&amp;Self</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.ref_from_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#1920-1922\">source</a><a href=\"#method.ref_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.ref_from_suffix\" class=\"fn\">ref_from_suffix</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Interprets the suffix of the given <code>bytes</code> as a <code>&amp;Self</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.ref_from_suffix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#1962-1964\">source</a><a href=\"#method.mut_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.mut_from\" class=\"fn\">mut_from</a>(bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a>,</span></h4></section></summary><div class='docblock'>Interprets the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.mut_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2009-2011\">source</a><a href=\"#method.mut_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.mut_from_prefix\" class=\"fn\">mut_from_prefix</a>(bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a>,</span></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut Self</code> without\ncopying. <a href=\"zerocopy/trait.FromBytes.html#method.mut_from_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2049-2051\">source</a><a href=\"#method.mut_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.mut_from_suffix\" class=\"fn\">mut_from_suffix</a>(bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut Self</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a>,</span></h4></section></summary><div class='docblock'>Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.mut_from_suffix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2096-2098\">source</a><a href=\"#method.slice_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.slice_from\" class=\"fn\">slice_from</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Interprets the given <code>bytes</code> as a <code>&amp;[Self]</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.slice_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_from_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2147-2149\">source</a><a href=\"#method.slice_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.slice_from_prefix\" class=\"fn\">slice_from_prefix</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>])&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with length\nequal to <code>count</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.slice_from_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_from_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2198-2200\">source</a><a href=\"#method.slice_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.slice_from_suffix\" class=\"fn\">slice_from_suffix</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>)&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Interprets the suffix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with length\nequal to <code>count</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.slice_from_suffix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_slice_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2249-2251\">source</a><a href=\"#method.mut_slice_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.mut_slice_from\" class=\"fn\">mut_slice_from</a>(bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a>,</span></h4></section></summary><div class='docblock'>Interprets the given <code>bytes</code> as a <code>&amp;mut [Self]</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.mut_slice_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_slice_from_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2304-2306\">source</a><a href=\"#method.mut_slice_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.mut_slice_from_prefix\" class=\"fn\">mut_slice_from_prefix</a>(\n    bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>])&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a>,</span></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> with length\nequal to <code>count</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.mut_slice_from_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_slice_from_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2359-2361\">source</a><a href=\"#method.mut_slice_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.mut_slice_from_suffix\" class=\"fn\">mut_slice_from_suffix</a>(\n    bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>], &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>)&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a>,</span></h4></section></summary><div class='docblock'>Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> with length\nequal to <code>count</code> without copying. <a href=\"zerocopy/trait.FromBytes.html#method.mut_slice_from_suffix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2396-2398\">source</a><a href=\"#method.read_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.read_from\" class=\"fn\">read_from</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Reads a copy of <code>Self</code> from <code>bytes</code>. <a href=\"zerocopy/trait.FromBytes.html#method.read_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2435-2437\">source</a><a href=\"#method.read_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.read_from_prefix\" class=\"fn\">read_from_prefix</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Reads a copy of <code>Self</code> from the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.FromBytes.html#method.read_from_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2469-2471\">source</a><a href=\"#method.read_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromBytes.html#method.read_from_suffix\" class=\"fn\">read_from_suffix</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Reads a copy of <code>Self</code> from the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.FromBytes.html#method.read_from_suffix\">Read more</a></div></details></div></details>","FromBytes","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromZeroes-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3021-3070\">source</a><a href=\"#impl-FromZeroes-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.FromZeroes.html\" title=\"trait zerocopy::FromZeroes\">FromZeroes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#1404\">source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromZeroes.html#method.zero\" class=\"fn\">zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Overwrites <code>self</code> with zeroes. <a href=\"zerocopy/trait.FromZeroes.html#method.zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#1444-1446\">source</a><a href=\"#method.new_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.FromZeroes.html#method.new_zeroed\" class=\"fn\">new_zeroed</a>() -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Creates an instance of <code>Self</code> from zeroed bytes. <a href=\"zerocopy/trait.FromZeroes.html#method.new_zeroed\">Read more</a></div></details></div></details>","FromZeroes","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#3021-3070\">source</a><a href=\"#impl-AsBytes-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/trait.AsBytes.html\" title=\"trait zerocopy::AsBytes\">AsBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2699\">source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Gets the bytes of this value. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2771-2773\">source</a><a href=\"#method.as_bytes_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a><span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"zerocopy/trait.FromBytes.html\" title=\"trait zerocopy::FromBytes\">FromBytes</a>,</span></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a href=\"zerocopy/trait.AsBytes.html#method.as_bytes_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2850\">source</a><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to\" class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2907\">source</a><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\" class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/lib.rs.html#2968\">source</a><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\" class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a href=\"zerocopy/trait.AsBytes.html#method.write_to_suffix\">Read more</a></div></details></div></details>","AsBytes","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloatMeasure-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/algo/mod.rs.html#840\">source</a><a href=\"#impl-FloatMeasure-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"petgraph/algo/trait.FloatMeasure.html\" title=\"trait petgraph::algo::FloatMeasure\">FloatMeasure</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/algo/mod.rs.html#841\">source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/algo/trait.FloatMeasure.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.infinite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/algo/mod.rs.html#844\">source</a><a href=\"#method.infinite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/algo/trait.FloatMeasure.html#tymethod.infinite\" class=\"fn\">infinite</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FloatMeasure","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/matrix_graph.rs.html#180\">source</a><a href=\"#impl-Zero-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"petgraph/matrix_graph/trait.Zero.html\" title=\"trait petgraph::matrix_graph::Zero\">Zero</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/matrix_graph.rs.html#180\">source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/matrix_graph/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Return the singleton object which can be used as a sentinel value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/matrix_graph.rs.html#180\">source</a><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/matrix_graph/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Return true if <code>self</code> is equal to the sentinel value.</div></details></div></details>","Zero","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BoundedMeasure-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/algo/mod.rs.html#903\">source</a><a href=\"#impl-BoundedMeasure-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"petgraph/algo/trait.BoundedMeasure.html\" title=\"trait petgraph::algo::BoundedMeasure\">BoundedMeasure</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/algo/mod.rs.html#903\">source</a><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/algo/trait.BoundedMeasure.html#tymethod.min\" class=\"fn\">min</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/algo/mod.rs.html#903\">source</a><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/algo/trait.BoundedMeasure.html#tymethod.max\" class=\"fn\">max</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.overflowing_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/algo/mod.rs.html#903\">source</a><a href=\"#method.overflowing_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/algo/trait.BoundedMeasure.html#tymethod.overflowing_add\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></div></details>","BoundedMeasure","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/tracing_core/field.rs.html#517-526\">source</a><a href=\"#impl-Value-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"tracing_core/field/trait.Value.html\" title=\"trait tracing_core::field::Value\">Value</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_core/field.rs.html#517-526\">source</a><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_core/field/trait.Value.html#tymethod.record\" class=\"fn\">record</a>(&amp;self, key: &amp;<a class=\"struct\" href=\"tracing_core/field/struct.Field.html\" title=\"struct tracing_core::field::Field\">Field</a>, visitor: &amp;mut dyn <a class=\"trait\" href=\"tracing_core/field/trait.Visit.html\" title=\"trait tracing_core::field::Visit\">Visit</a>)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeUuid-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/type_uuid_impl.rs.html#38\">source</a><a href=\"#impl-TypeUuid-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.TYPE_UUID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/type_uuid_impl.rs.html#38\">source</a><a href=\"#associatedconstant.TYPE_UUID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"bevy_reflect/type_uuid/trait.TypeUuid.html#associatedconstant.TYPE_UUID\" class=\"constant\">TYPE_UUID</a>: <a class=\"struct\" href=\"uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a> = _</h4></section></div></details>","TypeUuid","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypePath-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#impl-TypePath-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy_reflect/type_path/trait.TypePath.html\" title=\"trait bevy_reflect::type_path::TypePath\">TypePath</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_path\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.type_path\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/type_path/trait.TypePath.html#tymethod.type_path\" class=\"fn\">type_path</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Returns the fully qualified path of the underlying type. <a href=\"bevy_reflect/type_path/trait.TypePath.html#tymethod.type_path\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.short_type_path\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.short_type_path\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/type_path/trait.TypePath.html#tymethod.short_type_path\" class=\"fn\">short_type_path</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Returns a short, pretty-print enabled path to the type. <a href=\"bevy_reflect/type_path/trait.TypePath.html#tymethod.short_type_path\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_ident\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.type_ident\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/type_path/trait.TypePath.html#method.type_ident\" class=\"fn\">type_ident</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns the name of the type, or <a href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it is <a href=\"bevy_reflect/type_path/trait.TypePath.html#anonymity\" title=\"trait bevy_reflect::type_path::TypePath\">anonymous</a>. <a href=\"bevy_reflect/type_path/trait.TypePath.html#method.type_ident\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.crate_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.crate_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/type_path/trait.TypePath.html#method.crate_name\" class=\"fn\">crate_name</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns the name of the crate the type is in, or <a href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it is <a href=\"bevy_reflect/type_path/trait.TypePath.html#anonymity\" title=\"trait bevy_reflect::type_path::TypePath\">anonymous</a>. <a href=\"bevy_reflect/type_path/trait.TypePath.html#method.crate_name\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.module_path\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.module_path\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/type_path/trait.TypePath.html#method.module_path\" class=\"fn\">module_path</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns the path to the module the type is in, or <a href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it is <a href=\"bevy_reflect/type_path/trait.TypePath.html#anonymity\" title=\"trait bevy_reflect::type_path::TypePath\">anonymous</a>. <a href=\"bevy_reflect/type_path/trait.TypePath.html#method.module_path\">Read more</a></div></details></div></details>","TypePath","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromReflect-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#impl-FromReflect-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy_reflect/from_reflect/trait.FromReflect.html\" title=\"trait bevy_reflect::from_reflect::FromReflect\">FromReflect</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_reflect\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.from_reflect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/from_reflect/trait.FromReflect.html#tymethod.from_reflect\" class=\"fn\">from_reflect</a>(reflect: &amp;(dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a> + 'static)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Constructs a concrete instance of <code>Self</code> from a reflected value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_from_reflect\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/from_reflect.rs.html#38\">source</a><a href=\"#method.take_from_reflect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/from_reflect/trait.FromReflect.html#method.take_from_reflect\" class=\"fn\">take_from_reflect</a>(\n    reflect: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to downcast the given value to <code>Self</code> using,\nconstructing the value using <a href=\"bevy_reflect/from_reflect/trait.FromReflect.html#tymethod.from_reflect\" title=\"associated function bevy_reflect::from_reflect::FromReflect::from_reflect::from_reflect\"><code>from_reflect</code></a> if that fails. <a href=\"bevy_reflect/from_reflect/trait.FromReflect.html#method.take_from_reflect\">Read more</a></div></details></div></details>","FromReflect","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Typed-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#impl-Typed-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy_reflect/type_info/trait.Typed.html\" title=\"trait bevy_reflect::type_info::Typed\">Typed</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/type_info/trait.Typed.html#tymethod.type_info\" class=\"fn\">type_info</a>() -&gt; &amp;'static <a class=\"enum\" href=\"bevy_reflect/type_info/enum.TypeInfo.html\" title=\"enum bevy_reflect::type_info::TypeInfo\">TypeInfo</a></h4></section></summary><div class='docblock'>Returns the compile-time <a href=\"bevy_reflect/type_info/enum.TypeInfo.html\" title=\"enum bevy_reflect::type_info::TypeInfo\">info</a> for the underlying type.</div></details></div></details>","Typed","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Reflect-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#impl-Reflect-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_represented_type_info\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.get_represented_type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.get_represented_type_info\" class=\"fn\">get_represented_type_info</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"enum\" href=\"bevy_reflect/type_info/enum.TypeInfo.html\" title=\"enum bevy_reflect::type_info::TypeInfo\">TypeInfo</a>&gt;</h4></section></summary><div class='docblock'>Returns the <a href=\"bevy_reflect/type_info/enum.TypeInfo.html\" title=\"enum bevy_reflect::type_info::TypeInfo\"><code>TypeInfo</code></a> of the type <em>represented</em> by this value. <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.get_represented_type_info\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_any\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.into_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.into_any\" class=\"fn\">into_any</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a>&gt;</h4></section></summary><div class='docblock'>Returns the value as a <a href=\"https://doc.rust-lang.org/1.75.0/core/any/trait.Any.html\" title=\"trait core::any::Any\"><code>Box&lt;dyn Any&gt;</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.as_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + 'static)</h4></section></summary><div class='docblock'>Returns the value as a <a href=\"https://doc.rust-lang.org/1.75.0/core/any/trait.Any.html\" title=\"trait core::any::Any\"><code>&amp;dyn Any</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.as_any_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.as_any_mut\" class=\"fn\">as_any_mut</a>(&amp;mut self) -&gt; &amp;mut (dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + 'static)</h4></section></summary><div class='docblock'>Returns the value as a <a href=\"https://doc.rust-lang.org/1.75.0/core/any/trait.Any.html\" title=\"trait core::any::Any\"><code>&amp;mut dyn Any</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_reflect\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.into_reflect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.into_reflect\" class=\"fn\">into_reflect</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a>&gt;</h4></section></summary><div class='docblock'>Casts this type to a boxed reflected value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_reflect\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.as_reflect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.as_reflect\" class=\"fn\">as_reflect</a>(&amp;self) -&gt; &amp;(dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a> + 'static)</h4></section></summary><div class='docblock'>Casts this type to a reflected value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_reflect_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.as_reflect_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.as_reflect_mut\" class=\"fn\">as_reflect_mut</a>(&amp;mut self) -&gt; &amp;mut (dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a> + 'static)</h4></section></summary><div class='docblock'>Casts this type to a mutable reflected value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.clone_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.clone_value\" class=\"fn\">clone_value</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a>&gt;</h4></section></summary><div class='docblock'>Clones the value as a <code>Reflect</code> trait object. <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.clone_value\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.apply\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.apply\" class=\"fn\">apply</a>(&amp;mut self, value: &amp;(dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a> + 'static))</h4></section></summary><div class='docblock'>Applies a reflected value to this value. <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.apply\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.set\" class=\"fn\">set</a>(&amp;mut self, value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a>&gt;&gt;</h4></section></summary><div class='docblock'>Performs a type-checked assignment of a reflected value to this value. <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.set\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reflect_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.reflect_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.reflect_ref\" class=\"fn\">reflect_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"bevy_reflect/reflect/enum.ReflectRef.html\" title=\"enum bevy_reflect::reflect::ReflectRef\">ReflectRef</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Returns an enumeration of “kinds” of type. <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.reflect_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reflect_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.reflect_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.reflect_mut\" class=\"fn\">reflect_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"bevy_reflect/reflect/enum.ReflectMut.html\" title=\"enum bevy_reflect::reflect::ReflectMut\">ReflectMut</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Returns a mutable enumeration of “kinds” of type. <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.reflect_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reflect_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.reflect_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.reflect_owned\" class=\"fn\">reflect_owned</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt;) -&gt; <a class=\"enum\" href=\"bevy_reflect/reflect/enum.ReflectOwned.html\" title=\"enum bevy_reflect::reflect::ReflectOwned\">ReflectOwned</a></h4></section></summary><div class='docblock'>Returns an owned enumeration of “kinds” of type. <a href=\"bevy_reflect/reflect/trait.Reflect.html#tymethod.reflect_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reflect_partial_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.reflect_partial_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.reflect_partial_eq\" class=\"fn\">reflect_partial_eq</a>(&amp;self, value: &amp;(dyn <a class=\"trait\" href=\"bevy_reflect/reflect/trait.Reflect.html\" title=\"trait bevy_reflect::reflect::Reflect\">Reflect</a> + 'static)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Returns a “partial equality” comparison result. <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.reflect_partial_eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.debug\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.debug\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.debug\" class=\"fn\">debug</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Debug formatter for the value. <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.debug\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/reflect.rs.html#88\">source</a><a href=\"#method.type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.type_name\" class=\"fn\">type_name</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.12.0: view the method documentation to find alternatives to this method.</span></div></span><div class='docblock'>Returns the type path of the underlying type. <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.type_name\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reflect_hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/reflect.rs.html#204\">source</a><a href=\"#method.reflect_hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.reflect_hash\" class=\"fn\">reflect_hash</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class='docblock'>Returns a hash of the value (which includes the type). <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.reflect_hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serializable\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/reflect.rs.html#238\">source</a><a href=\"#method.serializable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.serializable\" class=\"fn\">serializable</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"bevy_reflect/serde/ser/enum.Serializable.html\" title=\"enum bevy_reflect::serde::ser::Serializable\">Serializable</a>&lt;'_&gt;&gt;</h4></section></summary><div class='docblock'>Returns a serializable version of the value. <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.serializable\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_dynamic\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/reflect.rs.html#254\">source</a><a href=\"#method.is_dynamic\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.is_dynamic\" class=\"fn\">is_dynamic</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Indicates whether or not this type is a <em>dynamic</em> type. <a href=\"bevy_reflect/reflect/trait.Reflect.html#method.is_dynamic\">Read more</a></div></details></div></details>","Reflect","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetTypeRegistration-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#impl-GetTypeRegistration-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy_reflect/type_registry/trait.GetTypeRegistration.html\" title=\"trait bevy_reflect::type_registry::GetTypeRegistration\">GetTypeRegistration</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.get_type_registration\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_reflect/impls/std.rs.html#81\">source</a><a href=\"#method.get_type_registration\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_reflect/type_registry/trait.GetTypeRegistration.html#tymethod.get_type_registration\" class=\"fn\">get_type_registration</a>() -&gt; <a class=\"struct\" href=\"bevy_reflect/type_registry/struct.TypeRegistration.html\" title=\"struct bevy_reflect::type_registry::TypeRegistration\">TypeRegistration</a></h4></section></div></details>","GetTypeRegistration","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CAffine%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/accesskit/geometry.rs.html#205\">source</a><a href=\"#impl-Mul%3CAffine%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"accesskit/geometry/struct.Affine.html\" title=\"struct accesskit::geometry::Affine\">Affine</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"accesskit/geometry/struct.Affine.html\" title=\"struct accesskit::geometry::Affine\">Affine</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/accesskit/geometry.rs.html#209\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"accesskit/geometry/struct.Affine.html\" title=\"struct accesskit::geometry::Affine\">Affine</a>) -&gt; <a class=\"struct\" href=\"accesskit/geometry/struct.Affine.html\" title=\"struct accesskit::geometry::Affine\">Affine</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Affine>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CVec2%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/accesskit/geometry.rs.html#841\">source</a><a href=\"#impl-Mul%3CVec2%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"accesskit/geometry/struct.Vec2.html\" title=\"struct accesskit::geometry::Vec2\">Vec2</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"accesskit/geometry/struct.Vec2.html\" title=\"struct accesskit::geometry::Vec2\">Vec2</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/accesskit/geometry.rs.html#845\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"accesskit/geometry/struct.Vec2.html\" title=\"struct accesskit::geometry::Vec2\">Vec2</a>) -&gt; <a class=\"struct\" href=\"accesskit/geometry/struct.Vec2.html\" title=\"struct accesskit::geometry::Vec2\">Vec2</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Vec2>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CSize%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/accesskit/geometry.rs.html#626\">source</a><a href=\"#impl-Mul%3CSize%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"accesskit/geometry/struct.Size.html\" title=\"struct accesskit::geometry::Size\">Size</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"accesskit/geometry/struct.Size.html\" title=\"struct accesskit::geometry::Size\">Size</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/accesskit/geometry.rs.html#630\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"accesskit/geometry/struct.Size.html\" title=\"struct accesskit::geometry::Size\">Size</a>) -&gt; <a class=\"struct\" href=\"accesskit/geometry/struct.Size.html\" title=\"struct accesskit::geometry::Size\">Size</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Size>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Primitive-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/image/traits.rs.html#68\">source</a><a href=\"#impl-Primitive-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"image/traits/trait.Primitive.html\" title=\"trait image::traits::Primitive\">Primitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT_MAX_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/image/traits.rs.html#68\">source</a><a href=\"#associatedconstant.DEFAULT_MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"image/traits/trait.Primitive.html#associatedconstant.DEFAULT_MAX_VALUE\" class=\"constant\">DEFAULT_MAX_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = 1f64</h4></section></summary><div class='docblock'>The maximum value for this type of primitive within the context of color.\nFor floats, the maximum is <code>1.0</code>, whereas the integer types inherit their usual maximum values.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.DEFAULT_MIN_VALUE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/image/traits.rs.html#68\">source</a><a href=\"#associatedconstant.DEFAULT_MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"image/traits/trait.Primitive.html#associatedconstant.DEFAULT_MIN_VALUE\" class=\"constant\">DEFAULT_MIN_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = 0f64</h4></section></summary><div class='docblock'>The minimum value for this type of primitive within the context of color.\nFor floats, the minimum is <code>0.0</code>, whereas the integer types inherit their usual minimum values.</div></details></div></details>","Primitive","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SizedSample-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpal/samples_formats.rs.html#165\">source</a><a href=\"#impl-SizedSample-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cpal/samples_formats/trait.SizedSample.html\" title=\"trait cpal::samples_formats::SizedSample\">SizedSample</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.FORMAT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/cpal/samples_formats.rs.html#166\">source</a><a href=\"#associatedconstant.FORMAT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"cpal/samples_formats/trait.SizedSample.html#associatedconstant.FORMAT\" class=\"constant\">FORMAT</a>: <a class=\"enum\" href=\"cpal/samples_formats/enum.SampleFormat.html\" title=\"enum cpal::samples_formats::SampleFormat\">SampleFormat</a> = SampleFormat::F64</h4></section></div></details>","SizedSample","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IoFormat-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/alsa/pcm.rs.html#717\">source</a><a href=\"#impl-IoFormat-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"alsa/pcm/trait.IoFormat.html\" title=\"trait alsa::pcm::IoFormat\">IoFormat</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.FORMAT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/alsa/pcm.rs.html#719\">source</a><a href=\"#associatedconstant.FORMAT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"alsa/pcm/trait.IoFormat.html#associatedconstant.FORMAT\" class=\"constant\">FORMAT</a>: <a class=\"enum\" href=\"alsa/pcm/enum.Format.html\" title=\"enum alsa::pcm::Format\">Format</a> = Format::Float64LE</h4></section></div></details>","IoFormat","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CpalSample-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#261-276\">source</a><a href=\"#impl-CpalSample-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/trait.Sample.html\" title=\"trait dasp_sample::Sample\">Sample</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Signed\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Signed\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"dasp_sample/trait.Sample.html#associatedtype.Signed\" class=\"associatedtype\">Signed</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>When summing two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed format. This associated <code>Addition</code> type represents the format to\nwhich <code>Self</code> should be converted for optimal <code>Addition</code> performance. <a href=\"dasp_sample/trait.Sample.html#associatedtype.Signed\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Float\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Float\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"dasp_sample/trait.Sample.html#associatedtype.Float\" class=\"associatedtype\">Float</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>When multiplying two samples of a signal together, it is necessary for both samples to be\nrepresented in some signed, floating-point format. This associated <code>Multiplication</code> type\nrepresents the format to which <code>Self</code> should be converted for optimal <code>Multiplication</code>\nperformance. <a href=\"dasp_sample/trait.Sample.html#associatedtype.Float\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.EQUILIBRIUM\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#261-276\">source</a><a href=\"#associatedconstant.EQUILIBRIUM\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"dasp_sample/trait.Sample.html#associatedconstant.EQUILIBRIUM\" class=\"constant\">EQUILIBRIUM</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = 0f64</h4></section></summary><div class='docblock'>The equilibrium value for the wave that this <code>Sample</code> type represents. This is normally the\nvalue that is equal distance from both the min and max ranges of the sample. <a href=\"dasp_sample/trait.Sample.html#associatedconstant.EQUILIBRIUM\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.IDENTITY\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#107\">source</a><a href=\"#associatedconstant.IDENTITY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"dasp_sample/trait.Sample.html#associatedconstant.IDENTITY\" class=\"constant\">IDENTITY</a>: Self::<a class=\"associatedtype\" href=\"dasp_sample/trait.Sample.html#associatedtype.Float\" title=\"type dasp_sample::Sample::Float\">Float</a> = &lt;Self::Float as FloatSample&gt;::IDENTITY</h4></section></summary><div class='docblock'>The multiplicative identity of the signal. <a href=\"dasp_sample/trait.Sample.html#associatedconstant.IDENTITY\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sample\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#125-127\">source</a><a href=\"#method.to_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/trait.Sample.html#method.to_sample\" class=\"fn\">to_sample</a>&lt;S&gt;(self) -&gt; S<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"dasp_sample/conv/trait.ToSample.html\" title=\"trait dasp_sample::conv::ToSample\">ToSample</a>&lt;S&gt;,</span></h4></section></summary><div class='docblock'>Convert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>. <a href=\"dasp_sample/trait.Sample.html#method.to_sample\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sample\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#149-151\">source</a><a href=\"#method.from_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/trait.Sample.html#method.from_sample\" class=\"fn\">from_sample</a>&lt;S&gt;(s: S) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;S&gt;,</span></h4></section></summary><div class='docblock'>Create a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>. <a href=\"dasp_sample/trait.Sample.html#method.from_sample\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_signed_sample\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#170\">source</a><a href=\"#method.to_signed_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/trait.Sample.html#method.to_signed_sample\" class=\"fn\">to_signed_sample</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"dasp_sample/trait.Sample.html#associatedtype.Signed\" title=\"type dasp_sample::Sample::Signed\">Signed</a></h4></section></summary><div class='docblock'>Converts <code>self</code> to the equivalent <code>Sample</code> in the associated <code>Signed</code> format. <a href=\"dasp_sample/trait.Sample.html#method.to_signed_sample\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_float_sample\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#188\">source</a><a href=\"#method.to_float_sample\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/trait.Sample.html#method.to_float_sample\" class=\"fn\">to_float_sample</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"dasp_sample/trait.Sample.html#associatedtype.Float\" title=\"type dasp_sample::Sample::Float\">Float</a></h4></section></summary><div class='docblock'>Converts <code>self</code> to the equivalent <code>Sample</code> in the associated <code>Float</code> format. <a href=\"dasp_sample/trait.Sample.html#method.to_float_sample\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_amp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#209\">source</a><a href=\"#method.add_amp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/trait.Sample.html#method.add_amp\" class=\"fn\">add_amp</a>(self, amp: Self::<a class=\"associatedtype\" href=\"dasp_sample/trait.Sample.html#associatedtype.Signed\" title=\"type dasp_sample::Sample::Signed\">Signed</a>) -&gt; Self</h4></section></summary><div class='docblock'>Adds (or “offsets”) the amplitude of the <code>Sample</code> by the given signed amplitude. <a href=\"dasp_sample/trait.Sample.html#method.add_amp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_amp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#237\">source</a><a href=\"#method.mul_amp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/trait.Sample.html#method.mul_amp\" class=\"fn\">mul_amp</a>(self, amp: Self::<a class=\"associatedtype\" href=\"dasp_sample/trait.Sample.html#associatedtype.Float\" title=\"type dasp_sample::Sample::Float\">Float</a>) -&gt; Self</h4></section></summary><div class='docblock'>Multiplies (or “scales”) the amplitude of the <code>Sample</code> by the given float amplitude. <a href=\"dasp_sample/trait.Sample.html#method.mul_amp\">Read more</a></div></details></div></details>","Sample","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloatSample-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#318\">source</a><a href=\"#impl-FloatSample-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/trait.FloatSample.html\" title=\"trait dasp_sample::FloatSample\">FloatSample</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.IDENTITY\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#319\">source</a><a href=\"#associatedconstant.IDENTITY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"dasp_sample/trait.FloatSample.html#associatedconstant.IDENTITY\" class=\"constant\">IDENTITY</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = 1f64</h4></section></summary><div class='docblock'>Represents the multiplicative identity of the floating point signal.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sample_sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#321\">source</a><a href=\"#method.sample_sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/trait.FloatSample.html#tymethod.sample_sqrt\" class=\"fn\">sample_sqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Calculate the square root of <code>Self</code>.</div></details></div></details>","FloatSample","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-SignedSample-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/lib.rs.html#290\">source</a><a href=\"#impl-SignedSample-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/trait.SignedSample.html\" title=\"trait dasp_sample::SignedSample\">SignedSample</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","SignedSample","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Cu64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<u64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Ci16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<i16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Ci32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<i32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Ci64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<i64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CI24%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3CI24%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"struct\" href=\"dasp_sample/types/i24/struct.I24.html\" title=\"struct dasp_sample::types::i24::I24\">I24</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"struct\" href=\"dasp_sample/types/i24/struct.I24.html\" title=\"struct dasp_sample::types::i24::I24\">I24</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<I24>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cf32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Cf32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<f32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Cu8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<u8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CI48%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3CI48%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"struct\" href=\"dasp_sample/types/i48/struct.I48.html\" title=\"struct dasp_sample::types::i48::I48\">I48</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"struct\" href=\"dasp_sample/types/i48/struct.I48.html\" title=\"struct dasp_sample::types::i48::I48\">I48</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<I48>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CU48%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3CU48%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"struct\" href=\"dasp_sample/types/u48/struct.U48.html\" title=\"struct dasp_sample::types::u48::U48\">U48</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"struct\" href=\"dasp_sample/types/u48/struct.U48.html\" title=\"struct dasp_sample::types::u48::U48\">U48</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<U48>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Ci8%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Ci8%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<i8>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu16%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Cu16%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<u16>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3Cu32%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3Cu32%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<u32>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSample%3CU24%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#impl-FromSample%3CU24%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"dasp_sample/conv/trait.FromSample.html\" title=\"trait dasp_sample::conv::FromSample\">FromSample</a>&lt;<a class=\"struct\" href=\"dasp_sample/types/u24/struct.U24.html\" title=\"struct dasp_sample::types::u24::U24\">U24</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_sample_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dasp_sample/conv.rs.html#673-677\">source</a><a href=\"#method.from_sample_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dasp_sample/conv/trait.FromSample.html#tymethod.from_sample_\" class=\"fn\">from_sample_</a>(s: <a class=\"struct\" href=\"dasp_sample/types/u24/struct.U24.html\" title=\"struct dasp_sample::types::u24::U24\">U24</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","FromSample<U24>","bevy_xpbd_2d::math::double::Scalar"],["<section id=\"impl-Key-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/radsort/lib.rs.html#340-345\">source</a><a href=\"#impl-Key-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radsort/trait.Key.html\" title=\"trait radsort::Key\">Key</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section>","Key","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Round-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/num.rs.html#128\">source</a><a href=\"#impl-Round-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"euclid/num/trait.Round.html\" title=\"trait euclid::num::Round\">Round</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/num.rs.html#128\">source</a><a href=\"#method.round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/num/trait.Round.html#tymethod.round\" class=\"fn\">round</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Rounds to the nearest integer value. <a href=\"euclid/num/trait.Round.html#tymethod.round\">Read more</a></div></details></div></details>","Round","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApproxEq%3Cf64%3E-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/approxeq.rs.html#42\">source</a><a href=\"#impl-ApproxEq%3Cf64%3E-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"euclid/approxeq/trait.ApproxEq.html\" title=\"trait euclid::approxeq::ApproxEq\">ApproxEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_epsilon\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/approxeq.rs.html#42\">source</a><a href=\"#method.approx_epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/approxeq/trait.ApproxEq.html#tymethod.approx_epsilon\" class=\"fn\">approx_epsilon</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Default epsilon value</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_eq_eps\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/approxeq.rs.html#42\">source</a><a href=\"#method.approx_eq_eps\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/approxeq/trait.ApproxEq.html#tymethod.approx_eq_eps\" class=\"fn\">approx_eq_eps</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, approx_epsilon: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> is this object is approximately equal to the other one, using\na provided epsilon value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/approxeq.rs.html#21\">source</a><a href=\"#method.approx_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/approxeq/trait.ApproxEq.html#method.approx_eq\" class=\"fn\">approx_eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> is this object is approximately equal to the other one, using\nthe <code>approx_epsilon()</code> epsilon value.</div></details></div></details>","ApproxEq<f64>","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ceil-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/num.rs.html#128\">source</a><a href=\"#impl-Ceil-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"euclid/num/trait.Ceil.html\" title=\"trait euclid::num::Ceil\">Ceil</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/num.rs.html#128\">source</a><a href=\"#method.ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/num/trait.Ceil.html#tymethod.ceil\" class=\"fn\">ceil</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Rounds to the smallest integer equal or greater than the original value. <a href=\"euclid/num/trait.Ceil.html#tymethod.ceil\">Read more</a></div></details></div></details>","Ceil","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Trig-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/trig.rs.html#80\">source</a><a href=\"#impl-Trig-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"euclid/trig/trait.Trig.html\" title=\"trait euclid::trig::Trig\">Trig</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fast_atan2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/trig.rs.html#80\">source</a><a href=\"#method.fast_atan2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/trig/trait.Trig.html#tymethod.fast_atan2\" class=\"fn\">fast_atan2</a>(y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>A slightly faster approximation of <code>atan2</code>.</p>\n<p>Note that it does not deal with the case where both x and y are 0.</p>\n</div></details><section id=\"method.sin\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/trig.rs.html#80\">source</a><a href=\"#method.sin\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/trig/trait.Trig.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.cos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/trig.rs.html#80\">source</a><a href=\"#method.cos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/trig/trait.Trig.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.tan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/trig.rs.html#80\">source</a><a href=\"#method.tan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/trig/trait.Trig.html#tymethod.tan\" class=\"fn\">tan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.degrees_to_radians\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/trig.rs.html#80\">source</a><a href=\"#method.degrees_to_radians\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/trig/trait.Trig.html#tymethod.degrees_to_radians\" class=\"fn\">degrees_to_radians</a>(deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.radians_to_degrees\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/trig.rs.html#80\">source</a><a href=\"#method.radians_to_degrees\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/trig/trait.Trig.html#tymethod.radians_to_degrees\" class=\"fn\">radians_to_degrees</a>(rad: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></div></details>","Trig","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Floor-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/num.rs.html#128\">source</a><a href=\"#impl-Floor-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"euclid/num/trait.Floor.html\" title=\"trait euclid::num::Floor\">Floor</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/num.rs.html#128\">source</a><a href=\"#method.floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/num/trait.Floor.html#tymethod.floor\" class=\"fn\">floor</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Rounds to the biggest integer equal or lower than the original value. <a href=\"euclid/num/trait.Floor.html#tymethod.floor\">Read more</a></div></details></div></details>","Floor","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#31\">source</a><a href=\"#impl-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#49\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.floor\" class=\"fn\">floor</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the largest integer less than or equal to <code>self</code>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.7_f64</span>;\n<span class=\"kw\">let </span>g = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>h = -<span class=\"number\">3.7_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.floor(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.floor(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.floor(), -<span class=\"number\">4.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#69\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.ceil\" class=\"fn\">ceil</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest integer greater than or equal to <code>self</code>.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.01_f64</span>;\n<span class=\"kw\">let </span>g = <span class=\"number\">4.0_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.ceil(), <span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.ceil(), <span class=\"number\">4.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#95\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.round\" class=\"fn\">round</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the nearest integer to <code>self</code>. If a value is half-way between two\nintegers, round away from <code>0.0</code>.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>g = -<span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>h = -<span class=\"number\">3.7_f64</span>;\n<span class=\"kw\">let </span>i = <span class=\"number\">3.5_f64</span>;\n<span class=\"kw\">let </span>j = <span class=\"number\">4.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.round(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.round(), -<span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.round(), -<span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(i.round(), <span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(j.round(), <span class=\"number\">5.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_ties_even\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#121\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.round_ties_even\" class=\"fn\">round_ties_even</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>round_ties_even</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the nearest integer to a number. Rounds half-way cases to the number\nwith an even least significant digit.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_ties_even)]\n\n</span><span class=\"kw\">let </span>f = <span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>g = -<span class=\"number\">3.3_f64</span>;\n<span class=\"kw\">let </span>h = <span class=\"number\">3.5_f64</span>;\n<span class=\"kw\">let </span>i = <span class=\"number\">4.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.round_ties_even(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.round_ties_even(), -<span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.round_ties_even(), <span class=\"number\">4.0</span>);\n<span class=\"macro\">assert_eq!</span>(i.round_ties_even(), <span class=\"number\">4.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trunc\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#144\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.trunc\" class=\"fn\">trunc</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the integer part of <code>self</code>.\nThis means that non-integer numbers are always truncated towards zero.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.7_f64</span>;\n<span class=\"kw\">let </span>g = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>h = -<span class=\"number\">3.7_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.trunc(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(g.trunc(), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>(h.trunc(), -<span class=\"number\">3.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fract\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#165\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the fractional part of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">3.6_f64</span>;\n<span class=\"kw\">let </span>y = -<span class=\"number\">3.6_f64</span>;\n<span class=\"kw\">let </span>abs_difference_x = (x.fract() - <span class=\"number\">0.6</span>).abs();\n<span class=\"kw\">let </span>abs_difference_y = (y.fract() - (-<span class=\"number\">0.6</span>)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_x &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_y &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#189\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">3.5_f64</span>;\n<span class=\"kw\">let </span>y = -<span class=\"number\">3.5_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference_x = (x.abs() - x).abs();\n<span class=\"kw\">let </span>abs_difference_y = (y.abs() - (-y)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_x &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_y &lt; <span class=\"number\">1e-10</span>);\n\n<span class=\"macro\">assert!</span>(f64::NAN.abs().is_nan());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#213\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number that represents the sign of <code>self</code>.</p>\n<ul>\n<li><code>1.0</code> if the number is positive, <code>+0.0</code> or <code>INFINITY</code></li>\n<li><code>-1.0</code> if the number is negative, <code>-0.0</code> or <code>NEG_INFINITY</code></li>\n<li>NaN if the number is NaN</li>\n</ul>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.signum(), <span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(f64::NEG_INFINITY.signum(), -<span class=\"number\">1.0</span>);\n\n<span class=\"macro\">assert!</span>(f64::NAN.signum().is_nan());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copysign\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#242\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number composed of the magnitude of <code>self</code> and the sign of\n<code>sign</code>.</p>\n<p>Equal to <code>self</code> if the sign of <code>self</code> and <code>sign</code> are the same, otherwise\nequal to <code>-self</code>. If <code>self</code> is a NaN, then a NaN with the sign bit of\n<code>sign</code> is returned. Note, however, that conserving the sign bit on NaN\nacross arithmetical operations is not generally guaranteed.\nSee <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\" title=\"primitive f32\">explanation of NaN as a special value</a> for more info.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">3.5_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(f.copysign(<span class=\"number\">0.42</span>), <span class=\"number\">3.5_f64</span>);\n<span class=\"macro\">assert_eq!</span>(f.copysign(-<span class=\"number\">0.42</span>), -<span class=\"number\">3.5_f64</span>);\n<span class=\"macro\">assert_eq!</span>((-f).copysign(<span class=\"number\">0.42</span>), <span class=\"number\">3.5_f64</span>);\n<span class=\"macro\">assert_eq!</span>((-f).copysign(-<span class=\"number\">0.42</span>), -<span class=\"number\">3.5_f64</span>);\n\n<span class=\"macro\">assert!</span>(f64::NAN.copysign(<span class=\"number\">1.0</span>).is_nan());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#270\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.mul_add\" class=\"fn\">mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Fused multiply-add. Computes <code>(self * a) + b</code> with only one rounding\nerror, yielding a more accurate result than an unfused multiply-add.</p>\n<p>Using <code>mul_add</code> <em>may</em> be more performant than an unfused multiply-add if\nthe target architecture has a dedicated <code>fma</code> CPU instruction. However,\nthis is not always true, and will be heavily dependant on designing\nalgorithms with specific target hardware in mind.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>m = <span class=\"number\">10.0_f64</span>;\n<span class=\"kw\">let </span>x = <span class=\"number\">4.0_f64</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">60.0_f64</span>;\n\n<span class=\"comment\">// 100.0\n</span><span class=\"kw\">let </span>abs_difference = (m.mul_add(x, b) - ((m * x) + b)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#295\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Calculates Euclidean division, the matching method for <code>rem_euclid</code>.</p>\n<p>This computes the integer <code>n</code> such that\n<code>self = n * rhs + self.rem_euclid(rhs)</code>.\nIn other words, the result is <code>self / rhs</code> rounded to the integer <code>n</code>\nsuch that <code>self &gt;= n * rhs</code>.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: f64 = <span class=\"number\">7.0</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">4.0</span>;\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1.0</span>); <span class=\"comment\">// 7.0 &gt; 4.0 * 1.0\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2.0</span>); <span class=\"comment\">// -7.0 &gt;= 4.0 * -2.0\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1.0</span>); <span class=\"comment\">// 7.0 &gt;= -4.0 * -1.0\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2.0</span>); <span class=\"comment\">// -7.0 &gt;= -4.0 * 2.0</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#331\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>In particular, the return value <code>r</code> satisfies <code>0.0 &lt;= r &lt; rhs.abs()</code> in\nmost cases. However, due to a floating point round-off error it can\nresult in <code>r == rhs.abs()</code>, violating the mathematical definition, if\n<code>self</code> is much smaller than <code>rhs.abs()</code> in magnitude and <code>self &lt; 0.0</code>.\nThis result is not an element of the function’s codomain, but it is the\nclosest floating point number in the real numbers and thus fulfills the\nproperty <code>self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)</code>\napproximately.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: f64 = <span class=\"number\">7.0</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">4.0</span>;\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3.0</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1.0</span>);\n<span class=\"comment\">// limitation due to round-off error\n</span><span class=\"macro\">assert!</span>((-f64::EPSILON).rem_euclid(<span class=\"number\">3.0</span>) != <span class=\"number\">0.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.powi\" class=\"fn\">powi</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to an integer power.</p>\n<p>Using this function is generally faster than using <code>powf</code>.\nIt might have a different sequence of rounding operations than <code>powf</code>,\nso the results are not guaranteed to agree.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0_f64</span>;\n<span class=\"kw\">let </span>abs_difference = (x.powi(<span class=\"number\">2</span>) - (x * x)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powf\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#372\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.powf\" class=\"fn\">powf</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to a floating point power.</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0_f64</span>;\n<span class=\"kw\">let </span>abs_difference = (x.powf(<span class=\"number\">2.0</span>) - (x * x)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#397\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the square root of a number.</p>\n<p>Returns NaN if <code>self</code> is a negative number other than <code>-0.0</code>.</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>positive = <span class=\"number\">4.0_f64</span>;\n<span class=\"kw\">let </span>negative = -<span class=\"number\">4.0_f64</span>;\n<span class=\"kw\">let </span>negative_zero = -<span class=\"number\">0.0_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference = (positive.sqrt() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(negative.sqrt().is_nan());\n<span class=\"macro\">assert!</span>(negative_zero.sqrt() == negative_zero);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#419\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>e^(self)</code>, (the exponential function).</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = <span class=\"number\">1.0_f64</span>;\n<span class=\"comment\">// e^1\n</span><span class=\"kw\">let </span>e = one.exp();\n\n<span class=\"comment\">// ln(e) - 1 == 0\n</span><span class=\"kw\">let </span>abs_difference = (e.ln() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>2^(self)</code>.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">2.0_f64</span>;\n\n<span class=\"comment\">// 2^2 - 4 == 0\n</span><span class=\"kw\">let </span>abs_difference = (f.exp2() - <span class=\"number\">4.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#461\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the natural logarithm of the number.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>one = <span class=\"number\">1.0_f64</span>;\n<span class=\"comment\">// e^1\n</span><span class=\"kw\">let </span>e = one.exp();\n\n<span class=\"comment\">// ln(e) - 1 == 0\n</span><span class=\"kw\">let </span>abs_difference = (e.ln() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#485\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.log\" class=\"fn\">log</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base.</p>\n<p>The result might not be correctly rounded owing to implementation details;\n<code>self.log2()</code> can produce more accurate results for base 2, and\n<code>self.log10()</code> can produce more accurate results for base 10.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>twenty_five = <span class=\"number\">25.0_f64</span>;\n\n<span class=\"comment\">// log5(25) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (twenty_five.log(<span class=\"number\">5.0</span>) - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#505\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four = <span class=\"number\">4.0_f64</span>;\n\n<span class=\"comment\">// log2(4) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (four.log2() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#525\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>hundred = <span class=\"number\">100.0_f64</span>;\n\n<span class=\"comment\">// log10(100) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (hundred.log10() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#560\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.abs_sub\" class=\"fn\">abs_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.10.0: you probably meant <code>(self - other).abs()</code>: this operation is <code>(self - other).max(0.0)</code> except that <code>abs_sub</code> also propagates NaNs (also known as <code>fdim</code> in C). If you truly need the positive difference, consider using that expression or the C function <code>fdim</code>, depending on how you wish to handle NaN (please consider filing an issue describing your use-case too).</span></div></span></summary><div class=\"docblock\"><p>The positive difference of two numbers.</p>\n<ul>\n<li>If <code>self &lt;= other</code>: <code>0.0</code></li>\n<li>Else: <code>self - other</code></li>\n</ul>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>y = -<span class=\"number\">3.0_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference_x = (x.abs_sub(<span class=\"number\">1.0</span>) - <span class=\"number\">2.0</span>).abs();\n<span class=\"kw\">let </span>abs_difference_y = (y.abs_sub(<span class=\"number\">1.0</span>) - <span class=\"number\">0.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_x &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_y &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cbrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#580\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.cbrt\" class=\"fn\">cbrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the cube root of a number.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">8.0_f64</span>;\n\n<span class=\"comment\">// x^(1/3) - 2 == 0\n</span><span class=\"kw\">let </span>abs_difference = (x.cbrt() - <span class=\"number\">2.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hypot\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#604\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.hypot\" class=\"fn\">hypot</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Compute the distance between the origin and a point (<code>x</code>, <code>y</code>) on the\nEuclidean plane. Equivalently, compute the length of the hypotenuse of a\nright-angle triangle with other sides having length <code>x.abs()</code> and\n<code>y.abs()</code>.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0_f64</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">3.0_f64</span>;\n\n<span class=\"comment\">// sqrt(x^2 + y^2)\n</span><span class=\"kw\">let </span>abs_difference = (x.hypot(y) - (x.powi(<span class=\"number\">2</span>) + y.powi(<span class=\"number\">2</span>)).sqrt()).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#623\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the sine of a number (in radians).</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = std::f64::consts::FRAC_PI_2;\n\n<span class=\"kw\">let </span>abs_difference = (x.sin() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#642\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the cosine of a number (in radians).</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0 </span>* std::f64::consts::PI;\n\n<span class=\"kw\">let </span>abs_difference = (x.cos() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tan\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#660\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.tan\" class=\"fn\">tan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the tangent of a number (in radians).</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = std::f64::consts::FRAC_PI_4;\n<span class=\"kw\">let </span>abs_difference = (x.tan() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-14</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.asin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#683\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.asin\" class=\"fn\">asin</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = std::f64::consts::FRAC_PI_2;\n\n<span class=\"comment\">// asin(sin(pi/2))\n</span><span class=\"kw\">let </span>abs_difference = (f.sin().asin() - std::f64::consts::FRAC_PI_2).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#706\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.acos\" class=\"fn\">acos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = std::f64::consts::FRAC_PI_4;\n\n<span class=\"comment\">// acos(cos(pi/4))\n</span><span class=\"kw\">let </span>abs_difference = (f.cos().acos() - std::f64::consts::FRAC_PI_4).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atan\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#728\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.atan\" class=\"fn\">atan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">1.0_f64</span>;\n\n<span class=\"comment\">// atan(tan(1))\n</span><span class=\"kw\">let </span>abs_difference = (f.tan().atan() - <span class=\"number\">1.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atan2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#762\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.atan2\" class=\"fn\">atan2</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code> (<code>x</code>) in radians.</p>\n<ul>\n<li><code>x = 0</code>, <code>y = 0</code>: <code>0</code></li>\n<li><code>x &gt;= 0</code>: <code>arctan(y/x)</code> -&gt; <code>[-pi/2, pi/2]</code></li>\n<li><code>y &gt;= 0</code>: <code>arctan(y/x) + pi</code> -&gt; <code>(pi/2, pi]</code></li>\n<li><code>y &lt; 0</code>: <code>arctan(y/x) - pi</code> -&gt; <code>(-pi, -pi/2)</code></li>\n</ul>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Positive angles measured counter-clockwise\n// from positive x axis\n// -pi/4 radians (45 deg clockwise)\n</span><span class=\"kw\">let </span>x1 = <span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>y1 = -<span class=\"number\">3.0_f64</span>;\n\n<span class=\"comment\">// 3pi/4 radians (135 deg counter-clockwise)\n</span><span class=\"kw\">let </span>x2 = -<span class=\"number\">3.0_f64</span>;\n<span class=\"kw\">let </span>y2 = <span class=\"number\">3.0_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference_1 = (y1.atan2(x1) - (-std::f64::consts::FRAC_PI_4)).abs();\n<span class=\"kw\">let </span>abs_difference_2 = (y2.atan2(x2) - (<span class=\"number\">3.0 </span>* std::f64::consts::FRAC_PI_4)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_1 &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_2 &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sin_cos\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#785\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.sin_cos\" class=\"fn\">sin_cos</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class=\"docblock\"><p>Simultaneously computes the sine and cosine of the number, <code>x</code>. Returns\n<code>(sin(x), cos(x))</code>.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = std::f64::consts::FRAC_PI_4;\n<span class=\"kw\">let </span>f = x.sin_cos();\n\n<span class=\"kw\">let </span>abs_difference_0 = (f.<span class=\"number\">0 </span>- x.sin()).abs();\n<span class=\"kw\">let </span>abs_difference_1 = (f.<span class=\"number\">1 </span>- x.cos()).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference_0 &lt; <span class=\"number\">1e-10</span>);\n<span class=\"macro\">assert!</span>(abs_difference_1 &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp_m1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#807\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.exp_m1\" class=\"fn\">exp_m1</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>e^(self) - 1</code> in a way that is accurate even if the\nnumber is close to zero.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1e-16_f64</span>;\n\n<span class=\"comment\">// for very small x, e^x is approximately 1 + x + x^2 / 2\n</span><span class=\"kw\">let </span>approx = x + x * x / <span class=\"number\">2.0</span>;\n<span class=\"kw\">let </span>abs_difference = (x.exp_m1() - approx).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln_1p\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#830\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.ln_1p\" class=\"fn\">ln_1p</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nthe operations were performed separately.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1e-16_f64</span>;\n\n<span class=\"comment\">// for very small x, ln(1 + x) is approximately x - x^2 / 2\n</span><span class=\"kw\">let </span>approx = x - x * x / <span class=\"number\">2.0</span>;\n<span class=\"kw\">let </span>abs_difference = (x.ln_1p() - approx).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sinh\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#853\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.sinh\" class=\"fn\">sinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Hyperbolic sine function.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n\n<span class=\"kw\">let </span>f = x.sinh();\n<span class=\"comment\">// Solving sinh() at 1 gives `(e^2-1)/(2e)`\n</span><span class=\"kw\">let </span>g = ((e * e) - <span class=\"number\">1.0</span>) / (<span class=\"number\">2.0 </span>* e);\n<span class=\"kw\">let </span>abs_difference = (f - g).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cosh\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#876\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.cosh\" class=\"fn\">cosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Hyperbolic cosine function.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>f = x.cosh();\n<span class=\"comment\">// Solving cosh() at 1 gives this result\n</span><span class=\"kw\">let </span>g = ((e * e) + <span class=\"number\">1.0</span>) / (<span class=\"number\">2.0 </span>* e);\n<span class=\"kw\">let </span>abs_difference = (f - g).abs();\n\n<span class=\"comment\">// Same result\n</span><span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tanh\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#899\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.tanh\" class=\"fn\">tanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Hyperbolic tangent function.</p>\n<h5 id=\"examples-36\"><a href=\"#examples-36\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n\n<span class=\"kw\">let </span>f = x.tanh();\n<span class=\"comment\">// Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`\n</span><span class=\"kw\">let </span>g = (<span class=\"number\">1.0 </span>- e.powi(-<span class=\"number\">2</span>)) / (<span class=\"number\">1.0 </span>+ e.powi(-<span class=\"number\">2</span>));\n<span class=\"kw\">let </span>abs_difference = (f - g).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.asinh\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#920\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.asinh\" class=\"fn\">asinh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Inverse hyperbolic sine function.</p>\n<h5 id=\"examples-37\"><a href=\"#examples-37\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>f = x.sinh().asinh();\n\n<span class=\"kw\">let </span>abs_difference = (f - x).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.acosh\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#943\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.acosh\" class=\"fn\">acosh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Inverse hyperbolic cosine function.</p>\n<h5 id=\"examples-38\"><a href=\"#examples-38\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>f = x.cosh().acosh();\n\n<span class=\"kw\">let </span>abs_difference = (f - x).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.atanh\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#968\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.atanh\" class=\"fn\">atanh</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Inverse hyperbolic tangent function.</p>\n<h5 id=\"examples-39\"><a href=\"#examples-39\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>e = std::f64::consts::E;\n<span class=\"kw\">let </span>f = e.tanh().atanh();\n\n<span class=\"kw\">let </span>abs_difference = (f - e).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1.0e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gamma\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#988\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.gamma\" class=\"fn\">gamma</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>float_gamma</code>)</span></div></span></summary><div class=\"docblock\"><p>Gamma function.</p>\n<h5 id=\"examples-40\"><a href=\"#examples-40\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_gamma)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">5.0f64</span>;\n\n<span class=\"kw\">let </span>abs_difference = (x.gamma() - <span class=\"number\">24.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt;= f64::EPSILON);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ln_gamma\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/f64.rs.html#1010\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.ln_gamma\" class=\"fn\">ln_gamma</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>float_gamma</code>)</span></div></span></summary><div class=\"docblock\"><p>Natural logarithm of the absolute value of the gamma function</p>\n<p>The integer part of the tuple indicates the sign of the gamma function.</p>\n<h5 id=\"examples-41\"><a href=\"#examples-41\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_gamma)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">2.0f64</span>;\n\n<span class=\"kw\">let </span>abs_difference = (x.ln_gamma().<span class=\"number\">0 </span>- <span class=\"number\">0.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt;= f64::EPSILON);</code></pre></div>\n</div></details></div></details>",0,"bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-f64\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#370\">source</a><a href=\"#impl-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.RADIX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#373\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.RADIX\" class=\"constant\">RADIX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a> = 2u32</h4></section></summary><div class=\"docblock\"><p>The radix or base of the internal representation of <code>f64</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MANTISSA_DIGITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS\" class=\"constant\">MANTISSA_DIGITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a> = 53u32</h4></section></summary><div class=\"docblock\"><p>Number of significant digits in base 2.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.DIGITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#387\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.DIGITS\" class=\"constant\">DIGITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a> = 15u32</h4></section></summary><div class=\"docblock\"><p>Approximate number of significant digits in base 10.</p>\n<p>This is the maximum <i>x</i> such that any decimal number with <i>x</i>\nsignificant digits can be converted to <code>f64</code> and back without loss.</p>\n<p>Equal to floor(log<sub>10</sub> 2<sup><a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS\" title=\"associated constant f64::MANTISSA_DIGITS\"><code>MANTISSA_DIGITS</code></a> − 1</sup>).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.EPSILON\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#398\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.EPSILON\" class=\"constant\">EPSILON</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = 2.2204460492503131E-16f64</h4></section></summary><div class=\"docblock\"><p><a href=\"https://en.wikipedia.org/wiki/Machine_epsilon\">Machine epsilon</a> value for <code>f64</code>.</p>\n<p>This is the difference between <code>1.0</code> and the next larger representable number.</p>\n<p>Equal to 2<sup>1 − <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS\" title=\"associated constant f64::MANTISSA_DIGITS\"><code>MANTISSA_DIGITS</code></a></sup>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#406\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = -1.7976931348623157E+308f64</h4></section></summary><div class=\"docblock\"><p>Smallest finite <code>f64</code> value.</p>\n<p>Equal to −<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX\" title=\"associated constant f64::MAX\"><code>MAX</code></a>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_POSITIVE\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#413\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN_POSITIVE\" class=\"constant\">MIN_POSITIVE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = 2.2250738585072014E-308f64</h4></section></summary><div class=\"docblock\"><p>Smallest positive normal <code>f64</code> value.</p>\n<p>Equal to 2<sup><a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN_EXP\" title=\"associated constant f64::MIN_EXP\"><code>MIN_EXP</code></a> − 1</sup>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#422\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = 1.7976931348623157E+308f64</h4></section></summary><div class=\"docblock\"><p>Largest finite <code>f64</code> value.</p>\n<p>Equal to\n(1 − 2<sup>−<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS\" title=\"associated constant f64::MANTISSA_DIGITS\"><code>MANTISSA_DIGITS</code></a></sup>) 2<sup><a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX_EXP\" title=\"associated constant f64::MAX_EXP\"><code>MAX_EXP</code></a></sup>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_EXP\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#429\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN_EXP\" class=\"constant\">MIN_EXP</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a> = -1_021i32</h4></section></summary><div class=\"docblock\"><p>One greater than the minimum possible normal power of 2 exponent.</p>\n<p>If <i>x</i> = <code>MIN_EXP</code>, then normal numbers\n≥ 0.5 × 2<sup><i>x</i></sup>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_EXP\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#435\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX_EXP\" class=\"constant\">MAX_EXP</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a> = 1_024i32</h4></section></summary><div class=\"docblock\"><p>Maximum possible power of 2 exponent.</p>\n<p>If <i>x</i> = <code>MAX_EXP</code>, then normal numbers\n&lt; 1 × 2<sup><i>x</i></sup>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_10_EXP\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#443\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN_10_EXP\" class=\"constant\">MIN_10_EXP</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a> = -307i32</h4></section></summary><div class=\"docblock\"><p>Minimum <i>x</i> for which 10<sup><i>x</i></sup> is normal.</p>\n<p>Equal to ceil(log<sub>10</sub> <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN_POSITIVE\" title=\"associated constant f64::MIN_POSITIVE\"><code>MIN_POSITIVE</code></a>).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_10_EXP\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#450\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX_10_EXP\" class=\"constant\">MAX_10_EXP</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.i32.html\">i32</a> = 308i32</h4></section></summary><div class=\"docblock\"><p>Maximum <i>x</i> for which 10<sup><i>x</i></sup> is normal.</p>\n<p>Equal to floor(log<sub>10</sub> <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX\" title=\"associated constant f64::MAX\"><code>MAX</code></a>).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#464\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.NAN\" class=\"constant\">NAN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = NaNf64</h4></section></summary><div class=\"docblock\"><p>Not a Number (NaN).</p>\n<p>Note that IEEE 754 doesn’t define just a single NaN value;\na plethora of bit patterns are considered to be NaN.\nFurthermore, the standard makes a difference\nbetween a “signaling” and a “quiet” NaN,\nand allows inspecting its “payload” (the unspecified bits in the bit pattern).\nThis constant isn’t guaranteed to equal to any specific NaN bitpattern,\nand the stability of its representation over Rust versions\nand target platforms isn’t guaranteed.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.INFINITY\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#467\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.INFINITY\" class=\"constant\">INFINITY</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = +Inff64</h4></section></summary><div class=\"docblock\"><p>Infinity (∞).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.NEG_INFINITY\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#470\">source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.NEG_INFINITY\" class=\"constant\">NEG_INFINITY</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a> = -Inff64</h4></section></summary><div class=\"docblock\"><p>Negative infinity (−∞).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_nan\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#485\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this value is NaN.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nan = f64::NAN;\n<span class=\"kw\">let </span>f = <span class=\"number\">7.0_f64</span>;\n\n<span class=\"macro\">assert!</span>(nan.is_nan());\n<span class=\"macro\">assert!</span>(!f.is_nan());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_infinite\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#520\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this value is positive infinity or negative infinity, and\n<code>false</code> otherwise.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">7.0f64</span>;\n<span class=\"kw\">let </span>inf = f64::INFINITY;\n<span class=\"kw\">let </span>neg_inf = f64::NEG_INFINITY;\n<span class=\"kw\">let </span>nan = f64::NAN;\n\n<span class=\"macro\">assert!</span>(!f.is_infinite());\n<span class=\"macro\">assert!</span>(!nan.is_infinite());\n\n<span class=\"macro\">assert!</span>(inf.is_infinite());\n<span class=\"macro\">assert!</span>(neg_inf.is_infinite());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_finite\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#545\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this number is neither infinite nor NaN.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">7.0f64</span>;\n<span class=\"kw\">let </span>inf: f64 = f64::INFINITY;\n<span class=\"kw\">let </span>neg_inf: f64 = f64::NEG_INFINITY;\n<span class=\"kw\">let </span>nan: f64 = f64::NAN;\n\n<span class=\"macro\">assert!</span>(f.is_finite());\n\n<span class=\"macro\">assert!</span>(!nan.is_finite());\n<span class=\"macro\">assert!</span>(!inf.is_finite());\n<span class=\"macro\">assert!</span>(!neg_inf.is_finite());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subnormal\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0, const unstable\">1.53.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#573\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is <a href=\"https://en.wikipedia.org/wiki/Denormal_number\">subnormal</a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>min = f64::MIN_POSITIVE; <span class=\"comment\">// 2.2250738585072014e-308_f64\n</span><span class=\"kw\">let </span>max = f64::MAX;\n<span class=\"kw\">let </span>lower_than_min = <span class=\"number\">1.0e-308_f64</span>;\n<span class=\"kw\">let </span>zero = <span class=\"number\">0.0_f64</span>;\n\n<span class=\"macro\">assert!</span>(!min.is_subnormal());\n<span class=\"macro\">assert!</span>(!max.is_subnormal());\n\n<span class=\"macro\">assert!</span>(!zero.is_subnormal());\n<span class=\"macro\">assert!</span>(!f64::NAN.is_subnormal());\n<span class=\"macro\">assert!</span>(!f64::INFINITY.is_subnormal());\n<span class=\"comment\">// Values between `0` and `min` are Subnormal.\n</span><span class=\"macro\">assert!</span>(lower_than_min.is_subnormal());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_normal\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#600\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is neither zero, infinite,\n<a href=\"https://en.wikipedia.org/wiki/Denormal_number\">subnormal</a>, or NaN.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>min = f64::MIN_POSITIVE; <span class=\"comment\">// 2.2250738585072014e-308f64\n</span><span class=\"kw\">let </span>max = f64::MAX;\n<span class=\"kw\">let </span>lower_than_min = <span class=\"number\">1.0e-308_f64</span>;\n<span class=\"kw\">let </span>zero = <span class=\"number\">0.0f64</span>;\n\n<span class=\"macro\">assert!</span>(min.is_normal());\n<span class=\"macro\">assert!</span>(max.is_normal());\n\n<span class=\"macro\">assert!</span>(!zero.is_normal());\n<span class=\"macro\">assert!</span>(!f64::NAN.is_normal());\n<span class=\"macro\">assert!</span>(!f64::INFINITY.is_normal());\n<span class=\"comment\">// Values between `0` and `min` are Subnormal.\n</span><span class=\"macro\">assert!</span>(!lower_than_min.is_normal());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.classify\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#619\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.classify\" class=\"fn\">classify</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/num/enum.FpCategory.html\" title=\"enum core::num::FpCategory\">FpCategory</a></h4></section></summary><div class=\"docblock\"><p>Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::num::FpCategory;\n\n<span class=\"kw\">let </span>num = <span class=\"number\">12.4_f64</span>;\n<span class=\"kw\">let </span>inf = f64::INFINITY;\n\n<span class=\"macro\">assert_eq!</span>(num.classify(), FpCategory::Normal);\n<span class=\"macro\">assert_eq!</span>(inf.classify(), FpCategory::Infinite);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_positive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#703\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, NaNs with\npositive sign bit and positive infinity. Note that IEEE 754 doesn’t assign any\nmeaning to the sign bit in case of a NaN, and as Rust doesn’t guarantee that\nthe bit pattern of NaNs are conserved over arithmetic operations, the result of\n<code>is_sign_positive</code> on a NaN might produce an unexpected result in some cases.\nSee <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\" title=\"primitive f32\">explanation of NaN as a special value</a> for more info.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">7.0_f64</span>;\n<span class=\"kw\">let </span>g = -<span class=\"number\">7.0_f64</span>;\n\n<span class=\"macro\">assert!</span>(f.is_sign_positive());\n<span class=\"macro\">assert!</span>(!g.is_sign_positive());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_sign_negative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72505\" title=\"Tracking issue for const_float_classify\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#734\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, NaNs with\nnegative sign bit and negative infinity. Note that IEEE 754 doesn’t assign any\nmeaning to the sign bit in case of a NaN, and as Rust doesn’t guarantee that\nthe bit pattern of NaNs are conserved over arithmetic operations, the result of\n<code>is_sign_negative</code> on a NaN might produce an unexpected result in some cases.\nSee <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\" title=\"primitive f32\">explanation of NaN as a special value</a> for more info.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = <span class=\"number\">7.0_f64</span>;\n<span class=\"kw\">let </span>g = -<span class=\"number\">7.0_f64</span>;\n\n<span class=\"macro\">assert!</span>(!f.is_sign_negative());\n<span class=\"macro\">assert!</span>(g.is_sign_negative());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_up\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/91399\" title=\"Tracking issue for float_next_up_down\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#778\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.next_up\" class=\"fn\">next_up</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>float_next_up_down</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the least number greater than <code>self</code>.</p>\n<p>Let <code>TINY</code> be the smallest representable positive <code>f64</code>. Then,</p>\n<ul>\n<li>if <code>self.is_nan()</code>, this returns <code>self</code>;</li>\n<li>if <code>self</code> is <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.NEG_INFINITY\" title=\"associated constant f64::NEG_INFINITY\"><code>NEG_INFINITY</code></a>, this returns <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN\" title=\"associated constant f64::MIN\"><code>MIN</code></a>;</li>\n<li>if <code>self</code> is <code>-TINY</code>, this returns -0.0;</li>\n<li>if <code>self</code> is -0.0 or +0.0, this returns <code>TINY</code>;</li>\n<li>if <code>self</code> is <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX\" title=\"associated constant f64::MAX\"><code>MAX</code></a> or <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.INFINITY\" title=\"associated constant f64::INFINITY\"><code>INFINITY</code></a>, this returns <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.INFINITY\" title=\"associated constant f64::INFINITY\"><code>INFINITY</code></a>;</li>\n<li>otherwise the unique least value greater than <code>self</code> is returned.</li>\n</ul>\n<p>The identity <code>x.next_up() == -(-x).next_down()</code> holds for all non-NaN <code>x</code>. When <code>x</code>\nis finite <code>x == x.next_up().next_down()</code> also holds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_next_up_down)]\n</span><span class=\"comment\">// f64::EPSILON is the difference between 1.0 and the next number up.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1.0f64</span>.next_up(), <span class=\"number\">1.0 </span>+ f64::EPSILON);\n<span class=\"comment\">// But not for most numbers.\n</span><span class=\"macro\">assert!</span>(<span class=\"number\">0.1f64</span>.next_up() &lt; <span class=\"number\">0.1 </span>+ f64::EPSILON);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">9007199254740992f64</span>.next_up(), <span class=\"number\">9007199254740994.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_down\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/91399\" title=\"Tracking issue for float_next_up_down\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#828\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.next_down\" class=\"fn\">next_down</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>float_next_up_down</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the greatest number less than <code>self</code>.</p>\n<p>Let <code>TINY</code> be the smallest representable positive <code>f64</code>. Then,</p>\n<ul>\n<li>if <code>self.is_nan()</code>, this returns <code>self</code>;</li>\n<li>if <code>self</code> is <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.INFINITY\" title=\"associated constant f64::INFINITY\"><code>INFINITY</code></a>, this returns <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MAX\" title=\"associated constant f64::MAX\"><code>MAX</code></a>;</li>\n<li>if <code>self</code> is <code>TINY</code>, this returns 0.0;</li>\n<li>if <code>self</code> is -0.0 or +0.0, this returns <code>-TINY</code>;</li>\n<li>if <code>self</code> is <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.MIN\" title=\"associated constant f64::MIN\"><code>MIN</code></a> or <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.NEG_INFINITY\" title=\"associated constant f64::NEG_INFINITY\"><code>NEG_INFINITY</code></a>, this returns <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#associatedconstant.NEG_INFINITY\" title=\"associated constant f64::NEG_INFINITY\"><code>NEG_INFINITY</code></a>;</li>\n<li>otherwise the unique greatest value less than <code>self</code> is returned.</li>\n</ul>\n<p>The identity <code>x.next_down() == -(-x).next_up()</code> holds for all non-NaN <code>x</code>. When <code>x</code>\nis finite <code>x == x.next_down().next_up()</code> also holds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_next_up_down)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">1.0f64</span>;\n<span class=\"comment\">// Clamp value into range [0, 1).\n</span><span class=\"kw\">let </span>clamped = x.clamp(<span class=\"number\">0.0</span>, <span class=\"number\">1.0f64</span>.next_down());\n<span class=\"macro\">assert!</span>(clamped &lt; <span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(clamped.next_up(), <span class=\"number\">1.0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#861\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Takes the reciprocal (inverse) of a number, <code>1/x</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">2.0_f64</span>;\n<span class=\"kw\">let </span>abs_difference = (x.recip() - (<span class=\"number\">1.0 </span>/ x)).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_degrees\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#878\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts radians to degrees.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = std::f64::consts::PI;\n\n<span class=\"kw\">let </span>abs_difference = (angle.to_degrees() - <span class=\"number\">180.0</span>).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_radians\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#898\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Converts degrees to radians.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = <span class=\"number\">180.0_f64</span>;\n\n<span class=\"kw\">let </span>abs_difference = (angle.to_radians() - std::f64::consts::PI).abs();\n\n<span class=\"macro\">assert!</span>(abs_difference &lt; <span class=\"number\">1e-10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#919\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.max\" class=\"fn\">max</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum of the two numbers, ignoring NaN.</p>\n<p>If one of the arguments is NaN, then the other argument is returned.\nThis follows the IEEE 754-2008 semantics for maxNum, except for handling of signaling NaNs;\nthis function handles all NaNs the same way and avoids maxNum’s problems with associativity.\nThis also matches the behavior of libm’s fmax.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">2.0_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(x.max(y), y);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#939\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.min\" class=\"fn\">min</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Returns the minimum of the two numbers, ignoring NaN.</p>\n<p>If one of the arguments is NaN, then the other argument is returned.\nThis follows the IEEE 754-2008 semantics for minNum, except for handling of signaling NaNs;\nthis function handles all NaNs the same way and avoids minNum’s problems with associativity.\nThis also matches the behavior of libm’s fmin.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">2.0_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(x.min(y), x);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.maximum\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#966\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.maximum\" class=\"fn\">maximum</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>float_minimum_maximum</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the maximum of the two numbers, propagating NaN.</p>\n<p>This returns NaN when <em>either</em> argument is NaN, as opposed to\n<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.max\" title=\"method f64::max\"><code>f64::max</code></a> which only returns NaN when <em>both</em> arguments are NaN.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_minimum_maximum)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">2.0_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(x.maximum(y), y);\n<span class=\"macro\">assert!</span>(x.maximum(f64::NAN).is_nan());</code></pre></div>\n<p>If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\nof the two numbers. For this operation, -0.0 is considered to be less than +0.0.\nNote that this follows the semantics specified in IEEE 754-2019.</p>\n<p>Also note that “propagation” of NaNs here doesn’t necessarily mean that the bitpattern of a NaN\noperand is conserved; see <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\" title=\"primitive f32\">explanation of NaN as a special value</a> for more info.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minimum\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1001\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.minimum\" class=\"fn\">minimum</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>float_minimum_maximum</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the minimum of the two numbers, propagating NaN.</p>\n<p>This returns NaN when <em>either</em> argument is NaN, as opposed to\n<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.min\" title=\"method f64::min\"><code>f64::min</code></a> which only returns NaN when <em>both</em> arguments are NaN.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(float_minimum_maximum)]\n</span><span class=\"kw\">let </span>x = <span class=\"number\">1.0_f64</span>;\n<span class=\"kw\">let </span>y = <span class=\"number\">2.0_f64</span>;\n\n<span class=\"macro\">assert_eq!</span>(x.minimum(y), x);\n<span class=\"macro\">assert!</span>(x.minimum(f64::NAN).is_nan());</code></pre></div>\n<p>If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\nof the two numbers. For this operation, -0.0 is considered to be less than +0.0.\nNote that this follows the semantics specified in IEEE 754-2019.</p>\n<p>Also note that “propagation” of NaNs here doesn’t necessarily mean that the bitpattern of a NaN\noperand is conserved; see <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f32.html\" title=\"primitive f32\">explanation of NaN as a special value</a> for more info.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1027\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p>This returns NaN when <em>either</em> argument is NaN or if a combination of\n+inf and -inf is provided as arguments.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1f64</span>.midpoint(<span class=\"number\">4.0</span>), <span class=\"number\">2.5</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5.5f64</span>).midpoint(<span class=\"number\">8.0</span>), <span class=\"number\">1.25</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_int_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1074-1076\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.to_int_unchecked\" class=\"fn\">to_int_unchecked</a>&lt;Int&gt;(self) -&gt; Int<span class=\"where fmt-newline\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/num/trait.FloatToInt.html\" title=\"trait core::convert::num::FloatToInt\">FloatToInt</a>&lt;Int&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Rounds toward zero and converts to any primitive integer type,\nassuming that the value is finite and fits in that type.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = <span class=\"number\">4.6_f64</span>;\n<span class=\"kw\">let </span>rounded = <span class=\"kw\">unsafe </span>{ value.to_int_unchecked::&lt;u16&gt;() };\n<span class=\"macro\">assert_eq!</span>(rounded, <span class=\"number\">4</span>);\n\n<span class=\"kw\">let </span>value = -<span class=\"number\">128.9_f64</span>;\n<span class=\"kw\">let </span>rounded = <span class=\"kw\">unsafe </span>{ value.to_int_unchecked::&lt;i8&gt;() };\n<span class=\"macro\">assert_eq!</span>(rounded, i8::MIN);</code></pre></div>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>The value must:</p>\n<ul>\n<li>Not be <code>NaN</code></li>\n<li>Not be infinite</li>\n<li>Be representable in the return type <code>Int</code>, after truncating off its fractional part</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1105\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Raw transmutation to <code>u64</code>.</p>\n<p>This is currently identical to <code>transmute::&lt;f64, u64&gt;(self)</code> on all platforms.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_bits\" title=\"associated function f64::from_bits\"><code>from_bits</code></a> for some discussion of the\nportability of this operation (there are almost no issues).</p>\n<p>Note that this function is distinct from <code>as</code> casting, which attempts to\npreserve the <em>numeric</em> value, and not the bitwise value.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((<span class=\"number\">1f64</span>).to_bits() != <span class=\"number\">1f64 </span><span class=\"kw\">as </span>u64); <span class=\"comment\">// to_bits() is not casting!\n</span><span class=\"macro\">assert_eq!</span>((<span class=\"number\">12.5f64</span>).to_bits(), <span class=\"number\">0x4029000000000000</span>);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1177\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.from_bits\" class=\"fn\">from_bits</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Raw transmutation from <code>u64</code>.</p>\n<p>This is currently identical to <code>transmute::&lt;u64, f64&gt;(v)</code> on all platforms.\nIt turns out this is incredibly portable, for two reasons:</p>\n<ul>\n<li>Floats and Ints have the same endianness on all supported platforms.</li>\n<li>IEEE 754 very precisely specifies the bit layout of floats.</li>\n</ul>\n<p>However there is one caveat: prior to the 2008 version of IEEE 754, how\nto interpret the NaN signaling bit wasn’t actually specified. Most platforms\n(notably x86 and ARM) picked the interpretation that was ultimately\nstandardized in 2008, but some didn’t (notably MIPS). As a result, all\nsignaling NaNs on MIPS are quiet NaNs on x86, and vice-versa.</p>\n<p>Rather than trying to preserve signaling-ness cross-platform, this\nimplementation favors preserving the exact bits. This means that\nany payloads encoded in NaNs will be preserved even if the result of\nthis method is sent over the network from an x86 machine to a MIPS one.</p>\n<p>If the results of this method are only manipulated by the same\narchitecture that produced them, then there is no portability concern.</p>\n<p>If the input isn’t NaN, then there is no portability concern.</p>\n<p>If you don’t care about signaling-ness (very likely), then there is no\nportability concern.</p>\n<p>Note that this function is distinct from <code>as</code> casting, which attempts to\npreserve the <em>numeric</em> value, and not the bitwise value.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = f64::from_bits(<span class=\"number\">0x4029000000000000</span>);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"number\">12.5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0, const unstable\">1.40.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1251\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this floating point number as a byte array in\nbig-endian (network) byte order.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_bits\" title=\"associated function f64::from_bits\"><code>from_bits</code></a> for some discussion of the\nportability of this operation (there are almost no issues).</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">12.5f64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x40</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0, const unstable\">1.40.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1272\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this floating point number as a byte array in\nlittle-endian byte order.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_bits\" title=\"associated function f64::from_bits\"><code>from_bits</code></a> for some discussion of the\nportability of this operation (there are almost no issues).</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">12.5f64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x40</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0, const unstable\">1.40.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1306\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this floating point number as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.to_be_bytes\" title=\"method f64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.to_le_bytes\" title=\"method f64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate, instead.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_bits\" title=\"associated function f64::from_bits\"><code>from_bits</code></a> for some discussion of the\nportability of this operation (there are almost no issues).</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">12.5f64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x40</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x40</span>]\n    }\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0, const unstable\">1.40.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1325\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Create a floating point value from its representation as a byte array in big endian.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_bits\" title=\"associated function f64::from_bits\"><code>from_bits</code></a> for some discussion of the\nportability of this operation (there are almost no issues).</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = f64::from_be_bytes([<span class=\"number\">0x40</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">12.5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0, const unstable\">1.40.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1344\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Create a floating point value from its representation as a byte array in little endian.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_bits\" title=\"associated function f64::from_bits\"><code>from_bits</code></a> for some discussion of the\nportability of this operation (there are almost no issues).</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = f64::from_le_bytes([<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x40</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">12.5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0, const unstable\">1.40.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/72447\" title=\"Tracking issue for const_float_bits_conv\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1374\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Create a floating point value from its representation as a byte array in native endian.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_be_bytes\" title=\"associated function f64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_le_bytes\" title=\"associated function f64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#method.from_bits\" title=\"associated function f64::from_bits\"><code>from_bits</code></a> for some discussion of the\nportability of this operation (there are almost no issues).</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = f64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x40</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x29</span>, <span class=\"number\">0x40</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">12.5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.total_cmp\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.62.0\">1.62.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1432\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.total_cmp\" class=\"fn\">total_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Return the ordering between <code>self</code> and <code>other</code>.</p>\n<p>Unlike the standard partial comparison between floating point numbers,\nthis comparison always produces an ordering in accordance to\nthe <code>totalOrder</code> predicate as defined in the IEEE 754 (2008 revision)\nfloating point standard. The values are ordered in the following sequence:</p>\n<ul>\n<li>negative quiet NaN</li>\n<li>negative signaling NaN</li>\n<li>negative infinity</li>\n<li>negative numbers</li>\n<li>negative subnormal numbers</li>\n<li>negative zero</li>\n<li>positive zero</li>\n<li>positive subnormal numbers</li>\n<li>positive numbers</li>\n<li>positive infinity</li>\n<li>positive signaling NaN</li>\n<li>positive quiet NaN.</li>\n</ul>\n<p>The ordering established by this function does not always agree with the\n<a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\"><code>PartialOrd</code></a> and <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a> implementations of <code>f64</code>. For example,\nthey consider negative and positive zero equal, while <code>total_cmp</code>\ndoesn’t.</p>\n<p>The interpretation of the signaling NaN bit follows the definition in\nthe IEEE 754 standard, which may not match the interpretation by some of\nthe older, non-conformant (e.g. MIPS) hardware implementations.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>GoodBoy {\n    name: String,\n    weight: f64,\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bois = <span class=\"macro\">vec!</span>[\n    GoodBoy { name: <span class=\"string\">&quot;Pucci&quot;</span>.to_owned(), weight: <span class=\"number\">0.1 </span>},\n    GoodBoy { name: <span class=\"string\">&quot;Woofer&quot;</span>.to_owned(), weight: <span class=\"number\">99.0 </span>},\n    GoodBoy { name: <span class=\"string\">&quot;Yapper&quot;</span>.to_owned(), weight: <span class=\"number\">10.0 </span>},\n    GoodBoy { name: <span class=\"string\">&quot;Chonk&quot;</span>.to_owned(), weight: f64::INFINITY },\n    GoodBoy { name: <span class=\"string\">&quot;Abs. Unit&quot;</span>.to_owned(), weight: f64::NAN },\n    GoodBoy { name: <span class=\"string\">&quot;Floaty&quot;</span>.to_owned(), weight: -<span class=\"number\">5.0 </span>},\n];\n\nbois.sort_by(|a, b| a.weight.total_cmp(<span class=\"kw-2\">&amp;</span>b.weight));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/num/f64.rs.html#1487\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html#tymethod.clamp\" class=\"fn\">clamp</a>(self, min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>, max: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>Restrict a value to a certain interval unless it is NaN.</p>\n<p>Returns <code>max</code> if <code>self</code> is greater than <code>max</code>, and <code>min</code> if <code>self</code> is\nless than <code>min</code>. Otherwise this returns <code>self</code>.</p>\n<p>Note that this function returns NaN if the initial value was NaN as\nwell.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if <code>min &gt; max</code>, <code>min</code> is NaN, or <code>max</code> is NaN.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">3.0f64</span>).clamp(-<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>) == -<span class=\"number\">2.0</span>);\n<span class=\"macro\">assert!</span>((<span class=\"number\">0.0f64</span>).clamp(-<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>) == <span class=\"number\">0.0</span>);\n<span class=\"macro\">assert!</span>((<span class=\"number\">2.0f64</span>).clamp(-<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>) == <span class=\"number\">1.0</span>);\n<span class=\"macro\">assert!</span>((f64::NAN).clamp(-<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>).is_nan());</code></pre></div>\n</div></details></div></details>",0,"bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pixel-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/winit/dpi.rs.html#149\">source</a><a href=\"#impl-Pixel-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"winit/dpi/trait.Pixel.html\" title=\"trait winit::dpi::Pixel\">Pixel</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winit/dpi.rs.html#150\">source</a><a href=\"#method.from_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winit/dpi/trait.Pixel.html#tymethod.from_f64\" class=\"fn\">from_f64</a>(f: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section><section id=\"method.cast\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winit/dpi.rs.html#109\">source</a><a href=\"#method.cast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winit/dpi/trait.Pixel.html#method.cast\" class=\"fn\">cast</a>&lt;P&gt;(self) -&gt; P<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"winit/dpi/trait.Pixel.html\" title=\"trait winit::dpi::Pixel\">Pixel</a>,</span></h4></section></div></details>","Pixel","bevy_xpbd_2d::math::double::Scalar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AdjustPrecision-for-f64\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_xpbd_2d/math/double.rs.html#32-37\">source</a><a href=\"#impl-AdjustPrecision-for-f64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy_xpbd_2d/math/trait.AdjustPrecision.html\" title=\"trait bevy_xpbd_2d::math::AdjustPrecision\">AdjustPrecision</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Adjusted\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Adjusted\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bevy_xpbd_2d/math/trait.AdjustPrecision.html#associatedtype.Adjusted\" class=\"associatedtype\">Adjusted</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>A math construct type with the desired precision.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.adjust_precision\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_xpbd_2d/math/double.rs.html#34-36\">source</a><a href=\"#method.adjust_precision\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_xpbd_2d/math/trait.AdjustPrecision.html#tymethod.adjust_precision\" class=\"fn\">adjust_precision</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"bevy_xpbd_2d/math/trait.AdjustPrecision.html#associatedtype.Adjusted\" title=\"type bevy_xpbd_2d::math::AdjustPrecision::Adjusted\">Adjusted</a></h4></section></summary><div class='docblock'>Adjusts the precision of <a href=\"bevy_xpbd_2d/math/index.html\" title=\"mod bevy_xpbd_2d::math\"><code>self</code></a> to <a href=\"#associatedtype.Adjusted\"><code>Self::Adjusted</code></a>.</div></details></div></details>","AdjustPrecision","bevy_xpbd_2d::math::double::Scalar"]],
"parry2d_f64":[],
"serde":[],
"winit":[]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()