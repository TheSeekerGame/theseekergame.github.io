(function() {var implementors = {
"bevy":[],
"bevy_animation":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_animation/struct.AnimationClip.html\" title=\"struct bevy_animation::AnimationClip\">AnimationClip</a>"]],
"bevy_asset_loader":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_asset_loader/standard_dynamic_asset/struct.StandardDynamicAssetCollection.html\" title=\"struct bevy_asset_loader::standard_dynamic_asset::StandardDynamicAssetCollection\">StandardDynamicAssetCollection</a>"]],
"bevy_audio":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_audio/struct.AudioSink.html\" title=\"struct bevy_audio::AudioSink\">AudioSink</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_audio/struct.AudioSource.html\" title=\"struct bevy_audio::AudioSource\">AudioSource</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_audio/struct.SpatialAudioSink.html\" title=\"struct bevy_audio::SpatialAudioSink\">SpatialAudioSink</a>"]],
"bevy_ecs_ldtk":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_ecs_ldtk/prelude/struct.LdtkAsset.html\" title=\"struct bevy_ecs_ldtk::prelude::LdtkAsset\">LdtkAsset</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_ecs_ldtk/prelude/struct.LdtkLevel.html\" title=\"struct bevy_ecs_ldtk::prelude::LdtkLevel\">LdtkLevel</a>"]],
"bevy_fluent":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_fluent/struct.ResourceAsset.html\" title=\"struct bevy_fluent::ResourceAsset\">ResourceAsset</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_fluent/struct.BundleAsset.html\" title=\"struct bevy_fluent::BundleAsset\">BundleAsset</a>"]],
"bevy_internal":[],
"bevy_reflect":[],
"bevy_render":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_render/mesh/skinning/struct.SkinnedMeshInverseBindposes.html\" title=\"struct bevy_render::mesh::skinning::SkinnedMeshInverseBindposes\">SkinnedMeshInverseBindposes</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_render/render_resource/struct.Shader.html\" title=\"struct bevy_render::render_resource::Shader\">Shader</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_render/texture/struct.Image.html\" title=\"struct bevy_render::texture::Image\">Image</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_render/mesh/struct.Mesh.html\" title=\"struct bevy_render::mesh::Mesh\">Mesh</a>"]],
"bevy_scene":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_scene/struct.DynamicScene.html\" title=\"struct bevy_scene::DynamicScene\">DynamicScene</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_scene/struct.Scene.html\" title=\"struct bevy_scene::Scene\">Scene</a>"]],
"bevy_sprite":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_sprite/struct.TextureAtlas.html\" title=\"struct bevy_sprite::TextureAtlas\">TextureAtlas</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_sprite/struct.ColorMaterial.html\" title=\"struct bevy_sprite::ColorMaterial\">ColorMaterial</a>"]],
"bevy_text":[["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_text/struct.FontAtlasSet.html\" title=\"struct bevy_text::FontAtlasSet\">FontAtlasSet</a>"],["impl <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"bevy_text/struct.Font.html\" title=\"struct bevy_text::Font\">Font</a>"]],
"leafwing_input_manager":[["impl&lt;A: <a class=\"trait\" href=\"leafwing_input_manager/trait.Actionlike.html\" title=\"trait leafwing_input_manager::Actionlike\">Actionlike</a> + <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a>&gt; <a class=\"trait\" href=\"bevy_reflect/type_uuid/trait.TypeUuid.html\" title=\"trait bevy_reflect::type_uuid::TypeUuid\">TypeUuid</a> for <a class=\"struct\" href=\"leafwing_input_manager/input_map/struct.InputMap.html\" title=\"struct leafwing_input_manager::input_map::InputMap\">InputMap</a>&lt;A&gt;"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()