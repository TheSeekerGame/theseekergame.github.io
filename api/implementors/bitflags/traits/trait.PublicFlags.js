(function() {var implementors = {
"bevy_render":[["impl PublicFlags for <a class=\"struct\" href=\"bevy_render/texture/struct.CompressedImageFormats.html\" title=\"struct bevy_render::texture::CompressedImageFormats\">CompressedImageFormats</a>"]],
"bevy_sprite":[["impl PublicFlags for <a class=\"struct\" href=\"bevy_sprite/struct.ColorMaterialFlags.html\" title=\"struct bevy_sprite::ColorMaterialFlags\">ColorMaterialFlags</a>"],["impl PublicFlags for <a class=\"struct\" href=\"bevy_sprite/struct.SpritePipelineKey.html\" title=\"struct bevy_sprite::SpritePipelineKey\">SpritePipelineKey</a>"],["impl PublicFlags for <a class=\"struct\" href=\"bevy_sprite/struct.Mesh2dPipelineKey.html\" title=\"struct bevy_sprite::Mesh2dPipelineKey\">Mesh2dPipelineKey</a>"]],
"ron":[["impl PublicFlags for <a class=\"struct\" href=\"ron/extensions/struct.Extensions.html\" title=\"struct ron::extensions::Extensions\">Extensions</a>"]],
"wgpu_core":[["impl PublicFlags for <a class=\"struct\" href=\"wgpu_core/pipeline/struct.PipelineFlags.html\" title=\"struct wgpu_core::pipeline::PipelineFlags\">PipelineFlags</a>"]],
"wgpu_hal":[["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.FormatAspects.html\" title=\"struct wgpu_hal::FormatAspects\">FormatAspects</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.TextureFormatCapabilities.html\" title=\"struct wgpu_hal::TextureFormatCapabilities\">TextureFormatCapabilities</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.BindGroupLayoutFlags.html\" title=\"struct wgpu_hal::BindGroupLayoutFlags\">BindGroupLayoutFlags</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.AttachmentOps.html\" title=\"struct wgpu_hal::AttachmentOps\">AttachmentOps</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.MemoryFlags.html\" title=\"struct wgpu_hal::MemoryFlags\">MemoryFlags</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.PipelineLayoutFlags.html\" title=\"struct wgpu_hal::PipelineLayoutFlags\">PipelineLayoutFlags</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.BufferUses.html\" title=\"struct wgpu_hal::BufferUses\">BufferUses</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/vulkan/struct.Workarounds.html\" title=\"struct wgpu_hal::vulkan::Workarounds\">Workarounds</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.TextureUses.html\" title=\"struct wgpu_hal::TextureUses\">TextureUses</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_hal/struct.InstanceFlags.html\" title=\"struct wgpu_hal::InstanceFlags\">InstanceFlags</a>"]],
"wgpu_types":[["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.BufferUsages.html\" title=\"struct wgpu_types::BufferUsages\">BufferUsages</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.PipelineStatisticsTypes.html\" title=\"struct wgpu_types::PipelineStatisticsTypes\">PipelineStatisticsTypes</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.ColorWrites.html\" title=\"struct wgpu_types::ColorWrites\">ColorWrites</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.TextureUsages.html\" title=\"struct wgpu_types::TextureUsages\">TextureUsages</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.DownlevelFlags.html\" title=\"struct wgpu_types::DownlevelFlags\">DownlevelFlags</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.ShaderStages.html\" title=\"struct wgpu_types::ShaderStages\">ShaderStages</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.TextureFormatFeatureFlags.html\" title=\"struct wgpu_types::TextureFormatFeatureFlags\">TextureFormatFeatureFlags</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.Features.html\" title=\"struct wgpu_types::Features\">Features</a>"],["impl PublicFlags for <a class=\"struct\" href=\"wgpu_types/struct.Backends.html\" title=\"struct wgpu_types::Backends\">Backends</a>"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()