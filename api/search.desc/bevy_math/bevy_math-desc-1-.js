searchState.loadedDescShard("bevy_math", 1, "Get a bounding sphere for the shape with the given …\nComputes the smallest <code>BoundingSphere</code> containing this <code>Aabb3d</code>…\nReturns the center of the bounding volume.\nThe center of the bounding circle\nThe center of the bounding sphere\nThe circle\nThe circle that is being cast\nGet the distance at which the <code>BoundingCircle</code>s collide, if …\nGet the distance of an intersection with a <code>BoundingCircle</code>, …\nFinds the point on the AABB that is closest to the given …\nFinds the point on the bounding circle that is closest to …\nFinds the point on the AABB that is closest to the given …\nFinds the point on the bounding sphere that is closest to …\nChecks if this bounding volume contains another one.\nGet the cached multiplicative inverse of the direction of …\nGet the cached multiplicative inverse of the direction of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the smallest <code>Aabb2d</code> containing the given set of …\nComputes a <code>BoundingCircle</code> containing the given set of …\nComputes the smallest <code>Aabb3d</code> containing the given set of …\nComputes a <code>BoundingSphere</code> containing the given set of …\nConstruct a <code>RayCast2d</code> from a <code>Ray2d</code> and max distance.\nConstruct an <code>AabbCast2d</code> from an <code>Aabb2d</code>, <code>Ray2d</code>, and max …\nConstruct a <code>BoundingCircleCast</code> from a <code>BoundingCircle</code>, <code>Ray2d</code>…\nConstruct a <code>RayCast3d</code> from a <code>Ray3d</code> and max distance.\nConstruct an <code>AabbCast3d</code> from an <code>Aabb3d</code>, <code>Ray3d</code>, and max …\nConstruct a <code>BoundingSphereCast</code> from a <code>BoundingSphere</code>, <code>Ray3d</code>…\nIncrease the size of the bounding volume in each direction …\nReturns the half size of the bounding volume.\nCheck if a volume intersects with this intersection test\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum, conventionally top-right, point of the box\nThe maximum point of the box\nThe maximum distance for the ray\nThe maximum distance for the ray\nComputes the smallest bounding volume that contains both …\nThe minimum, conventionally bottom-left, point of the box\nThe minimum point of the box\nConstructs an AABB from its center and half-size.\nConstructs a bounding circle from its center and radius.\nConstructs an AABB from its center and half-size.\nConstructs a bounding sphere from its center and radius.\nConstruct a <code>RayCast2d</code> from an origin, <code>Direction2d</code>, and max …\nConstruct an <code>AabbCast2d</code> from an <code>Aabb2d</code>, origin, <code>Direction2d</code>…\nConstruct a <code>BoundingCircleCast</code> from a <code>BoundingCircle</code>, …\nConstruct a <code>RayCast3d</code> from an origin, <code>Direction3d</code>, and max …\nConstruct an <code>AabbCast3d</code> from an <code>Aabb3d</code>, origin, <code>Direction3d</code>…\nConstruct a <code>BoundingSphereCast</code> from a <code>BoundingSphere</code>, …\nGet the radius of the bounding circle\nGet the radius of the bounding sphere\nThe ray for the test\nThe ray along which to cast the bounding volume\nThe ray along which to cast the bounding volume\nThe ray for the test\nThe ray along which to cast the bounding volume\nThe ray along which to cast the bounding volume\nDecrease the size of the bounding volume in each direction …\nThe sphere\nThe sphere that is being cast\nGet the distance at which the <code>BoundingSphere</code>s collide, if …\nGet the distance of an intersection with a <code>BoundingSphere</code>, …\nComputes the visible surface area of the bounding volume. …\nA spline interpolated continuously across the nearest four …\nA spline composed of a single cubic Bezier curve.\nA spline interpolated continuously across the nearest four …\nA collection of <code>CubicSegment</code>s chained into a curve.\nImplement this on cubic splines that can generate a curve …\nA spline interpolated continuously between the nearest two …\nA segment of a cubic curve, used to hold precomputed …\nA point in space of any dimension that supports the math …\nInstantaneous acceleration of a point at parametric value <code>t</code>…\nCompute the second derivative with respect to t at <code>t</code>. This …\nGiven a <code>time</code> within <code>0..=1</code>, returns an eased value that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the curve split into <code>subdivisions</code>, sampling …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nA flexible iterator used to sample curves with arbitrary …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nCreate a new cubic Bezier curve from sets of control …\nCreate a new Hermite curve from sets of control points.\nBuild a new Cardinal spline.\nBuild a new Cardinal spline.\nConstruct a cubic Bezier curve for animation easing, with …\nBuild a new Catmull-Rom spline, the special case of a …\nInstantaneous position of a point at parametric value <code>t</code>.\nCompute the position of a point on the cubic curve at the …\nThe list of segments contained in this <code>CubicCurve</code>.\nBuild a <code>CubicCurve</code> by computing the interpolation …\nInstantaneous velocity of a point at parametric value <code>t</code>.\nCompute the first derivative with respect to t at <code>t</code>. This …\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA polygon with a variable number of vertices, allocated on …\nA series of connected line segments in 2D space, allocated …\nA series of connected line segments in 3D space, allocated …\nA 2D capsule primitive, also known as a stadium or pill …\nA 3D capsule primitive. A three-dimensional capsule is …\nA circle primitive\nA clockwise winding order\nA cone primitive.\nA conical frustum primitive. A conical frustum can be …\nA counterclockwise winding order\nA cuboid primitive, more commonly known as a box.\nA cylinder primitive\nA normalized vector pointing in a direction in 2D space\nA normalized vector pointing in a direction in 3D space\nAn ellipse primitive\nA torus that has no hole but also doesn’t intersect …\nThe length of the direction vector is <code>std::f32::INFINITY</code>.\nA torus with non-geometric properties like a minor or …\nAn invalid winding order indicating that it could not be …\nAn error indicating that a direction is invalid.\nAn infinite line along a direction in 2D space.\nAn infinite line along a direction in 3D space.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Z axis.\nThe length of the direction vector is <code>NaN</code>.\nAn unbounded plane in 2D space. It forms a separating …\nAn unbounded plane in 3D space. It forms a separating …\nA polygon with N vertices.\nA series of connected line segments in 2D space.\nA series of connected line segments in 3D space.\nA marker trait for 2D primitives\nA marker trait for 3D primitives\nA rectangle primitive\nA polygon where all vertices lie on a circle, equally far …\nA torus that has a ring. The major radius is greater than …\nA segment of a line along a direction in 2D space.\nA segment of a line along a direction in 3D space.\nA sphere primitive\nA self-intersecting torus. The major radius is less than …\nA torus primitive, often representing a ring or donut shape\nThe type of torus determined by the minor and major radii\nA triangle in 2D space\nThe winding order for a set of points\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nThe length of the direction vector is zero or very close …\nGet the area of the circle\nGet the area of the ellipse\nGet the area of the triangle\nGet the area of the rectangle\nGet the area of the regular polygon\nGet the surface area of the sphere\nGet the surface area of the cuboid\nGet the total surface area of the cylinder\nGet the surface area of the capsule\nGet the total surface area of the cone\nGet the surface area of the torus. Note that this only …\nGet the base of the cylinder as a <code>Circle</code>\nGet the base of the cone as a <code>Circle</code>\nGet the surface area of one base of the cylinder\nGet the surface area of the base of the cone\nCompute the circle passing through all three vertices of …\nThe circumcircle on which all vertices lie\nGet the radius of the circumcircle on which all vertices …\nFinds the point on the circle that is closest to the given …\nFinds the point on the rectangle that is closest to the …\nFinds the point on the sphere that is closest to the given …\nFinds the point on the cuboid that is closest to the given …\nReturns the default <code>Circle</code> with a radius of <code>0.5</code>.\nReturns the default <code>Ellipse</code> with a half-width of <code>1.0</code> and a …\nReturns the default <code>Plane2d</code> with a normal pointing in the …\nReturns the default <code>Triangle2d</code> with the vertices <code>[0.0, 0.5]</code>…\nReturns the default <code>Rectangle</code> with a half-width and …\nReturns the default <code>RegularPolygon</code> with six sides (a …\nReturns the default <code>Capsule2d</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Sphere</code> with a radius of <code>0.5</code>.\nReturns the default <code>Plane3d</code> with a normal pointing in the …\nReturns the default <code>Cuboid</code> with a width, height, and depth …\nReturns the default <code>Cylinder</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Capsule3d</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Torus</code> with a minor radius of <code>0.25</code> and …\nGet the diameter of the circle\nGet the diameter of the sphere\nThe direction of the line. The line extends infinitely in …\nThe direction of the line segment\nThe direction of the line\nThe direction of the line\nGet the external angle of the regular polygon in degrees.\nGet the external angle of the regular polygon in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Rectangle</code> from two corner points\nCreate a new <code>Cuboid</code> from two corner points\nCreates an <code>InvalidDirectionError</code> from the length of an …\nCreate a new <code>Segment2d</code> from its endpoints and compute its …\nCreate a new <code>Plane3d</code> based on three points and compute the …\nCreate a new <code>Segment3d</code> from its endpoints and compute its …\nCreate a new <code>Ellipse</code> from a given full size.\nCreate a new <code>Rectangle</code> from a given full size\nCreate a new <code>Cuboid</code> from a given full size\nCreate a direction from its <code>x</code> and <code>y</code> components.\nCreate a direction from its <code>x</code>, <code>y</code>, and <code>z</code> components.\nThe half height of the cylinder\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemicircles\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemispheres\nHalf of the width and height of the ellipse.\nHalf of the width and height of the rectangle\nHalf of the width, height and depth of the cuboid\nThe height of the cone\nThe height of the frustum\nGet the inner radius of the torus. For a ring torus, this …\nGet the inradius or apothem of the regular polygon. This …\nGet the internal angle of the regular polygon in degrees.\nGet the internal angle of the regular polygon in radians.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>TorusKind</code> determined by the minor and major radii.\nGet the surface area of the side of the cylinder, also …\nGet the surface area of the side of the cone, also known …\nThe distance from the center of the torus to the center of …\nThe radius of the tube of the torus\nCreate a direction from a finite, nonzero <code>Vec2</code>.\nCreate a new <code>Circle</code> from a <code>radius</code>\nCreate a new <code>Ellipse</code> from half of its width and height.\nCreate a new <code>Plane2d</code> from a normal\nCreate a new <code>Segment2d</code> from a direction and full length of …\nCreate a new <code>Polyline2d</code> from its vertices\nCreate a new <code>BoxedPolyline2d</code> from its vertices\nCreate a new <code>Triangle2d</code> from points <code>a</code>, <code>b</code>, and <code>c</code>\nCreate a new <code>Rectangle</code> from a full width and height\nCreate a new <code>Polygon</code> from its vertices\nCreate a new <code>BoxedPolygon</code> from its vertices\nCreate a new <code>RegularPolygon</code> from the radius of the …\nCreate a new <code>Capsule2d</code> from a radius and length\nCreate a direction from a finite, nonzero <code>Vec3</code>.\nCreate a new <code>Sphere</code> from a <code>radius</code>\nCreate a new <code>Plane3d</code> from a normal\nCreate a new <code>Segment3d</code> from a direction and full length of …\nCreate a new <code>Polyline3d</code> from its vertices\nCreate a new <code>BoxedPolyline3d</code> from its vertices\nCreate a new <code>Cuboid</code> from a full x, y, and z length\nCreate a new <code>Cylinder</code> from a radius and full height\nCreate a new <code>Capsule3d</code> from a radius and length\nCreate a new <code>Torus</code> from an inner and outer radius.\nCreate a direction from a finite, nonzero <code>Vec2</code>, also …\nCreate a direction from a finite, nonzero <code>Vec3</code>, also …\nCreate a <code>Direction2d</code> from a <code>Vec2</code> that is already …\nCreate a <code>Direction3d</code> from a <code>Vec3</code> that is already …\nThe normal of the plane. The plane will be placed …\nThe normal of the plane. The plane will be placed …\nGet the outer radius of the torus. This corresponds to the …\nGet the perimeter or circumference of the circle\nGet the perimeter of the triangle\nGet the perimeter of the rectangle\nGet the perimeter of the regular polygon. This is the sum …\nGet the position of the first point on the line segment\nGet the position of the first point on the line segment\nGet the position of the second point on the line segment\nGet the position of the second point on the line segment\nThe radius of the circle\nThe radius of the capsule\nThe radius of the sphere\nThe radius of the cylinder\nThe radius of the capsule\nThe radius of the base\nThe radius of the base of the frustum\nThe radius of the top of the frustum\nReverse the <code>WindingOrder</code> of the triangle by swapping the …\nReturns the length of the semi-major axis. This …\nReturns the length of the semi-minor axis. This …\nGet the length of one side of the regular polygon\nThe number of sides\nGet the size of the rectangle\nGet the size of the cuboid\nGet the slant height of the cone, the length of the line …\nGet the part connecting the hemispherical ends of the …\nReturns an iterator over the vertices of the regular …\nThe vertices of the polyline\nThe vertices of the polyline\nThe vertices of the triangle\nThe vertices of the <code>Polygon</code>\nThe vertices of the <code>BoxedPolygon</code>\nThe vertices of the polyline\nThe vertices of the polyline\nGet the volume of the sphere\nGet the volume of the cuboid\nGet the volume of the cylinder\nGet the volume of the capsule\nGet the volume of the cone\nGet the volume of the torus. Note that this only produces …\nGet the <code>WindingOrder</code> of the triangle\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.")