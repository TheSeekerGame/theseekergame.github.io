searchState.loadedDescShard("bevy_app", 0, "This crate is about everything concerning the …\nPlugins are being added.\nA container of app logic and data.\nAn event that indicates the <code>App</code> should exit. This will …\nA strongly-typed class of labels used to identify an <code>App</code>.\nGenerates an impl of the <code>AppLabel</code> trait.\nCleanup has been executed for all plugins added.\nA type representing an unsafe function that returns a …\nAn object safe version of <code>Eq</code>. This trait is automatically …\nGenerates a dynamic plugin entry point function for the …\nFinish has been executed for all plugins added.\nRuns first in the schedule.\nRuns first in the <code>FixedMain</code> schedule.\nThe schedule that runs last in <code>FixedMain</code>\nThe schedule that contains systems which only run after a …\nDefines the schedules to be run for the <code>FixedMain</code> …\nThe schedule that runs after the <code>FixedUpdate</code> schedule, for …\nThe schedule that contains logic that must run before …\nThe schedule that contains most gameplay logic.\nA shorthand for <code>Interned&lt;dyn AppLabel&gt;</code>.\nRuns last in the schedule.\nIndicates that the <code>App</code>’s schedule should run repeatedly.\nThe schedule that contains the app logic that is evaluated …\nDefines the schedules to be run for the <code>Main</code> schedule, …\nInitializes the <code>Main</code> schedule, sub schedules, and …\nIndicates that the <code>App</code>’s schedule should run only once.\nA collection of Bevy app logic and configuration.\nCombines multiple <code>Plugin</code>s into a single unit.\nFacilitates the creation and configuration of a <code>PluginGroup</code>…\nTypes that represent a set of <code>Plugin</code>s.\nPlugins state in the application\nThe schedule that runs once after <code>Startup</code>.\nThe schedule that contains logic that must run after <code>Update</code>…\nThe schedule that runs before <code>Startup</code>.\nThe schedule that contains logic that must run before …\nAll plugins already added are ready.\nRuns the <code>FixedMain</code> schedule in a loop according until all …\nDetermines the method used to run an <code>App</code>’s <code>Schedule</code>.\nConfigures an <code>App</code> to run its <code>Schedule</code> according to a given …\nThe schedule that contains scene spawning.\nThe schedule that runs once when the app starts.\nRuns state transitions.\nA <code>SubApp</code> contains its own <code>Schedule</code> and <code>World</code> separate from …\nThe schedule that contains app logic. Ideally containing …\nAdds the plugin <code>Plugin</code> at the end of this …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> after the plugin …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> before the plugin …\nSetup the application to manage events of type <code>T</code>.\nAdds one or more <code>Plugin</code>s.\nAdds a new <code>schedule</code> to the <code>App</code>.\nAdds a system to the given schedule in this app’s …\nWhen doing ambiguity checking this ignores systems that …\nWhen doing ambiguity checking this ignores systems that …\nThe <code>SubApp</code>’s instance of <code>App</code>\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nConfigures the <code>App</code> to which this plugin is added.\nConfigures the <code>Plugin</code>s that are to be added.\nRun <code>Plugin::cleanup</code> for each plugin. This is usually …\nRuns after all plugins are built and finished, but before …\nRuns after all plugins are built and finished, but before …\nApplies the provided <code>ScheduleBuildSettings</code> to all …\nConfigures a collection of system sets in the provided …\nDisables a <code>Plugin</code>, preventing it from being added to the …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nClones this <code>AppLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nApplies the function to the <code>Schedule</code> associated with <code>label</code>.\nCreates a new empty <code>App</code> with minimal default configuration.\nEnables a <code>Plugin</code>.\nExtracts data from main world to this sub-app.\nRun <code>Plugin::finish</code> for each plugin. This is usually called …\nFinish adding this plugin to the <code>App</code>, once all plugins …\nFinish adding this plugin to the <code>App</code>, once all plugins …\nConsumes the <code>PluginGroupBuilder</code> and builds the contained …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a vector of references to any plugins of type <code>T</code> …\nGets read-only access to the <code>Schedule</code> with the provided …\nGets read-write access to a <code>Schedule</code> with the provided …\nRetrieves a <code>SubApp</code> inside this <code>App</code> with the given label, …\nRetrieves a <code>SubApp</code> inside this <code>App</code> with the given label, …\nSuppress warnings and errors that would result from …\nInitialize a non-send <code>Resource</code> with standard starting …\nInitialize a <code>Resource</code> with standard starting values by …\nInitializes a new empty <code>schedule</code> to the <code>App</code> under the …\nInitializes a <code>State</code> with standard starting values.\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nAdds the given <code>schedule</code> after the <code>after</code> schedule\nInserts a non-send resource to the app.\nInserts a <code>Resource</code> to the current <code>App</code> and overwrites any …\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nInserts a specific <code>State</code> to the current <code>App</code> and overrides …\nInserts an existing sub app into the app\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nChecks if a <code>Plugin</code> has already been added.\nIf the plugin can be meaningfully instantiated several …\nIf the plugin can be meaningfully instantiated several …\nThe labels to run for the main phase of the <code>Main</code> schedule …\nThe labels to run for the <code>FixedMain</code> schedule (in the order …\nThe schedule that systems are added to by default.\nConfigures a name for the <code>Plugin</code> which is primarily used …\nConfigures a name for the <code>Plugin</code> which is primarily used …\nConfigures a name for the <code>PluginGroup</code> which is primarily …\nConfigures a name for the <code>PluginGroup</code> which is primarily …\nCreates a new <code>App</code> with some default structure to enable …\nCreates a new <code>SubApp</code>.\nCheck the state of all plugins already added to this app. …\nHas the plugin finished its setup? This can be useful for …\nHas the plugin finished its setup? This can be useful for …\nRegisters the type <code>T</code> in the <code>TypeRegistry</code> resource, adding …\nAdds the type data <code>D</code> to type <code>T</code> in the <code>TypeRegistry</code> …\nRemoves a sub app from the app. Returns <code>None</code> if the label …\nStarts the application by calling the app’s runner …\nRuns the <code>SubApp</code>’s default schedule.\nA system that runs the fixed timestep’s “main schedule…\nSee <code>RunMode::Loop</code>.\nA system that runs the “main schedule”\nDetermines whether the <code>Schedule</code> is run once or repeatedly.\nSee <code>RunMode::Once</code>.\nThe runner function is primarily responsible for managing …\nSets the value of the given <code>Plugin</code>, if it exists\nSets the value of the given <code>Plugin</code>, if it exists\nSets the value of the given <code>Plugin</code>, if it exists.\nSets the function that will be called when the app is run.\nStart a new builder for the <code>PluginGroup</code>.\nThe labels to run for the startup phase of the <code>Main</code> …\nRetrieves a <code>SubApp</code> stored inside this <code>App</code>.\nRetrieves a <code>SubApp</code> stored inside this <code>App</code>.\nAdvances the execution of the <code>Schedule</code> by one cycle.\nThe main ECS <code>World</code> of the <code>App</code>. This stores and provides …\nThe minimum <code>Duration</code> to wait after a <code>Schedule</code> has …")