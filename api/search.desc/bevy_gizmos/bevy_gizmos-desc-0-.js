searchState.loadedDescShard("bevy_gizmos", 0, "This crate adds an immediate mode drawing api to Bevy for …\nA trait adding <code>init_gizmo_group&lt;T&gt;()</code> to the app\nA <code>Plugin</code> that provides an immediate mode drawing api for …\nLabel for the the render systems handling the\nAdds gizmos to the <code>Transparent2d</code> render phase\nAdds gizmos to the <code>Transparent3d</code> render phase\nA module adding debug visualization of <code>Aabb</code>s.\nAdditional <code>Gizmos</code> Functions – Arcs\nAdditional <code>Gizmos</code> Functions – Arrows\nAdditional <code>Gizmos</code> Functions – Circles\nA module for the <code>GizmoConfig&lt;T&gt;</code> <code>Resource</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA module for the <code>Gizmos</code> <code>SystemParam</code>.\nRegisters <code>GizmoConfigGroup</code> <code>T</code> in the app enabling the use …\nInsert the <code>GizmoConfigGroup</code> in the app with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>bevy_gizmos</code> prelude.\nA module for rendering each of the 2D and 3D …\nThe <code>GizmoConfigGroup</code> used for debug visualizations of <code>Aabb</code> …\nA <code>Plugin</code> that provides visualization of <code>Aabb</code>s for …\nAdd this <code>Component</code> to an entity to draw its <code>Aabb</code> component.\nThe color of the box.\nThe default color for bounding box gizmos.\nDraws all bounding boxes in the scene when set to <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA builder returned by <code>Gizmos::arc_2d</code>.\nA builder returned by <code>Gizmos::arc_2d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of line-segments for this arc.\nSet the number of line-segments for this arc.\nA builder returned by <code>Gizmos::arrow</code> and <code>Gizmos::arrow_2d</code>\nDraws the arrow, by drawing lines with the stored <code>Gizmos</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChange the length of the tips to be <code>length</code>. The default …\nA builder returned by <code>Gizmos::ellipse_2d</code>.\nA builder returned by <code>Gizmos::ellipse</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of line-segments for this ellipse.\nSet the number of line-segments for this ellipse.\nThe default gizmo config group.\nA struct that stores configuration for gizmos.\nA trait used to create gizmo configs groups.\nA <code>Resource</code> storing <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> structs\nReturns <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> associated with …\nReturns mutable <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> …\nHow closer to the camera than real geometry the line …\nSet to <code>false</code> to stop drawing gizmos.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> associated with …\nReturns mutable <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> …\nInserts <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> replacing old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all <code>GizmoConfig</code>s.\nReturns an iterator over all <code>GizmoConfig</code>s, by mutable …\nApply perspective to gizmo lines.\nLine width specified in pixels.\nDescribes which rendering layers gizmos will be rendered …\nA <code>SystemParam</code> for drawing gizmos.\nA builder returned by <code>Gizmos::sphere</code>.\nDraw an arc, which is a part of the circumference of a …\nDraw an arc, which is a part of the circumference of a …\nDraw an arrow in 3D, from <code>start</code> to <code>end</code>. Has four tips for …\nDraw an arrow in 2D (on the xy plane), from <code>start</code> to <code>end</code>.\nDraw a circle in 3D at <code>position</code> with the flat side facing …\nDraw a circle in 2D.\nSet the number of line-segments per circle for this sphere.\nThe currently used <code>GizmoConfig</code>\nThe currently used <code>GizmoConfigGroup</code>\nDraw a wireframe cube in 3D.\nDraw an ellipse in 3D at <code>position</code> with the flat side …\nDraw an ellipse in 2D.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraw a line in 3D from <code>start</code> to <code>end</code>.\nDraw a line in 2D from <code>start</code> to <code>end</code>.\nDraw a line in 3D with a color gradient from <code>start</code> to <code>end</code>.\nDraw a line in 2D with a color gradient from <code>start</code> to <code>end</code>.\nDraw a line in 3D made of straight segments between the …\nDraw a line in 2D made of straight segments between the …\nDraw a line in 3D made of straight segments between the …\nDraw a line in 2D made of straight segments between the …\nDraws the longest arc between two points (<code>from</code> and <code>to</code>) …\nDraw a line in 3D from <code>start</code> to <code>start + vector</code>.\nDraw a line in 2D from <code>start</code> to <code>start + vector</code>.\nDraw a line in 3D with a color gradient from <code>start</code> to …\nDraw a line in 2D with a color gradient from <code>start</code> to …\nDraw a wireframe rectangle in 3D.\nDraw a wireframe rectangle in 2D.\nDraws the shortest arc between two points (<code>from</code> and <code>to</code>) …\nDraw a wireframe sphere in 3D made out of 3 circles around …\nA module for rendering each of the 2D <code>bevy_math::primitives</code>…\nA module for rendering each of the 3D <code>bevy_math::primitives</code>…\nA trait for rendering 2D geometric primitives (<code>P</code>) with …\nBuilder for configuring the drawing options of <code>Line2d</code>.\nThe output of <code>primitive_2d</code>. This is a builder to set …\nBuilder for configuring the drawing options of <code>Segment2d</code>.\nSet the drawing mode of the line (arrow vs. plain line)\nSet the drawing mode of the line (arrow vs. plain line)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRenders a 2D primitive with its associated details.\nBuilder for configuring the drawing options of <code>Capsule3d</code>.\nBuilder for configuring the drawing options of <code>Cone</code>.\nBuilder for configuring the drawing options of …\nBuilder for configuring the drawing options of <code>Cylinder</code>.\nA trait for rendering 3D geometric primitives (<code>P</code>) with …\nThe output of <code>primitive_3d</code>. This is a builder to set …\nBuilder for configuring the drawing options of <code>Sphere</code>.\nBuilder for configuring the drawing options of <code>Sphere</code>.\nBuilder for configuring the drawing options of <code>Torus</code>.\nSet the number of axis used to hint the plane.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of segments in the major (ring) direction.\nSet the number of segments in the minor (tube) direction.\nRenders a 3D primitive with its associated details.\nSet the number of segments used to hint the plane.\nSet the length of segments used to hint the plane.\nSet the number of segments used to approximate the sphere …\nSet the number of segments used to approximate the …\nSet the number of segments used to approximate the capsule …\nSet the number of segments used to approximate the cone …\nSet the number of segments used to approximate the curved …")