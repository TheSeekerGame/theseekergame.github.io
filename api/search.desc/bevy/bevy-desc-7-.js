searchState.loadedDescShard("bevy", 7, "Returns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order, with …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the table.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code>.\nCreates an empty <code>HashMap</code> using the given allocator.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code> using the given allocator.\nExperimental and unsafe <code>RawTable</code> API. This module is only …\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nReturns a reference to the <code>RawTable</code> used underneath <code>HashMap</code>…\nReturns a reference to the <code>RawTable</code> used underneath <code>HashSet</code>…\nReturns a mutable reference to the <code>RawTable</code> used …\nReturns a mutable reference to the <code>RawTable</code> used …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate. …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the table with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nShrinks the capacity of the table as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity.\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity using …\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe layout of the allocation request that failed.\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash and matching …\nAccess an immutable entry by hash and matching function.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an immutable entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an immutable entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns a …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntryRef’s …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nSet the value of an entry with a custom hasher function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nTake ownership of the key.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntryRef into a mutable reference to …\nGets a reference to the key in the entry.\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it. Keeps …\nTakes the value out of the entry, and returns it. Keeps …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map. …\nTake the ownership of the key and value from the map. …\nReplaces the entry, returning the old key and value. The …\nReplaces the entry, returning the old key and value. The …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nReplaces the key in the hash map with the key used to …\nReplaces the key in the hash map with the key used to …\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nEnsures a value is in the entry by inserting if it was …\nTakes the value out of the entry, and returns it. Keeps …\nReplaces the entry, returning the old value. The new value …\nType representing the absence of an entry, as returned by …\nA draining iterator over the items of a <code>HashTable</code>.\nA view into a single entry in a table, which may either be …\nA draining iterator over entries of a <code>HashTable</code> which don…\nLow-level hash table with explicit hashing.\nAn owning iterator over the entries of a <code>HashTable</code> in …\nAn iterator over the entries of a <code>HashTable</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashTable</code> in …\nAn occupied entry.\nA view into an occupied entry in a <code>HashTable</code>. It is part …\nA vacant entry.\nA view into a vacant entry in a <code>HashTable</code>. It is part of …\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, replacing any existing value …\nInserts a new element into the table with the hash that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the VacantEntry into a mutable reference to the …\nConverts the AbsentEntry into a mutable reference to the …\nEnsures a value is in the entry by inserting if it was …\nEnsures a value is in the entry by inserting the result of …\nTakes the value out of the entry, and returns it along …\nA reference to a hash table bucket containing a <code>T</code>.\nA reference to an empty bucket into which an can be …\nIterator which consumes elements without freeing the table …\nIterator which consumes a table and returns elements.\nIterator which returns a raw pointer to every full bucket …\nIterator over occupied buckets that could match a given …\nA raw hash table with an unsafe API.\nReturn the information about memory allocated by the table.\nReturns a reference to the underlying allocator.\nReturns a unique mutable reference to the <code>value</code>.\nAcquires the underlying raw pointer <code>*mut T</code> to <code>data</code>.\nReturns a shared immutable reference to the <code>value</code>.\nReturns a pointer to an element in the table.\nReturns the index of a bucket from a <code>Bucket</code>.\nReturns the number of buckets in the table.\nReturns the number of elements the map can hold without …\nRemoves all elements from the table without freeing the …\nMarks all table buckets as empty without dropping their …\nVariant of <code>clone_from</code> to use when a hasher is available.\nCopies <code>size_of&lt;T&gt;</code> bytes from <code>other</code> to <code>self</code>. The source and …\nReturns pointer to one past last <code>data</code> element in the table …\nReturns pointer to start of data table.\nReturns an iterator which removes all elements from the …\nReturns an iterator which removes all elements from the …\nErases an element from the table, dropping it in place.\nFinds and erases an element from the table, dropping it in …\nSearches for an element in the table.\nSearches for an element in the table. If the element is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to an element in the table.\nAttempts to get mutable references to <code>N</code> entries in the …\nGets a mutable reference to an element in the table.\nInserts a new element into the table, and returns its raw …\nInserts a new element into the table, and returns a …\nInserts a new element into the table in the given slot, …\nInserts a new element into the table, without growing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator which consumes all elements from the …\nChecks whether the bucket at <code>index</code> is full.\nReturns <code>true</code> if the table contains no elements.\nReturns an iterator over every element in the table. It is …\nReturns an iterator over occupied buckets that could match …\nReturns the number of elements in the table.\nCreates a new empty hash table without allocating any …\nCreates a new empty hash table without allocating any …\nRefresh the iterator so that it reflects an insertion into …\nRefresh the iterator so that it reflects a removal from …\nRemoves an element from the table, returning it.\nFinds and removes an element from the table, returning it.\nTemporary removes a bucket, applying the given function to …\nEnsures that at least <code>additional</code> items can be inserted …\nShrinks the table to fit <code>max(self.len(), min_size)</code> …\nAttempts to insert a new element without growing the table …\nTries to ensure that at least <code>additional</code> items can be …\nAttempts to allocate a new hash table with at least enough …\nAttempts to allocate a new hash table using the given …\nAllocates a new hash table with at least enough capacity …\nAllocates a new hash table using the given allocator, with …\nA trait for internable values.\nAn interned value. Will stay valid until the end of the …\nA thread-safe interner which can be used to create …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the <code>Interned&lt;T&gt;</code> corresponding to <code>value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a static reference to <code>self</code>, possibly leaking …\nCreates a new empty interner\nReturns <code>true</code> if the two references point to the same value.\nFeeds the reference to the hasher.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn object safe version of <code>Hash</code>. This trait is …\nCasts the type to <code>dyn Any</code>.\nCasts the type to <code>dyn Any</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given <code>Hasher</code>.\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nAn error type returned when an integer cannot be parsed …\nAn error type returned when a checked integral type …\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nMarker type for a directed graph.\nEdge direction.\nEdge direction.\nA graph’s edge type determines whether it has directed …\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\nAn <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.\nAn <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.\nConvert an element like <code>(i, j)</code> or <code>(i, j, w)</code> into a triple …\nAn <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.\nAn <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.\nMarker type for an undirected graph.\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd a node (also called vertex) with associated data <code>weight</code>…\nSimple adjacency list.\nGraph algorithms.\nReturn the current node and edge capacity of the graph.\nRemove all nodes and edges\nRemove all edges\nLookup if there is an edge from <code>a</code> to <code>b</code>.\nCompressed Sparse Row (CSR) is a sparse adjacency matrix …\nGraph traits for associated data and graph construction.\nSimple graphviz dot file format output.\nReturn the number of edges in the graph.\nAccess the source and target nodes for <code>e</code>.\nReturn an iterator over the edge indices of the graph\nCreate an iterator over all edges, in indexed order.\nAccess the weight for edge <code>e</code>.\nAccess the weight for edge <code>e</code>, mutably.\nReturn an iterator yielding immutable access to all edge …\nReturn an iterator yielding mutable access to all edge …\nReturn an iterator of all edges of <code>a</code>.\nReturn an iterator over all the edges connecting <code>a</code> and <code>b</code>.\nReturn an iterator of all edges of <code>a</code>, in the specified …\nExtend the graph from an iterable of edges.\nReturn an iterator over either the nodes without edges to …\nCreate a new <code>Graph</code> by mapping nodes and edges. A node or …\nLookup an edge from <code>a</code> to <code>b</code>.\nLookup an edge between <code>a</code> and <code>b</code>, in either direction.\nAccessor for data structure internals: the first edge in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Graph</code> from an iterable of edges.\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\n<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure where node …\nReturn <code>0</code> for <code>Outgoing</code> and <code>1</code> for <code>Incoming</code>.\nIndex the <code>Graph</code> by two indices, any combination of node or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the graph into either undirected or directed. No …\nConvert the graph into a vector of Nodes and a vector of …\nWhether the graph has directed edges or not.\nCreate a new <code>Graph</code> by mapping node and edge weights to new …\n<code>MatrixGraph&lt;N, E, Ty, NullN, NullE, Ix&gt;</code> is a graph …\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <code>Graph</code> with directed edges.\nCreate a new <code>Graph</code> with undirected edges.\nAccessor for data structure internals: the next edge for …\nReturn the number of nodes (vertices) in the graph.\nReturn an iterator over the node indices of the graph.\nAccess the weight for node <code>a</code>.\nAccess the weight for node <code>a</code>, mutably.\nReturn an iterator yielding immutable access to all node …\nReturn an iterator yielding mutable access to all node …\nOperators for creating new graphs from existings ones.\nReturn the opposite <code>Direction</code>.\nCommonly used items.\nAccess the internal edge array.\nAccess the internal node array.\nRemove an edge and return its edge weight, or <code>None</code> if it …\nRemove <code>a</code> from the graph if it exists, and return its …\nReserves capacity for at least <code>additional</code> more edges to be …\nReserves the minimum capacity for exactly <code>additional</code> more …\nReserves the minimum capacity for exactly <code>additional</code> more …\nReserves capacity for at least <code>additional</code> more nodes to be …\nKeep all edges that return <code>true</code> from the <code>visit</code> closure, …\nKeep all nodes that return <code>true</code> from the <code>visit</code> closure, …\nReverse the direction of all edges\nShrinks the capacity of the graph as much as possible.\nShrinks the capacity of the underlying edges collection as …\nShrinks the capacity of the underlying nodes collection as …\n<code>StableGraph</code> keeps indices stable across removals.\n<code>UnionFind&lt;K&gt;</code> is a disjoint-set data structure.\nAdd or update an edge from <code>a</code> to <code>b</code>. If the edge already …\nGraph traits and graph traversals.\nCreate a new <code>Graph</code> with estimated capacity.\nThe default integer type for graph indices. <code>u32</code> is the …\nAdjacency list edge index type, a pair of integers.\nA reference to an edge of the graph.\nAn iterator over the <code>EdgeReference</code> of all the edges of the …\nTrait for the unsigned integer type used for node and edge …\nAn adjacency list with labeled edges.\nAn iterator over the indices of the neighbors of a node.\nAdjacency list node index type, a plain integer.\nAn iterator over all node indices in the graph.\nAn Iterator over the indices of the outgoing edges from a …\nIterator over the <code>EdgeReference</code> of the outgoing edges from …\nA very simple adjacency list with no node or label weights.\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdds a new node to the list. This allocates a new <code>Vec</code> and …\nAdds a new node to the list. This allocates a new <code>Vec</code> and …\nAdds a new node to the list by giving its list of …\nAdds a new node to the list. This allocates a new <code>Vec</code> and …\nRemoves all nodes and edges from the list.\nLookups whether there is an edge from <code>a</code> to <code>b</code>.\nReturns the number of edges in the list\nReturns the number of edges in the list\nAccesses the source and target of edge <code>e</code>\nReturns an iterator over all edge indices of the graph.\nAccesses the weight of edge <code>e</code>\nAccesses the weight of edge <code>e</code>\nLookups whether there is an edge from <code>a</code> to <code>b</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of all nodes with an edge starting …\nCreates a new, empty adjacency list.\nReturns the number of nodes in the list\nReturns an iterator over all node indices of the graph.\nUpdates or adds an edge from <code>a</code> to <code>b</code> to the graph, with its …\nCreates a new, empty adjacency list tailored for <code>nodes</code> …\nAn algorithm error: a cycle was found in the graph.\nWorkspace for a graph traversal.\nA floating-point measure.\nComputed <em>matching</em> of the graph.\nAssociated data that can be used for measures (such as …\nAn algorithm error: a cycle of negative weights was found …\nSome measure of positive numbers, assuming positive …\nA reusable state for computing the <em>strongly connected </em>…\nA floating-point measure that can be computed from <code>usize</code> …\nReturns an iterator that produces all simple paths from …\n[Generic] A* shortest path algorithm.\nBellman-Ford algorithms.\n[Generic] Compute shortest paths from node <code>source</code> to all …\nGraph Condense every strongly connected component into a …\n[Generic] Return the number of connected components of the …\nReturns <code>true</code> if given edge is in the matching, or <code>false</code> …\nReturns <code>true</code> if given node is in the matching, or <code>false</code> …\n[Generic] Dijkstra’s shortest path algorithm.\nCompute dominators of a control-flow graph.\nIterates over all edges from the matching.\n[Generic] Find the path of a negative cycle reachable from …\n[Generic] Floyd–Warshall algorithm is an algorithm for …\n[Generic] Ford-Fulkerson algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n[Generic] Finds a feedback arc set: a set of edges in the …\n[Generic] Compute a <em>matching</em> using a greedy heuristic.\n[Generic] Check if there exists a path starting at <code>from</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the graph is bipartite. A graph is …\n[Generic] Return <code>true</code> if the input directed graph contains …\n[Generic] Return <code>true</code> if the input graph contains a cycle.\nReturns <code>true</code> if the number of matched <strong>edges</strong> is 0.\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\nReturns <code>true</code> if the matching is perfect.\n[Generic] k’th shortest path algorithm.\n[Generic] Compute the <em>strongly connected components</em> using …\nGets the number of matched <strong>edges</strong>.\nGets the matched counterpart of given node, if there is …\n[Generic] Compute the <em>maximum matching</em> using Gabow’s …\nMinimum Spanning Tree algorithms.\n[Generic] Compute a <em>minimum spanning tree</em> of a graph.\nCreates a new <code>TarjanScc</code>\nReturns the index of the component in which v has been …\nReturn a node id that participates in the cycle\nIterates over all nodes from the matching.\n[Generic] Page Rank algorithm.\n[Generic] Compute the <em>strongly connected components</em> using …\nRenamed to <code>kosaraju_scc</code>.\nUsing the VF2 algorithm, examine both syntactic and …\n[Generic] Compute the <em>strongly connected components</em> using …\n[Generic] Perform a topological sort of a directed graph.\nCompute the transitive reduction and closure of a directed …\n[Generic] A* shortest path algorithm.\n[Generic] Compute shortest paths from node <code>source</code> to all …\n[Generic] Find the path of a negative cycle reachable from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n[Generic] Dijkstra’s shortest path algorithm.\nIterator for nodes dominated by a given node.\nThe dominance relation for some graph and root.\nIterator for a node’s dominators.\nIterate over all of the given node’s dominators …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the immediate dominator of the given node.\nIterate over all nodes immediately dominated by the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the root node used to construct these dominance …\nThis is an implementation of the engineered “Simple, …\nIterate over the given node’s strict dominators.\n[Generic] Finds a feedback arc set: a set of edges in the …\n[Generic] Floyd–Warshall algorithm is an algorithm for …\n[Generic] Ford-Fulkerson algorithm.\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\nUsing the VF2 algorithm, examine both syntactic and …\n[Generic] k’th shortest path algorithm.\nComputed <em>matching</em> of the graph.\nReturns the argument unchanged.\nReturns the argument unchanged.\n[Generic] Compute a <em>matching</em> using a greedy heuristic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[Generic] Compute the <em>maximum matching</em> using Gabow’s …\nAn iterator producing a minimum spanning forest of a graph.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n[Generic] Compute a <em>minimum spanning tree</em> of a graph.\n[Generic] Page Rank algorithm.\nReturns an iterator that produces all simple paths from …\nCreates a representation of the same graph respecting …\nComputes the transitive reduction and closure of a DAG.\nCompressed Sparse Row (<code>CSR</code>) is a sparse adjacency matrix …\nThe default integer type for graph indices. <code>u32</code> is the …\nCsr edge index type, a plain integer.\nCsr creation error: edges were not in sorted order.\nTrait for the unsigned integer type used for node and edge …\nCsr node index type, a plain integer.\nIterator over all nodes of a graph.\nReturn <code>true</code> if the edge was added\nAdds a new node with the given weight, returning the …\nRemove all edges\nComputes in <strong>O(log |V|)</strong> time.\nReturn an iterator of all edges of <code>a</code>.\nComputes in <strong>O(1)</strong> time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Csr</code> from a sorted sequence of edges\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator of all neighbors of <code>a</code>.\nComputes in <strong>O(1)</strong> time.\nCreate an empty <code>Csr</code>.\nComputes in <strong>O(1)</strong> time.\nAccess the edge’s weight.\nCreate a new <code>Csr</code> with <code>n</code> nodes. <code>N</code> must implement <code>Default</code> …\nA graph that can be extended with further nodes and edges\nA graph that can be created\nAccess node and edge weights (associated data).\nAccess node and edge weights mutably.\nA graph edge.\nA graph element.\nIterator adaptors for iterators of <code>Element</code>.\nAn iterator that filters graph elements.\nCreate a graph from an iterator of elements.\nA graph node.\nAdd a new edge. If parallel edges (duplicate) are not …\nCreate an iterator adaptor that filters graph elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd or update the edge from <code>a</code> to <code>b</code>. Return the id of the …\n<code>Dot</code> configuration.\n<code>Dot</code> implements output to graphviz .dot format for a graph.\nUse indices for edge labels.\nUse no edge labels.\nDo not print the graph/digraph string.\nUse indices for node labels.\nUse no node labels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Dot</code> formatting wrapper with default configuration.\nCreate a <code>Dot</code> formatting wrapper with custom configuration.\nThe default integer type for graph indices. <code>u32</code> is the …\nA <code>Graph</code> with directed edges.\nThe graph’s edge type.\nEdge identifier.\nIterator over the edge indices of a graph.\nReference to a <code>Graph</code> edge.\nIterator over all edges of a graph.\nIterator yielding mutable access to all edge weights.\nIterator over the edges of from or to a node\nIterator over the multiple directed edges connecting a …\nAn iterator over either the nodes without edges to them or …\n<code>Frozen</code> is a graph wrapper.\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\nA <code>GraphIndex</code> is a node or edge index.\nTrait for the unsigned integer type used for node and edge …\nIterator over the neighbors of a node.\nThe graph’s node type.\nNode identifier.\nIterator over the node indices of a graph.\nIterator over all nodes of a graph.\nIterator yielding mutable access to all node weights.\nA <code>Graph</code> with undirected edges.\nA “walker” object that can be used to step through the …\nReturn a “walker” object that can be used to step …\nShort version of <code>EdgeIndex::new</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex the <code>Graph</code> by two indices, any combination of node or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Frozen</code> from a mutable reference to a graph.\nStep to the next edge and its endpoint node in the walk …\nAccessor for data structure internals: the first edge in …\nAccessor for data structure internals: the next edge for …\nShort version of <code>NodeIndex::new</code>\nReturn the source node index.\nReturn the target node index.\nAccess the edge’s weight.\nAssociated node data.\nAssociated edge data.\nA <code>GraphMap</code> with directed edges.\n<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure using an …\nA trait group for <code>GraphMap</code>’s node identifier.\nA reference that is hashed and compared by its pointer …\nA <code>GraphMap</code> with undirected edges.\nPtr is ordered by pointer value, i.e. an arbitrary but …\nPtr compares by pointer equality, i.e if they point to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>MatrixGraph</code> with directed edges.\nIterator over all edges of a graph.\nIterator over the edges of from or to a node\nTrait for the unsigned integer type used for node and edge …\n<code>MatrixGraph&lt;N, E, Ty, Null&gt;</code> is a graph datastructure using …\nIterator over the neighbors of a node.\nIterator over the node identifiers of a graph.\nNode identifier.\nIterator over all nodes of a graph.\n<code>NotZero</code> is used to optimize the memory usage of edge …\nWrapper trait for an <code>Option</code>, allowing user-defined structs …\nA <code>MatrixGraph</code> with undirected edges.\nBase trait for types that can be wrapped in a <code>NotZero</code>.\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd a node (also called vertex) with associated data <code>weight</code>…\nRemove all nodes and edges.\nReturn the number of edges in the graph.\nAccess the weight for edge <code>e</code>.\nAccess the weight for edge <code>e</code>, mutably.\nReturn an iterator of all edges of <code>a</code>.\nReturn an iterator of all edges of <code>a</code>, in the specified …\nExtend the graph from an iterable of edges.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>MatrixGraph</code> from an iterable of edges.\nReturn true if there is an edge between <code>a</code> and <code>b</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether the graph has directed edges or not.\nReturn true if <code>self</code> is equal to the sentinel value.\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <code>MatrixGraph</code> with directed edges.\nCreate a new <code>MatrixGraph</code> with undirected edges.\nReturn the number of nodes (vertices) in the graph.\nShort version of <code>NodeIndex::new</code> (with Ix = <code>DefaultIx</code>)\nAccess the weight for node <code>a</code>.\nAccess the weight for node <code>a</code>, mutably.\nRemove the edge from <code>a</code> to <code>b</code> to the graph.\nRemove <code>a</code> from the graph.\nUpdate the edge from <code>a</code> to <code>b</code> to the graph, with its …\nCreate a new <code>MatrixGraph</code> with estimated capacity for nodes.\nReturn the singleton object which can be used as a …\n[Generic] complement of the graph\nA breadth first search (BFS) of a graph.\nVisit nodes of a graph in a depth-first-search (DFS) …\nVisit nodes in a depth-first-search (DFS) emitting nodes …\nA <code>Graph</code> with directed edges.\nA <code>GraphMap</code> with directed edges.\nMarker type for a directed graph.\nEdge direction.\nEdge identifier.\nAn edge reference.\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\n<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure using an …\nAn <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.\nNode identifier.\nAn <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.\nA <code>StableGraph</code> with directed edges.\n<code>StableGraph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using …\nA <code>StableGraph</code> with undirected edges.\nA <code>Graph</code> with undirected edges.\nA <code>GraphMap</code> with undirected edges.\nMarker type for an undirected graph.\nAdd an edge connecting <code>a</code> and <code>b</code> to the graph, with …\nAdd node <code>n</code> to the graph.\nReturn an iterator over all edges of the graph with their …\nReturn an iterator over all edges of the graph in …\nReturn the current node and edge capacity of the graph.\nRemove all nodes and edges\nReturn <code>true</code> if the edge connecting <code>a</code> with <code>b</code> is contained …\nReturn <code>true</code> if the node is contained in the graph.\nThe map of discovered nodes\nThe map of discovered nodes\nThe map of discovered nodes\nReturn the number of edges in the graph.\nReturn a reference to the edge weight connecting <code>a</code> with <code>b</code>, …\nReturn a mutable reference to the edge weight connecting <code>a</code> …\nReturn an iterator of target nodes with an edge starting …\nReturn an iterator of target nodes with an edge starting …\nCreate a new <strong>Dfs</strong> using the graph’s visitor map, and no …\nCreate a new <code>DfsPostOrder</code> using the graph’s visitor map, …\nThe map of finished nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>GraphMap</code> from an iterable of edges.\nCreates a <code>GraphMap</code> that corresponds to the given <code>Graph</code>.\nCreate a <code>Dfs</code> from a vector and a visit map\nThe edge’s identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>Graph</code> that corresponds to this <code>GraphMap</code>.\nWhether the graph has directed edges.\nKeep the discovered map, but clear the visit stack and …\nKeep the discovered and finished map, but clear the visit …\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <strong>Dfs</strong>, using the graph’s visitor map, and put …\nCreate a new <code>DfsPostOrder</code> using the graph’s visitor map, …\nCreate a new <strong>Bfs</strong>, using the graph’s visitor map, and put …\nCreate a new <code>GraphMap</code>\nReturn the next node in the dfs, or <strong>None</strong> if the traversal …\nReturn the next node in the traversal, or <code>None</code> if the …\nReturn the next node in the bfs, or <strong>None</strong> if the traversal …\nReturn the number of nodes in the graph.\nReturn an iterator over the nodes of the graph.\nRemove edge from <code>a</code> to <code>b</code> from the graph and return the edge …\nReturn <code>true</code> if node <code>n</code> was removed.\nClear the visit state\nClear the visit state\nThe source node of the edge.\nThe stack of nodes to visit\nThe stack of nodes to visit\nThe queue of nodes to visit\nThe target node of the edge.\nA reference to the weight of the edge.\nCreate a new <code>GraphMap</code> with estimated capacity.\nCreate a new <code>GraphMap</code> with estimated capacity, and …\nThe default integer type for graph indices. <code>u32</code> is the …\nEdge identifier.\nIterator over the edge indices of a graph.\nReference to a <code>StableGraph</code> edge.\nIterator over all edges of a graph.\nIterator over the edges of from or to a node\nIterator over the multiple directed edges connecting a …\nAn iterator over either the nodes without edges to them or …\nA <code>GraphIndex</code> is a node or edge index.\nTrait for the unsigned integer type used for node and edge …\nIterator over the neighbors of a node.\nNode identifier.\nIterator over the node indices of a graph.\nIterator over all nodes of a graph.\nA <code>StableGraph</code> with directed edges.\n<code>StableGraph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using …\nA <code>StableGraph</code> with undirected edges.\nA “walker” object that can be used to step through the …\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd a node (also called vertex) with associated data <code>weight</code>…\nReturn the current node and edge capacity of the graph.\nRemove all nodes and edges\nRemove all edges\nLookup if there is an edge from <code>a</code> to <code>b</code>.\nReturn a “walker” object that can be used to step …\nReturn the number of edges in the graph.\nAccess the source and target nodes for <code>e</code>.\nShort version of <code>EdgeIndex::new</code>\nReturn an iterator over the edge indices of the graph\nCreate an iterator over all edges in the graph, in indexed …\nAccess the weight for edge <code>e</code>.\nAccess the weight for edge <code>e</code>, mutably\nReturn an iterator yielding immutable access to all edge …\nReturn an iterator yielding mutable access to all edge …\nReturn an iterator of all edges of <code>a</code>.\nReturn an iterator over all the edges connecting <code>a</code> and <code>b</code>.\nReturn an iterator of all edges of <code>a</code>, in the specified …\nAn invalid <code>EdgeIndex</code> used to denote absence of an edge, …\nExtend the graph from an iterable of edges.\nReturn an iterator over either the nodes without edges to …\nCreate a new <code>StableGraph</code> by mapping nodes and edges. A …\nLookup an edge from <code>a</code> to <code>b</code>.\nLookup an edge between <code>a</code> and <code>b</code>, in either direction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>StableGraph</code> from an iterable of edges.\nIndex the <code>StableGraph</code> by two indices, any combination of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the graph has directed edges or not.\nCreate a new <code>StableGraph</code> by mapping node and edge weights …\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <code>StableGraph</code> with directed edges.\nStep to the next edge and its endpoint node in the walk …\nReturn an upper bound of the node indices in the graph\nReturn the number of nodes (vertices) in the graph.\nShort version of <code>NodeIndex::new</code>\nReturn an iterator over the node indices of the graph\nAccess the weight for node <code>a</code>.\nAccess the weight for node <code>a</code>, mutably.\nReturn an iterator yielding immutable access to all node …\nReturn an iterator yielding mutable access to all node …\nRemove an edge and return its edge weight, or <code>None</code> if it …\nRemove <code>a</code> from the graph if it exists, and return its …\nKeep all edges that return <code>true</code> from the <code>visit</code> closure, …\nKeep all nodes that return <code>true</code> from the <code>visit</code> closure, …\nReverse the direction of all edges\nAdd or update an edge from <code>a</code> to <code>b</code>. If the edge already …\nAccess the edge’s weight.\nCreate a new <code>StableGraph</code> with estimated capacity.\n<code>UnionFind&lt;K&gt;</code> is a disjoint-set data structure. It tracks …\nReturns <code>true</code> if the given elements belong to the same set, …\nReturn the representative for <code>x</code>.\nReturn the representative for <code>x</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a vector mapping each element to its representative.\nCreate a new <code>UnionFind</code> of <code>n</code> disjoint sets.\nUnify the two sets containing <code>x</code> and <code>y</code>.\nThe associated adjacency matrix type\nAn edge to an already visited node.\nA breadth first search (BFS) of a graph.\nStop the DFS traversal and return the provided value.\nContinue the DFS traversal as normal.\nControl flow for <code>depth_first_search</code> callbacks.\nControl flow for callbacks.\nA cross or forward edge.\nDefine associated data for nodes and edges\nVisit nodes of a graph in a depth-first-search (DFS) …\nA depth first search (DFS) visitor event.\nVisit nodes in a depth-first-search (DFS) emitting nodes …\nA graph with a known edge count.\nAn edge-filtering graph adaptor.\nA filtered edges iterator.\nA filtered neighbors iterator.\nA filtered neighbors-directed iterator.\nedge identifier\nThe graph’s <code>NodeId</code>s map to indices\nAn edge reference.\nThe kind of edges in the graph.\nA graph filter for edges\nA graph filter for nodes.\nAll edges from a node have been reported.\nCreate or access the adjacency matrix of a graph.\nBase graph trait: defines the associated node identifier …\nEdge kind property (directed or undirected edges)\nA copyable reference to a graph.\nAccess to the sequence of the graph’s edges\nAccess to the edges of each node.\nAccess to all edges of each node, in the specified …\nAccess to the neighbors of each node\nAccess to the neighbors of each node, through incoming or …\nAccess to the sequence of the graph’s <code>NodeId</code>s.\nAccess to the sequence of the graph’s nodes\nThe associated map type\nThe graph’s <code>NodeId</code>s map to indices, in a range without …\nA graph with a known node count.\nA node-filtering graph adaptor.\nA filtered edges iterator.\nA filtered edges iterator.\nA filtered neighbors iterator.\nA filtered node references iterator.\nnode identifier\nThe graph’s <code>NodeId</code>s map to indices\nA node reference.\nPrune the current node from the DFS traversal. No more …\nAn edge-reversing graph adaptor.\nA reversed edge reference\nA reversed edge references iterator.\nA reversed edges iterator.\nStrictly monotonically increasing event time for a depth …\nA topological order traversal for a graph.\nAn edge of the tree formed by the traversal.\nA mapping for storing the visited status for NodeId <code>N</code>.\nA graph that can create a map that tracks the visited …\nA walker is a traversal state, but where part of the …\nA walker and its context wrapped into an iterator.\nCreate the adjacency matrix\nReturn the original, unreversed edge reference.\nGet the value in <code>Control::Break(_)</code>, if present.\nA recursive depth first search.\nThe map of discovered nodes\nThe map of discovered nodes\nThe map of discovered nodes\nReturn an upper bound of the edge indices in the graph …\nReturn the number of edges in the graph.\nThe map of finished nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>NodeFiltered</code> adaptor from the closure <code>filter</code>.\nCreate an <code>EdgeFiltered</code> adaptor from the closure <code>filter</code>.\nConvert <code>i</code> to a node index. <code>i</code> must be a valid value in the …\nConvert <code>i</code> to an edge index. <code>i</code> must be a valid value in the …\nThe edge’s identifier.\nReturn true to have the edge be part of the graph\nReturn true to have the node be part of the graph\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and return the original, unreversed edge …\nReturn true if there is an edge from <code>a</code> to <code>b</code>, false …\nReturn whether <code>a</code> has been visited before.\nCreate an iterator out of the walker and given <code>context</code>.\nReturn an iterator of the neighbors of node <code>a</code>.\nCreate a new <code>Topo</code>, using the graph’s visitor map, and …\nReturn the next node in the current topological order …\nReturn an upper bound of the node indices in the graph …\nClear visited state, and put all initial nodes in the to …\nReset the visitor map (and resize to new size of graph if …\nThe source node of the edge.\nThe stack of nodes to visit\nThe stack of nodes to visit\nThe queue of nodes to visit\nThe target node of the edge.\nConvert <code>a</code> to an integer index.\nConvert <code>a</code> to an integer index.\nMark <code>a</code> as visited.\nCreate a new visitor map\nAdvance to the next item\nA reference to the weight of the edge.\nCreate a new <code>Topo</code> with initial nodes.\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nOverflow <code>usize::MAX</code> or other error during size computation\nError type for APIs with fallible heap allocation\nAn iterator that removes the items from a <code>SmallVec</code> and …\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nThe type of the array’s elements.\nA <code>Vec</code>-like container that can store a small number of …\nConvenience trait for constructing a <code>SmallVec</code>\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer.\nExtracts a mutable slice of the entire vector.\nReturns the remaining items of this iterator as a mutable …\nReturns a raw pointer to the vector’s buffer.\nExtracts a slice containing the entire vector.\nReturns the remaining items of this iterator as a slice.\nThe number of items the vector can hold without …\nRemove all elements from the vector.\nRemoves consecutive duplicate elements.\nRemoves consecutive duplicate elements using the given …\nRemoves consecutive elements that map to the same key.\nCreates a draining iterator that removes the specified …\nCopy elements from a slice and append them to the vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nThe array passed as an argument is moved to be an inline …\nConstructs a new <code>SmallVec</code> on the stack from an array …\nCreates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.\nCreates a <code>SmallVec</code> directly from the raw components of …\nCopy the elements from a slice into a new <code>SmallVec</code>.\nConstruct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.\nRe-allocate to set the capacity to …\nThe maximum number of elements this vector can hold inline\nInsert an element at position <code>index</code>, shifting all elements …\nCopy elements from a slice into the vector at position …\nInsert multiple elements at position <code>index</code>, shifting all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …\nConvert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …\nConvert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …\nReturns <code>true</code> if the vector is empty\nThe number of elements stored in the vector\nConstruct an empty vector\nConstruct an empty vector.\nRemove an item from the end of the vector and return it, …\nAppend an item to the vector.\nRemove and return the element at position <code>index</code>, shifting …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nResizes the vector so that its length is equal to <code>len</code>.\nResizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nSets the length of a vector.\nShrink the capacity of the vector as much as possible.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nReturns <code>true</code> if the data has spilled into a separate …\nRemove the element at position <code>index</code>, replacing it with …\nConstruct a new <code>SmallVec</code> from a slice.\nShorten the vector, keeping the first <code>len</code> elements and …\nRe-allocate to set the capacity to …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nConstruct an empty vector with enough capacity …\nThe layout that was passed to the allocator\nMemory allocation APIs\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCollection types.\nUtilities related to FFI bindings.\nCreates a <code>String</code> using interpolation of runtime …\nSingle-threaded reference-counting pointers. ‘Rc’ …\nUtilities for the slice primitive type.\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nThread-safe reference-counting pointers.\nTypes and Traits for working with asynchronous tasks.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nThe minimum byte alignment for a memory block of this …\nCreates a layout describing the record that can hold a …\nAllocate memory with the global allocator.\nAllocate memory as described by the given <code>layout</code>.\nAllocate zero-initialized memory with the global allocator.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a layout describing the record for a <code>[T; n]</code>.\nCreates a “by reference” adapter for this instance of …\nCreates a <code>NonNull</code> that is dangling, but well-aligned for …\nDeallocate memory with the global allocator.\nDeallocate the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nCreates a layout describing the record for <code>self</code> followed by\nCreates a layout describing the record for <code>self</code> followed by\nProduces layout describing a record that could be used to …\nProduces layout describing a record that could be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …\nCreates a layout, bypassing all checks.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignal a memory allocation error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.\nCreates a layout by rounding the size of this layout up to …\nReturns the amount of padding we must insert after <code>self</code> to …\nReallocate memory with the global allocator.\nShrink or grow a block of memory to the given <code>new_size</code> in …\nCreates a layout describing the record for <code>n</code> instances of …\nCreates a layout describing the record for <code>n</code> instances of …\nAttempts to shrink the memory block.\nThe minimum size in bytes for a memory block of this …\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nCreates a clone-on-write pointer from a reference to …\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nReturns the argument unchanged.\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nCreates a clone-on-write pointer from an owned instance of …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nMoves the string into a <code>Cow::Owned</code>.\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nReturns a reference to the underlying allocator.\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nReturns the argument unchanged.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nReturns the argument unchanged.\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nCreates a boxed <code>Path</code> from a reference.\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConvert a vector into a boxed slice.\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nError due to the computed capacity exceeding the collection…\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nA double-ended queue implemented with a growable ring …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> to the end of the list.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a pair of slices which contain, in order, the …\nReturns a slice of all values in the underlying vector, in …\nReturns a pair of slices which contain, in order, the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a mutable reference to the back element, or <code>None</code> …\nProvides a mutable reference to the back element, or <code>None</code> …\nA priority queue implemented with a binary heap.\nBinary searches this <code>VecDeque</code> for a given element. If the …\nBinary searches this <code>VecDeque</code> with a comparator function.\nBinary searches this <code>VecDeque</code> with a key extraction …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nReturns the number of elements the binary heap can hold …\nReturns the number of elements the deque can hold without …\nDrops all items from the binary heap.\nClears the map, removing all elements.\nClears the set, removing all elements.\nRemoves all elements from the <code>LinkedList</code>.\nClears the deque, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the set contains an element equal to the …\nReturns <code>true</code> if the <code>LinkedList</code> contains an element equal …\nReturns <code>true</code> if the deque contains an element equal to the …\nReturns <code>true</code> if the map contains a value for the specified …\nProvides a cursor at the back element.\nProvides a cursor with editing operations at the back …\nProvides a cursor at the front element.\nProvides a cursor with editing operations at the front …\nCreates an empty <code>BinaryHeap&lt;T&gt;</code>.\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList&lt;T&gt;</code>.\nCreates an empty deque.\nVisits the elements representing the difference, i.e., the …\nClears the binary heap, returning an iterator over the …\nRemoves the specified range from the deque in bulk, …\nClears the binary heap, returning an iterator over the …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator that visits all elements (key-value …\nCreates an iterator that visits all elements in ascending …\nCreates an iterator which uses a closure to determine if …\nReturns the contents of the “front” slice as returned …\nReturns a reference to the first element in the set, if …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nConverts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.\nConverts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.\nReturns the argument unchanged.\nTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.\nReturns the argument unchanged.\nAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.\nReturns the argument unchanged.\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a mutable reference to the front element, or <code>None</code> …\nProvides a mutable reference to the front element, or <code>None</code> …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the element in the set, if any, …\nProvides a reference to the element at the given index.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nProvides a mutable reference to the element at the given …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts an element at <code>index</code> within the deque, shifting all …\nVisits the elements representing the intersection, i.e., …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nGets an owning iterator over the entries of the map, …\nGets an iterator for moving out the <code>BTreeSet</code>’s contents …\nConsumes the list into an iterator yielding elements by …\nConsumes the deque into a front-to-back iterator yielding …\nReturns an iterator which retrieves elements in heap order.\nCreates a consuming iterator visiting all the keys, in …\nConsumes the <code>BinaryHeap</code> and returns a vector in sorted …\nCreates a consuming iterator visiting all the values, in …\nConsumes the <code>BinaryHeap</code> and returns the underlying vector …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nChecks if the binary heap is empty.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the <code>LinkedList</code> is empty.\nReturns <code>true</code> if the deque is empty.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns an iterator visiting all values in the underlying …\nGets an iterator over the entries of the map, sorted by …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nProvides a forward iterator.\nReturns a front-to-back iterator.\nGets a mutable iterator over the entries of the map, …\nProvides a forward iterator with mutable references.\nReturns a front-to-back iterator that returns mutable …\nGets an iterator over the keys of the map, in sorted order.\nDetails about the allocation that caused the error\nReturns a reference to the last element in the set, if any.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the length of the binary heap.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the length of the <code>LinkedList</code>.\nReturns the number of elements in the deque.\nA doubly-linked list with owned nodes.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nRearranges the internal storage of this deque so it is one …\nCreates an empty <code>BinaryHeap</code> as a max-heap.\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new, empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList</code>.\nCreates an empty deque.\nCreates an empty <code>BinaryHeap</code> as a max-heap, using <code>A</code> as …\nMakes a new empty BTreeMap with a reasonable choice for B.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nConstructs an empty <code>LinkedList&lt;T, A&gt;</code>.\nCreates an empty deque.\nReturns the index of the partition point according to the …\nReturns the greatest item in the binary heap, or <code>None</code> if …\nReturns a mutable reference to the greatest item in the …\nRemoves the greatest item from the binary heap and returns …\nRemoves the last element from a list and returns it, or …\nRemoves the last element from the deque and returns it, or …\nRemoves and returns the first element in the map. The key …\nRemoves the first element from the set and returns it, if …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves and returns the last element in the map. The key …\nRemoves the last element from the set and returns it, if …\nPushes an item onto the binary heap.\nAppends an element to the back of a list.\nAppends an element to the back of the deque.\nAdds an element first in the list.\nPrepends an element to the deque.\nConstructs a double-ended iterator over a sub-range of …\nConstructs a double-ended iterator over a sub-range of …\nCreates an iterator that covers the specified range in the …\nConstructs a mutable double-ended iterator over a …\nCreates an iterator that covers the specified mutable …\nFill <code>buf</code> with the contents of the “front” slice as …\nRemoves a key from the map, returning the value at the key …\nIf the set contains an element equal to the value, removes …\nRemoves the element at the given index and returns it.\nRemoves and returns the element at <code>index</code> from the deque. …\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing element, …\nReserves capacity for at least <code>additional</code> elements more …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> …\nReserves the minimum capacity for at least <code>additional</code> more …\nModifies the deque in-place so that <code>len()</code> is equal to …\nModifies the deque in-place so that <code>len()</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRotates the double-ended queue <code>n</code> places to the left.\nRotates the double-ended queue <code>n</code> places to the right.\nDiscards capacity with a lower bound.\nShrinks the capacity of the deque with a lower bound.\nDiscards as much additional capacity as possible.\nShrinks the capacity of the deque as much as possible.\nSplits the collection into two at the given key. Returns …\nSplits the collection into two at the value. Returns a new …\nSplits the list into two at the given index. Returns …\nSplits the deque into two at the given index.\nReturns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…\nSwaps elements at indices <code>i</code> and <code>j</code>.\nRemoves an element from anywhere in the deque and returns …\nRemoves an element from anywhere in the deque and returns …\nVisits the elements representing the symmetric difference, …\nRemoves and returns the element in the set, if any, that …\nShortens the deque, keeping the first <code>len</code> elements and …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> elements …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nCreates an empty deque with space for at least <code>capacity</code> …\nVisits the elements representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nA double-ended queue (deque) implemented with a growable …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty deque with space for at least <code>capacity</code> …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nCreates an empty <code>binary_heap::IntoIter</code>.\nRemoves heap elements in heap order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves the peeked value from the heap and returns it.\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>btree_map::Range</code>.\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nTakes the value of the entry out of the map, and returns …\nTake ownership of the key and value from the map.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the precending element from the <code>BTreeMap</code>.\nRemoves the precending element from the <code>BTreeMap</code>.\nThe value which was not inserted, because the entry was …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nAn ordered set based on a B-Tree.\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nCreates an empty <code>btree_set::Iter</code>.\nCreates an empty <code>btree_set::IntoIter</code>.\nCreates an empty <code>btree_set::Range</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nReturns a read-only cursor pointing to the current element.\nProvides a reference to the back element of the cursor’s …\nProvides a reference to the back element of the cursor’s …\nProvides a mutable reference to back element of the cursor…\nReturns a reference to the element that the cursor is …\nReturns a reference to the element that the cursor is …\nCreates an empty <code>linked_list::Iter</code>.\nCreates an empty <code>linked_list::IntoIter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a reference to the front element of the cursor’…\nProvides a reference to the front element of the cursor’…\nProvides a mutable reference to the front element of the …\nReturns the cursor position index within the <code>LinkedList</code>.\nReturns the cursor position index within the <code>LinkedList</code>.\nInserts a new element into the <code>LinkedList</code> after the …\nInserts a new element into the <code>LinkedList</code> before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nReturns a reference to the next element.\nReturns a reference to the next element.\nReturns a reference to the previous element.\nReturns a reference to the previous element.\nRemoves the last element from the cursor’s parent list …\nRemoves the first element from the cursor’s parent list …\nAppends an element to the back of the cursor’s parent …\nAppends an element to the front of the cursor’s parent …\nRemoves the current element from the <code>LinkedList</code>.\nRemoves the current element from the <code>LinkedList</code> without …\nInserts the elements from the given <code>LinkedList</code> after the …\nInserts the elements from the given <code>LinkedList</code> before the …\nSplits the list into two after the current element. This …\nSplits the list into two before the current element. This …\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nReturns the contents of this <code>CString</code> as a slice of bytes.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nEquivalent to <code>CString::as_bytes()</code> except that the returned …\nExtracts a <code>CStr</code> slice containing the entire string.\n<code>CString</code> and its related types.\nCreates an empty <code>CString</code>.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …\nConverts a &amp;CStr into a <code>CString</code> by copying the contents …\nReturns the argument unchanged.\nConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetakes ownership of a <code>CString</code> that was transferred to C …\nCreates a C-compatible string by consuming a byte vector, …\nAttempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.\nConverts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>CString</code> into a boxed <code>CStr</code>.\nConsumes the <code>CString</code> and returns the underlying byte …\nReturns the bytes that were attempted to convert to a …\nEquivalent to <code>CString::into_bytes()</code> except that the …\nConsumes this error, returning original <code>CString</code> which …\nConsumes the <code>CString</code> and transfers ownership of the string …\nConverts the <code>CString</code> into a <code>String</code> if it contains valid …\nConsumes this error, returning the underlying vector of …\nCreates a new C-compatible string from a container of …\nReturns the position of the nul byte in the slice that …\nAccess the underlying UTF-8 error that was the cause of …\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nA single-threaded reference-counting pointer. ‘Rc’ …\nA uniquely owned <code>Rc</code>\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nConverts to <code>Rc&lt;[T]&gt;</code>.\nConverts to <code>Rc&lt;T&gt;</code>.\nMakes a clone of the <code>Rc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Rc</code>s.\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCreates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nAttempt to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nDowncasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nCreates a new <code>Weak</code> pointer to this allocation.\nCreates a new weak reference to the <code>UniqueRc</code>\nDrops the <code>Rc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>Rc</code>s.\nMove a boxed object to a new, reference counted, …\nAllocate a reference-counted string slice and copy <code>v</code> into …\nAllocate a reference-counted string slice and copy <code>v</code> into …\nCreate a reference-counted pointer from a clone-on-write …\nAllocate a reference-counted slice and move <code>v</code>’s items …\nConverts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.\nConverts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>\nReturns the argument unchanged.\nConverts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …\nConverts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …\nConverts a reference-counted string slice into a byte …\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nConverts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nConverts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Rc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Rc&lt;T, A&gt;</code> from a raw pointer in the provided …\nConverts a raw pointer previously created by <code>into_raw</code> back …\n‘Greater than or equal to’ comparison for two <code>Rc</code>s.\nReturns a mutable reference into the given <code>Rc</code>, if there are\nReturns a mutable reference into the given <code>Rc</code>, without any …\nGreater-than comparison for two <code>Rc</code>s.\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nConsumes the <code>Rc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConverts the <code>UniqueRc</code> into a regular <code>Rc</code>\n‘Less than or equal to’ comparison for two <code>Rc</code>s.\nLess-than comparison for two <code>Rc</code>s.\nMakes a mutable reference into the given <code>Rc</code>.\nInequality for two <code>Rc</code>s.\nConstructs a new <code>Rc&lt;T&gt;</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nCreates a new <code>UniqueRc</code>\nConstructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Rc</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory, …\nConstructs a new <code>Rc</code> with uninitialized contents.\nConstructs a new <code>Rc</code> with uninitialized contents in the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nPartial comparison for two <code>Rc</code>s.\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code> in the provided allocator. If <code>T</code>…\nReturns <code>true</code> if the two <code>Rc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nGets the number of strong (<code>Rc</code>) pointers to this allocation.\nGets the number of strong (<code>Rc</code>) pointers pointing to this …\nConstructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …\nConstructs a new <code>Rc&lt;T&gt;</code> in the provided allocator, …\nConstructs a new <code>Rc</code> with uninitialized contents, returning …\nConstructs a new <code>Rc</code> with uninitialized contents, in the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying …\nGets the number of <code>Weak</code> pointers to this allocation.\nGets the number of <code>Weak</code> pointers pointing to this …\nAn iterator over a slice in (non-overlapping) chunks (<code>N</code> …\nAn iterator over a slice in (non-overlapping) mutable …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nViews the underlying data as a mutable subslice of the …\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nReturns a slice which contains items not yet handled by …\nImplementation of <code>[T]::concat</code>\nCreates an empty slice iterator.\nCreates an empty slice iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nViews the underlying data as a subslice of the original …\nImplementation of <code>[T]::join</code>\nPerforms bounds-checking of a range.\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nPerforms bounds-checking of a range without panicking.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nProvides more information about the failure:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a boxed slice of bytes to a boxed string slice …\nCreates an <code>&amp;str</code> from a pointer and a length.\nCreates an <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid sequence that caused a failure.\nReturns the byte position of the next character, or the …\nThe string Pattern API.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns the remaining lines of the split string.\nReturns remainder of the split string\nReturns remainder of the split string.\nReturns the next validated UTF-8 substring.\nReturns the index in the given string up to which valid …\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetter for the underlying string to be searched in\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nReturns a byte slice of this <code>String</code>’s contents.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns the remaining (sub)string of this iterator as a …\nExtracts a string slice containing the entire <code>String</code>.\nReturns this <code>String</code>’s capacity, in bytes.\nTruncates this <code>String</code>, removing all contents.\nClones the contents of <code>source</code> into <code>self</code>.\nCreates an empty <code>String</code>.\nRemoves the specified range from the string in bulk, …\nCopies elements from <code>src</code> range to the end of the string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nConverts a <code>&amp;String</code> into a <code>String</code>.\nConverts a clone-on-write string to an owned instance of …\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nAllocates an owned <code>String</code> from a single character.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>String</code> from a pointer, a length and a …\nDecode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a vector of bytes to a <code>String</code> without checking …\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nReturns the bytes that were attempted to convert to a …\nDecomposes a <code>String</code> into its raw components: …\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nCreates a new empty <code>String</code>.\nRemoves the last character from the string buffer and …\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves the minimum capacity for at least <code>additional</code> …\nRetains only the characters specified by the predicate.\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of this <code>String</code> to match its length.\nSplits the string into two at the given byte index.\nConverts the given value to a <code>String</code>.\nShortens this <code>String</code> to the specified length.\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nCreates a new empty <code>String</code> with at least the specified …\nFetch a <code>Utf8Error</code> to get more details about the conversion …\nCreates a new empty <code>String</code> with at least the specified …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nConverts to <code>Arc&lt;T&gt;</code>.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nMakes a clone of the <code>Arc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Arc</code>s.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. …\nAttempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nDrops the <code>Weak</code> pointer.\nEquality for two <code>Arc</code>s.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nConverts an atomically reference-counted string slice into …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nReturns the argument unchanged.\nMove a boxed object to a new, reference-counted allocation.\nCreate an atomically reference-counted pointer from a …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nAllocate a reference-counted slice and move <code>v</code>’s items …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …")