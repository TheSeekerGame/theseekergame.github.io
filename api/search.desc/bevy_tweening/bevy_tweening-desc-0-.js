searchState.loadedDescShard("bevy_tweening", 0, "Tweening animation plugin for the Bevy game engine\nThe tweenable is still active, and did not reach its end …\nLabel enum for the systems relating to animations\nTicks animations\nComponent to control the animation of another component.\nPlayback state of an animator.\nComponent to control the animation of an asset.\nAnimation playing from end to start, in reverse.\nThe dynamic tweenable type.\nAnimation reached its end state. The tweenable is idling …\nUse a custom function to interpolate the value.\nA time delay that doesn’t animate anything.\nDiscrete interpolation, eased value will jump from start …\nFollow <code>EaseFunction</code>.\nDescribe how eased value should be computed.\nThe duration is finite, of the given value.\nRun the animation N times.\nRun the animation for some amount of time.\nAnimation playing from start to end.\nThe duration is infinite.\nLoop the animation indefinitely.\nDescribes a type that can linearly interpolate between two …\nLinear interpolation, with no function.\nFollow a ping-pong pattern, changing the direction each …\nThe animation is paused in its current state.\nThe animation is playing. This is the default state.\nReset the animation back to its starting position.\nHow many times to repeat a tween animation. See also: …\nWhat to do when a tween animation needs to be repeated. …\nThe scaling type for linear interpolation.\nA sequence of tweens played back in order one after the …\nTrait to workaround the discrepancies of the change …\nPossibly infinite duration of an animation.\nA collection of <code>Tweenable</code> executing in parallel.\nSingle tweening animation instance.\nEvent raised when a tween completed.\nPlayback state of a <code>Tweenable</code>.\nAn animatable entity, either a single <code>Tween</code> or a …\nDirection a tweening animation is playing.\nPlugin to add systems related to tweening of common …\nAnimator system for assets.\nClear the callback invoked when the animation completes.\nClear the callback invoked when the animation completes.\nClear the event sent when the animation completes.\nClear the event sent when the animation completes.\nAnimator system for components.\nGet the current active tween in the sequence.\nThe current animation direction.\nGet the duration of a single iteration of the animation.\nGet the current elapsed duration.\nThe <code>Entity</code> the tween which completed and its animator are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new sequence containing a single tween.\nIndex of the current active tween in the sequence.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the direction equal to <code>TweeningDirection::Backward</code>?\nCheck if the delay completed.\nIs the direction equal to <code>TweeningDirection::Forward</code>?\nCollection of predefined lenses for common Bevy components …\nGiven <code>self</code> and another point <code>other</code>, return a point on a …\nCreate a new tween animation.\nCreate a new sequence of tweens.\nCreate a new <code>Tracks</code> from an iterator over a collection of …\nCreate a new <code>Delay</code> with a given duration.\nCreate a new animator component from a single tweenable.\nCreate a new asset animator component from a single …\nGet the current progress in [0:1] of the animation.\nGet the current progress in [0:1] of the animation.\nRewind the animation to its starting state.\nSet a callback invoked when the animation completes.\nSet a callback invoked when the animation completes.\nEnable or disable raising a completed event.\nEnable or disable raising a completed event.\nSet the playback direction of the tween.\nSet the current animation playback elapsed time.\nSet the current animation playback progress.\nSet the current animation playback progress.\nSet the animation speed. Defaults to 1.\nSet the animation speed. Defaults to 1.\nSet the top-level tweenable item this animator controls.\nSet the top-level tweenable item this animator controls.\nGet the animation speed.\nGet the animation speed.\nGet the current tweenable state.\nControl if this animation is played or not.\nControl if this animation is played or not.\nStop animation playback and rewind the animation.\nStop animation playback and rewind the animation.\nDereference the target, triggering any change detection, …\nChain another <code>Tweenable</code> after this tween, making a <code>Sequence</code>…\nAppend a <code>Tweenable</code> to this sequence.\nChain another <code>Tweenable</code> after this tween, making a <code>Sequence</code>…\nTick the animation, advancing it by the given delta time …\nGet the number of times this tweenable completed.\nGet the number of times this tweenable completed.\nGet the total duration of the entire animation, including …\nGet the top-level tweenable this animator is currently …\nGet the top-level tweenable this animator is currently …\nGet the top-level mutable tweenable this animator is …\nGet the top-level mutable tweenable this animator is …\nAn opaque value set by the user when activating event …\nCreate a new sequence with the specified capacity.\nSet a callback invoked when the delay completes.\nSet a callback invoked when the delay completes.\nEnable raising a completed event.\nEnable raising a completed event.\nSet the playback direction of the tween.\nSet the number of times to repeat the animation.\nChoose how the animation behaves upon a repetition.\nSet the initial speed of the animator. See …\nSet the initial speed of the animator. See …\nSet the initial playback state of the animator.\nSet the initial playback state of the animator.\nA lens to manipulate the <code>color</code> field of a <code>ColorMaterial</code> …\nA lens over a subset of a component.\nA lens to manipulate the <code>color</code> field of a <code>Sprite</code> asset.\nA lens to manipulate the <code>color</code> field of a section of a <code>Text</code>\nA lens to manipulate the <code>translation</code> field of a <code>Transform</code> …\nA lens to rotate a <code>Transform</code> component around a given …\nA lens to rotate a <code>Transform</code> component around its local X …\nA lens to rotate a <code>Transform</code> component around its local Y …\nA lens to rotate a <code>Transform</code> component around its local Z …\nA lens to manipulate the <code>rotation</code> field of a <code>Transform</code> …\nA lens to manipulate the <code>scale</code> field of a <code>Transform</code> …\nGamer\nA lens to manipulate the <code>position</code> field of a UI <code>Style</code> …\nThe normalized rotation axis.\nEnd color.\nEnd value of the translation.\nEnd value of the rotation.\nEnd value of the rotation angle, in radians.\nEnd value of the rotation angle, in radians.\nEnd value of the rotation angle, in radians.\nEnd value of the rotation angle, in radians.\nEnd value of the scale.\nEnd position.\nEnd position.\nEnd color.\nEnd color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform a linear interpolation (lerp) over the subset of …\nIndex of the text section in the <code>Text</code> component.\nStart color.\nStart value of the translation.\nStart value of the rotation.\nStart value of the rotation angle, in radians.\nStart value of the rotation angle, in radians.\nStart value of the rotation angle, in radians.\nStart value of the rotation angle, in radians.\nStart value of the scale.\nStart position.\nStart position.\nStart color.\nStart color.")