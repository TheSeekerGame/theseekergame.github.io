searchState.loadedDescShard("bevy_hanabi", 0, "🎆 Hanabi – a GPU particle system plugin for the Bevy …\nAlpha mode for rendering an effect.\nAlways simulate the effect, whether visible or not.\nRender the effect with alpha blending.\nCompile the effect instances, updating the […\nCompiled data for a <code>ParticleEffect</code>.\nA constant or random value evaluated on CPU.\nAsset describing a visual effect.\nThe effect simulation clock.\nAll methods for the <code>Time&lt;EffectSimulation&gt;</code> clock.\nRuntime component maintaining the state of the spawner for …\nLabels for the Hanabi systems.\nThe effect is rendered with flipbook texture animation …\nGather all removed <code>ParticleEffect</code> components during the …\nParticles are simulated in global space.\nA gradient curve made of keypoints and associated values.\nA single key point for a <code>Gradient</code>.\nPlugin to add systems related to Hanabi.\nThe effect is simulated in local space.\nEffect flags.\nParticles are simulated in local effect space.\nRender the effect with alpha masking.\nType of motion integration applied to the particles of a …\nThe effect needs UVs.\nNo flags.\nNo motion integration. The <code>Attribute::POSITION</code> of the …\nThe effect uses an image texture.\nVisual effect made of particles.\nA component bundle for a particle effect.\nApply Euler motion integration each simulation update …\nApply Euler motion integration each simulation update …\nPrepare the GPU bind groups once all buffers have been …\nPrepare effect assets for the extracted effects.\nPrepare GPU data for the queued effects.\nValue a user wants to assign to a property with …\nQueue the GPU commands for the extracted effects.\nAn RNG resource\nCache of baked shaders variants.\nSimulation condition for an effect.\nSimulation space for the particles of an effect.\nSingle constant value.\nSpawner defining how new particles are emitted.\nTick all effect instances to generate particle spawn …\nExtension trait to convert an object to WGSL code.\nThe effect uses alpha masking instead of alpha blending. …\nRandom value distributed uniformly between two inclusive …\nUpdate the properties of the effect instance based on the …\nSimulate the effect only when visible.\nAdd a key point to the gradient.\nAdd a [<code>BoxedModifier</code>] to the specific context.\nAdd a [<code>BoxedModifier</code>] to the specific context, in a …\nAdd a <code>RenderModifier</code> to the render context.\nAdd a <code>RenderModifier</code> to the render context targeting a …\nGet a flags value with all known bits set.\nAlpha mode.\nEffect attributes, like the position or velocity of a …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCreate a spawner that spawns <code>count</code> particles, waits <code>period</code> …\nGet the capacities of the effect, in number of particles …\nA compiled version of the particle effect, managed …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCreate a constant gradient.\nWhether all set bits in a source flags value are also set …\nGet the number of particles that are spawned each cycle.\nThe intersection of a source flags value with the …\nThe particle effect instance itself.\nRuntime storage for effect properties.\nReturns the speed the clock advanced relative to your …\nReturns the speed the clock advanced relative to your …\nGet a flags value with all bits unset.\nEvaluate the simulation space expression.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreate a new gradient from a series of key points.\nGet a flags value with the bits of a flag with the given …\nGet an existing baked shader variant, or insert it into …\nComputed global transform.\nEffect graph and language definition.\nHandle of the effect to instantiate.\nAlgorithmically-computed indication of whether an entity …\nAdd an initialization modifier to the effect.\nGet a list of all the init modifiers of this effect.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether the spawner is active.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the gradient contains no key points.\nWhether all bits in this flags value are unset.\nGet whether this spawner emits a single burst.\nReturns <code>true</code> if the clock is currently paused.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGet the gradient keys.\nGet mutable access to the gradient keys.\nReturns the number of key points in the gradient, also …\nCreate a linear gradient between two values.\nBuilding blocks to create a visual effect.\nGet a list of all the modifiers of this effect.\nGet the expression module storing all expressions in use …\nType of motion integration applied to the particles of a …\nDisplay name of the effect.\nCreate a new effect asset.\nCreate a new particle effect bundle from an effect …\nCreate a new empty gradient.\nCreate a spawner with a given count, time, and period.\nCreate a new spawner state from an asset definition.\nCreate a new particle effect without a spawner or any …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCreate a spawner that spawns <code>count</code> particles, then waits …\nBuild the particle layout of the asset based on its …\nStops the clock, preventing it from advancing until …\nGet the wait time between spawn cycles\nEffect properties.\nGet the list of existing properties.\nBuild the property layout of the asset based on its …\nReturns the range of allowable values in the form …\nCreate a spawner that spawns particles at <code>rate</code>, …\nGet the ratio where the key point is located, in [0:1].\nReturns the speed the clock advances relative to the …\nReturns the speed the clock advances relative to the …\nThe intersection of a source flags value with the …\nAdd a render modifier to the effect.\nAdd a render modifier to specific groups of this effect.\nGet a list of all the render modifiers of this effect.\nGet a list of all the render modifiers of this effect that …\nReset the spawner state.\nSample the gradient at the given ratio.\nSample the value.\nSample the gradient at regular intervals.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet whether the spawner is active.\nSet the number of particles that are spawned each cycle.\nSet the wait time between spawn cycles.\nSets the speed the clock advances relative to the virtual …\nSets the speed the clock advances relative to the virtual …\nSet the length of the spawn time each cycle.\nSet whether the spawner starts active when the effect is …\nCondition under which the effect is simulated.\nParticle simulation space.\nNumber of particles to spawn this frame.\nGet the length of spawn time each cycle.\nGet the spawner configuration in use.\nSpawner.\nGet whether the spawner starts active when the effect is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTick the spawner to calculate the number of particles to …\nTick all the <code>EffectSpawner</code> components of the simulated …\nConvert an object to a string representing its WGSL code.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTransform of the entity, representing the frame of …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nResumes the clock if paused.\nAdd an update modifier to the effect.\nAdd an update modifier to the effect targeting only a …\nGet a list of all the update modifiers of this effect.\nGet a list of all the update modifiers in a single group.\nValue associated with the key.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible.\nReturns <code>true</code> if the clock was paused at the start of this …\nSet whether the spawner is active.\nSet the alpha mode.\nSet the number of particles that are spawned each cycle.\nAdd a key point to the gradient.\nAdd a series of key points to the gradient.\nSet the effect name.\nSet the wait time between spawn cycles.\nSet the effect’s simulation condition.\nSet the effect’s simulation space.\nSet the length of the spawn time each cycle.\nSets whether the spawner starts active when the effect is …\nFor 2D rendering, the Z coordinate used as the sort key.\nThe age of the particle.\nThe particle’s opacity (alpha).\nThe local X axis of the particle.\nThe local Y axis of the particle.\nThe local Z axis of the particle.\nAn attribute of a particle simulated for an effect.\nBoolean value (<code>bool</code>).\nThe particle’s base color.\nA generic vector float attribute with 2 components.\nA generic vector float attribute with 2 components.\nA generic vector float attribute with 2 components.\nA generic vector float attribute with 2 components.\nA generic vector float attribute with 3 components.\nA generic vector float attribute with 3 components.\nA generic vector float attribute with 3 components.\nA generic vector float attribute with 3 components.\nA generic vector float attribute with 4 components.\nA generic vector float attribute with 4 components.\nA generic vector float attribute with 4 components.\nA generic vector float attribute with 4 components.\nA generic scalar float attribute.\nA generic scalar float attribute.\nA generic scalar float attribute.\nA generic scalar float attribute.\nFloating point value (<code>f32</code>).\nThe particle’s base color (HDR).\nSigned 32-bit integer value (<code>i32</code>).\nThe lifetime of the particle.\nFloating-point matrix of size 2x2 (<code>mat2x2&lt;f32&gt;</code>).\nFloating-point matrix of size 2x3 (<code>mat2x3&lt;f32&gt;</code>).\nFloating-point matrix of size 2x4 (<code>mat2x4&lt;f32&gt;</code>).\nFloating-point matrix of size 3x2 (<code>mat3x2&lt;f32&gt;</code>).\nFloating-point matrix of size 3x3 (<code>mat3x3&lt;f32&gt;</code>).\nFloating-point matrix of size 3x4 (<code>mat3x4&lt;f32&gt;</code>).\nFloating-point matrix of size 4x2 (<code>mat4x2&lt;f32&gt;</code>).\nFloating-point matrix of size 4x3 (<code>mat4x3&lt;f32&gt;</code>).\nFloating-point matrix of size 4x4 (<code>mat4x4&lt;f32&gt;</code>).\nA floating-point matrix type of size between 2x2 and 4x4.\nFloating-point matrix type (<code>matCxR&lt;f32&gt;</code>).\nThe next particle in the ribbon chain.\nThe particle position in simulation space.\nThe previous particle in the ribbon chain.\nParticle layout of an effect.\nBuilder helper to create a new <code>ParticleLayout</code>.\nThe particle’s uniform size.\nThe particle’s 2D size, for quad rendering.\nThe sprite index in a flipbook animation.\nA scalar type (single value).\nScalar types.\nUnsigned 32-bit integer value (<code>u32</code>).\nBoolean vector with 2 components (<code>vec2&lt;bool&gt;</code>).\nFloating-point vector with 2 components (<code>vec2&lt;f32&gt;</code>).\nVector with 2 signed integer components (<code>vec2&lt;i32&gt;</code>).\nVector with 2 unsigned integer components (<code>vec2&lt;u32&gt;</code>).\nBoolean vector with 3 components (<code>vec3&lt;bool&gt;</code>).\nFloating-point vector with 3 components (<code>vec3&lt;f32&gt;</code>).\nVector with 3 signed integer components (<code>vec3&lt;i32&gt;</code>).\nVector with 3 unsigned integer components (<code>vec3&lt;u32&gt;</code>).\nBoolean vector with 4 components (<code>vec4&lt;bool&gt;</code>).\nFloating-point vector with 4 components (<code>vec4&lt;f32&gt;</code>).\nVector with 4 signed integer components (<code>vec4&lt;i32&gt;</code>).\nVector with 4 unsigned integer components (<code>vec4&lt;u32&gt;</code>).\nThe particle velocity in simulation space.\nType of an <code>Attribute</code>’s value.\nA vector type with 2 to 4 components.\nVector type (<code>vecN&lt;T&gt;</code>).\nAlignment of a value of this type, in bytes.\nAlignment of a value of this type, in bytes.\nAlignment of a value of this type, in bytes.\nAlignment of a value of this type, in bytes.\nAlignment of this attribute, in bytes.\nGet the alignment of the layout in bytes.\nGet the list of all existing attributes.\nAdd a new attribute to the layout builder.\nFinalize the builder pattern and build the layout from the …\nNumber of columns in the matrix.\nCheck if the layout contains the specified <code>Attribute</code>.\nNumber of components.\nThe attribute’s default value.\nScalar type of the individual vector elements (components).\nCreate an empty finalized layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve an attribute by its name.\nGenerate the WGSL attribute code corresponding to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the type a matrix type?\nCheck if this type is a numeric type.\nIs the type a numeric type?\nIs the type a numeric type?\nIs the type a scalar type?\nIs the type a vector type?\nBuild a new particle layout from the current one merged …\nMinimum binding size in bytes.\nThe attribute’s name.\nCreate a new vector type.\nCreate a new matrix type.\nCreate a new empty layout.\nNumber of rows in the matrix.\nSize of a value of this type, in bytes.\nSize of a value of this type, in bytes.\nSize of a value of this type, in bytes.\nSize of a value of this type, in bytes.\nSize of this attribute, in bytes.\nGet the size of the layout in bytes.\nThe attribute’s type.\nSingle <code>bool</code> value.\nSingle <code>bool</code> value.\nTrait to convert the elements of a vector.\nSingle <code>f32</code> value.\nSingle <code>f32</code> value.\nSingle <code>i32</code> value.\nSingle <code>i32</code> value.\nFloating-point matrix value of size 2x2 to 4x4.\nFloating-point matrix value.\nScalar value.\nVariant storage for a single (scalar) value.\nVariant storage for a scalar value.\nSingle <code>u32</code> value.\nSingle <code>u32</code> value.\nVariant storage for a simple value.\nVector value with 2 to 4 components.\nVariant storage for a vector value.\nThe zero element of the type.\nConvert this value to a <code>bool</code> value.\nCast this vector value to a <code>BVec2</code>.\nCast this vector value to a <code>BVec3</code>.\nCast this vector value to a <code>BVec4</code>.\nGet the value as a binary blob ready for GPU upload.\nGet the value as a binary blob ready for GPU upload.\nGet the value as a binary blob ready for GPU upload.\nGet the value as a binary blob ready for GPU upload.\nConvert this value to a floating-point value.\nConvert this value to an <code>i32</code> value.\nCast this vector value to a <code>IVec2</code>.\nCast this vector value to a <code>IVec3</code>.\nCast this vector value to a <code>IVec4</code>.\nCast this value to a <code>MatrixValue</code>.\nCast this value to a <code>ScalarValue</code>.\nConvert this value to an <code>u32</code> value.\nCast this vector value to a <code>UVec2</code>.\nCast this vector value to a <code>UVec3</code>.\nCast this vector value to a <code>UVec4</code>.\nCast this vector value to a <code>Vec2</code>.\nCast this vector value to a <code>Vec3</code>.\nCast this vector value to a <code>Vec3A</code>.\nCast this vector value to a <code>Vec4</code>.\nCast this value to a <code>VectorValue</code>.\nCheck equality with another value by casting the other …\nCheck equality with another value by casting the other …\nGet the type of the vector elements.\nScalar type of the elements of the matrix.\nExpression API\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the given component of the vector given its raw …\nGet the value of an element of the vector.\nGet the floating-point value of a matrix element.\nGet a slice of all the components of the vector given its …\nGet a slice of all the values of the vector.\nGet a mutable reference to the given component of the …\nGet the N-th component of the vector given its raw storage.\nGet the value of the N-th element of the vector.\nGet the floating-point value of the matrix element in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatrix type.\nCreate a new CxR matrix value from raw data.\nWorkaround for <code>impl const From&lt;BVec2&gt;</code>.\nWorkaround for <code>impl const From&lt;BVec3&gt;</code>.\nWorkaround for <code>impl const From&lt;BVec4&gt;</code>.\nWorkaround for <code>impl const From&lt;IVec2&gt;</code>.\nWorkaround for <code>impl const From&lt;IVec3&gt;</code>.\nWorkaround for <code>impl const From&lt;IVec4&gt;</code>.\nWorkaround for <code>impl const From&lt;UVec2&gt;</code>.\nWorkaround for <code>impl const From&lt;UVec3&gt;</code>.\nWorkaround for <code>impl const From&lt;UVec4&gt;</code>.\nWorkaround for <code>impl const From&lt;Vec2&gt;</code>.\nWorkaround for <code>impl const From&lt;Vec3&gt;</code>.\nWorkaround for <code>impl const From&lt;Vec4&gt;</code>.\nNode API.\nGet the scalar type of this value.\nCreate a new vector by “splatting” a scalar value into …\nGet the scalar value of an element of the vector.\nGet the scalar value of a matrix element.\nGet the scalar value of an element of the vector.\nGet the scalar value of an element of the matrix.\nGet the scalar value of the N-th element of the vector.\nGet the scalar value of the matrix element in the R-th row …\nGet the type of the value.\nGet the vector type itself.\nAbsolute value operator.\nAddition operator.\nLogical ALL operator for bool vectors.\nValue of the alpha cutoff for alpha masking.\nLogical ANY operator for bool vectors.\nAttribute expression (<code>AttributeExpr</code>).\nExpression representing the value of an attribute of a …\nBinary operation expression.\nBinary operator.\nBuilt-in expression (<code>BuiltInExpr</code>).\nExpression for getting built-in quantities related to the …\nBuilt-in operators.\nCast expression.\nExpression to cast an expression to another type.\nCeiling operator.\nCosine operator.\nCross product operator.\nDelta time, in seconds, since last effect system update.\nDistance operator.\nDivision operator.\nDot product operator.\nEvaluation context for transforming expressions into WGSL …\nNatural exponent operator.\nBase-2 exponent operator.\nLanguage expression producing a value.\nErrors raised when manipulating expressions <code>Expr</code> and node …\nHandle of an expression inside a given <code>Module</code>.\nExpression writer.\nFloor operator.\nFractional part operator.\nGeneric graph evaluation error.\nGreater-than operator.\nGreater-than-or-equal operator.\nInverse square root operator.\nInvalid expression handle not referencing any existing <code>Expr</code>…\nInvalid modifier context.\nLength operator.\nLess-than operator.\nLess-than-or-equal operator.\nLiteral expression (<code>LiteralExpr</code>).\nA literal constant expression like <code>3.0</code> or …\nNatural logarithm operator.\nBase-2 logarithm operator.\nMaximum operator.\nMinimum operator.\nLinear blend (“mix”) operator.\nContainer for expressions.\nMultiply operator.\nVector normalizing operator.\nPacking operator from <code>vec4&lt;f32&gt;</code> to <code>u32</code> (signed normalized).\nPacking operator from <code>vec4&lt;f32&gt;</code> to <code>u32</code> (unsigned …\nProperty expression (<code>PropertyExpr</code>).\nError resolving a property.\nExpression representing the value of a property of an …\nHandle of a property inside a given <code>Module</code>.\nRandom unit value of the given type.\nReal delta time, in seconds, since last effect system …\nCurrent real time since startup, in seconds. This is based …\nRemainder operator.\nSaturate operator.\nSign operator.\nSine operator.\nSmooth stepping operator.\nSquare root operator.\nStepping operator.\nSubtraction operator.\nExpression syntax error.\nTangent operator.\nTernary operation expression.\nTernary operator.\nCurrent effect system simulation time since startup, in …\nExpression type error.\nUnary operation expression.\nUnary operator.\nUniform random number operator.\nUnpacking operator from <code>u32</code> to <code>vec4&lt;f32&gt;</code> (signed …\nUnpacking operator from <code>u32</code> to <code>vec4&lt;f32&gt;</code> (unsigned …\nConstructor for 2-element vectors.\nConstructor for 3-element vectors.\nVirtual delta time, in seconds, since last effect system …\nCurrent virtual time since startup, in seconds. This is …\nGet the fourth component of a vector.\nIntermediate expression from an <code>ExprWriter</code>.\nGet the first component of a scalar or vector.\nGet the second component of a vector.\nGet the third component of a vector.\nBuild a <code>UnaryOperator::Abs</code> unary expression and append it …\nTake the absolute value of the current expression.\nBuild a <code>BinaryOperator::Add</code> binary expression and append …\nAdd the current expression with another expression.\nAdd a new property to the module.\nAdd a new property.\nBuild a <code>UnaryOperator::All</code> unary expression and append it …\nApply the logical operator “all” to the current bool …\nCreate a new writer expression representing the alpha …\nBuild a <code>UnaryOperator::Any</code> unary expression and append it …\nApply the logical operator “any” to the current bool …\nBuild an attribute expression and append it to the module.\nCreate a new writer expression from an attribute.\nBuild a binary expression and append it to the module.\nBuild a built-in expression and append it to the module.\nBuild a cast expression and append it to the module.\nCast an expression to a different type.\nBuild a <code>UnaryOperator::Ceil</code> unary expression and append it …\nApply the “ceil” operator to the current float scalar …\nBuild a <code>UnaryOperator::Cos</code> unary expression and append it …\nApply the “cos” operator to the current float scalar …\nBuild a <code>BinaryOperator::Cross</code> binary expression and append …\nCalculate the cross product of the current expression by …\nCreate a new writer expression representing the simulation …\nBuild a <code>BinaryOperator::Distance</code> binary expression and …\nCalculate the distance between the current expression and …\nBuild a <code>BinaryOperator::Div</code> binary expression and append …\nDivide the current expression by another expression.\nBuild a <code>BinaryOperator::Dot</code> binary expression and append …\nCalculate the dot product of the current expression by …\nEvaluate an expression, returning its WGSL shader code.\nEvaluate the expression in the given context.\nEvaluate the expression in the given context.\nEvaluate the expression in the given context.\nEvaluate the expression in the given context.\nBuild a <code>UnaryOperator::Exp</code> unary expression and append it …\nApply the “exp” operator to the current float scalar …\nBuild a <code>UnaryOperator::Exp2</code> unary expression and append it …\nApply the “exp2” operator to the current float scalar …\nFinalize an expression chain and return the accumulated …\nFinish using the writer, and recover the <code>Module</code> where all …\nBuild a <code>UnaryOperator::Floor</code> unary expression and append …\nApply the “floor” operator to the current float scalar …\nBuild a <code>UnaryOperator::Fract</code> unary expression and append …\nApply the “fract” operator to the current float scalar …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new writer from an existing module.\nCreate a new module from an existing collection of …\nBuild a <code>BinaryOperator::GreaterThanOrEqual</code> binary …\nApply the logical operator “greater than or equal” to …\nGet an existing expression from its handle.\nGet an existing expression from its handle.\nGet an existing property by handle.\nGet an existing property by name.\nBuild a <code>BinaryOperator::GreaterThan</code> binary expression and …\nApply the logical operator “greater than” to this …\nHas the expression any side-effect?\nHas the expression any side-effect?\nHas the expression any side-effect?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild a <code>UnaryOperator::InvSqrt</code> unary expression and append …\nApply the “inverseSqrt” (inverse square root) operator …\nCheck if the particle attribute struct is a pointer?\nIs the expression resulting in a compile-time constant …\nIs the expression resulting in a compile-time constant …\nIs the expression resulting in a compile-time constant …\nIs the expression resulting in a compile-time constant …\nIs the expression resulting in a compile-time constant?\nCheck if a unary operator is called via a functional-style …\nCheck if a binary operator is called via a …\nTry to evaluate if the cast expression is valid.\nBuild a <code>BinaryOperator::LessThanOrEqual</code> binary expression …\nApply the logical operator “less than or equal” to …\nBuild a <code>UnaryOperator::Length</code> unary expression and append …\nApply the “length” operator to the current float …\nBuild a literal expression and append it to the module.\nCreate a new writer expression from a literal constant.\nBuild a <code>UnaryOperator::Log</code> unary expression and append it …\nApply the “log” operator to the current float scalar …\nBuild a <code>UnaryOperator::Log2</code> unary expression and append it …\nApply the “log2” operator to the current float scalar …\nBuild a <code>BinaryOperator::LessThan</code> binary expression and …\nApply the logical operator “less than” to this …\nCreate a function.\nGenerate a unique local variable name.\nBuild a <code>BinaryOperator::Max</code> binary expression and append …\nTake the maximum value of the current expression and …\nBuild a <code>BinaryOperator::Min</code> binary expression and append …\nTake the minimum value of the current expression and …\nBuild a <code>TernaryOperator::Mix</code> ternary expression and append …\nBlending linearly (“mix”) two expressions with the …\nGet the modifier context of the evaluation.\nBuild a <code>BinaryOperator::Mul</code> binary expression and append …\nMultiply the current expression with another expression.\nGet the operator name.\nCheck if a binary operator needs a type suffix.\nCreate a new literal expression from a <code>Value</code>.\nCreate a new attribute expression.\nCreate a new property expression.\nCreate a new cast expression.\nCreate a new built-in operator expression.\nCreate a new writer.\nBuild a <code>UnaryOperator::Normalize</code> unary expression and …\nApply the “normalize” operator to the current float …\nBuild a <code>UnaryOperator::Pack4x8snorm</code> unary expression and …\nApply the “pack4x8snorm” operator to the current …\nBuild a <code>UnaryOperator::Pack4x8unorm</code> unary expression and …\nApply the “pack4x8unorm” operator to the current …\nGet the particle layout of the effect.\nBuild a property expression and append it to the module.\nCreate a new writer expression from a property.\nGet the list of existing properties.\nGet the property layout of the effect.\nPush a new expression into the writer.\nPush an intermediate statement during an evaluation.\nCreate a new writer expression representing a random value …\nBuild a <code>BinaryOperator::Remainder</code> binary expression and …\nCalculate the remainder of the division of the current …\nBuild a <code>UnaryOperator::Saturate</code> unary expression and …\nApply the “saturate” operator to the current float …\nBuild a <code>UnaryOperator::Sign</code> unary expression and append it …\nApply the “sign” operator to the current float scalar …\nBuild a <code>UnaryOperator::Sin</code> unary expression and append it …\nApply the “sin” operator to the current float scalar …\nBuild a <code>TernaryOperator::SmoothStep</code> ternary expression and …\nCalculate the smooth Hermite interpolation in [0:1] of the …\nBuild a <code>UnaryOperator::Sqrt</code> unary expression and append it …\nApply the “sqrt” (square root) operator to the current …\nBuild a <code>BinaryOperator::Step</code> binary expression and append …\nCalculate the step of a value with respect to a reference.\nBuild a <code>BinaryOperator::Sub</code> binary expression and append …\nSubtract another expression from the current expression.\nBuild a <code>UnaryOperator::Tan</code> unary expression and append it …\nApply the “tan” operator to the current float scalar …\nBuild a ternary expression and append it to the module.\nCreate a new writer expression representing the current …\nGet an existing expression from its handle.\nGet an existing expression from its handle.\nBuild a unary expression and append it to the module.\nBuild a <code>BinaryOperator::UniformRand</code> binary expression and …\nApply the logical operator “uniform” to this …\nBuild a <code>UnaryOperator::Unpack4x8snorm</code> unary expression and …\nApply the “unpack4x8snorm” operator to the current <code>u32</code> …\nBuild a <code>UnaryOperator::Unpack4x8unorm</code> unary expression and …\nApply the “unpack4x8unorm” operator to the current <code>u32</code> …\nThe type of the value produced by the expression.\nGet the value type of the expression.\nGet the value type of the expression.\nGet the value type of the expression.\nGet the type of the value of a built-in operator.\nGet the value type of the expression.\nBuild a <code>BinaryOperator::Vec2</code> binary expression and append …\nConstruct a <code>Vec2</code> from two scalars.\nConstruct a <code>Vec3</code> from two scalars.\nBuild a <code>UnaryOperator::W</code> unary expression and append it to …\nGet the fourth component of a vector.\nBuild a <code>UnaryOperator::X</code> unary expression and append it to …\nGet the first component of a scalar or vector.\nBuild a <code>UnaryOperator::Y</code> unary expression and append it to …\nGet the second component of a vector.\nBuild a <code>UnaryOperator::Z</code> unary expression and append it to …\nGet the third component of a vector.\nOperand the unary operation applies to.\nFirst operand the ternary operation applies to.\nLeft-hand side operand the binary operation applies to.\nUnary operator.\nBinary operator.\nTernary operator.\nRight-hand side operand the binary operation applies to.\nSecond operand the ternary operation applies to.\nThird operand the ternary operation applies to.\nGraph node to add two values.\nGraph node to get any single particle attribute.\nGraph node to divide two values.\nEffect graph.\nInput slot receiving data from outside the node.\nGraph node to multiply two values.\nGeneric graph node.\nIdentifier of a node in a graph.\nGraph node to normalize a vector value.\nOutput slot providing data generated by the node.\nSingle slot of a node.\nDefinition of a slot of a node.\nNode slot direction.\nIdentifier of a slot in a graph.\nGraph node to subtract two values.\nGraph node to get various time values related to the …\nAdd a node to the graph, without any link.\nGet the attribute this node reads.\nGet the slot definition.\nGet the slot direction.\nGet the slot direction.\nEvaluate the node from the given input expressions, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind a slot ID by slot name.\nGet the one-based node index.\nGet the one-based slot index.\nGet the slot identifier.\nGet the zero-based index of the node in the underlying …\nGet the zero-based index of the slot in the underlying …\nCreate a new input slot.\nGet a given input slot of a node by name.\nGet all input slots of a node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the slot an input slot?\nCheck if this slot is an input slot.\nIs the slot an input slot?\nCheck if this slot is an output slot.\nLink an output slot of a node to an input slot of another …\nGet the slot name.\nCreate a new node identifier.\nCreate a new slot identifier.\nCreate a new slot.\nCreate a new empty graph.\nCreate a new attribute node for the given <code>Attribute</code>.\nGet the node identifier of the node this slot is from.\nCreate a new output slot.\nGet a given output slot of a node by name.\nGet all output slots of a node.\nSet the attribute this node reads.\nGet the list of slots of this node.\nGet all slots of a node.\nUnlink an output slot of a node from an input slot of …\nUnlink all remote slots from a given slot.\nGet the slot value type.\nBoxed version of <code>Modifier</code>.\nA <code>Modifier</code> that affects to one or more groups.\nParticle initializing on spawning.\nTrait describing a modifier customizing an effect pipeline.\nContext a modifier applies to.\nA bitfield that describes which particle groups a modifier …\nParticle rendering.\nParticle rendering shader code generation context.\nTrait to customize the rendering of alive particles each …\nShader code writer.\nThe dimension of a shape to consider.\nConsider the surface of the shape only.\nParticle simulation (update).\nConsider the entire shape volume.\nModifiers influencing the acceleration of particles.\nGet a flags value with all known bits set.\nReturns a new <code>ParticleGroupSet</code> that affects all particle …\nApply the modifier to generate code.\nApply the rendering code.\nUpcast to <code>Modifier</code> trait.\nTry to cast this modifier to a <code>RenderModifier</code>.\nIf this modifier describes a <code>RenderModifier</code>, returns an …\nTry to cast this modifier to a <code>RenderModifier</code>.\nModifiers to manipulate a particle’s attributes.\nGet the list of dependent attributes required for this …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClone self.\nClone into boxed self.\nModifiers to duplicate particles.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns true if this set contains the group with the given …\nGet the context this modifier applies to.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtra functions emitted at shader top level.\nModifiers to apply forces to the particles.\nMain particle rendering code for the fragment shader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nColor gradients.\nThe set of groups that this modifier affects.\nWGSL code describing how to modulate the base color of the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nModifiers to kill particles under specific conditions.\nMain shader compute code emitted.\nThe modifier.\nNeeds uv\nCreate a new init context.\nCreate a new update context.\nReturns a new <code>ParticleGroupSet</code> that affects no particle …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nModifiers to influence the output (rendering) of each …\nLayout of attributes of a particle for the current effect.\nLayout of attributes of a particle for the current effect.\nTexture modulating the particle color.\nModifiers to set the position of particles.\nLayout of properties for the current effect.\nLayout of properties for the current effect.\nThe intersection of a source flags value with the …\nExtra functions emitted at top level, which <code>vertex_code</code> and\nRenders particles as ribbons.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns a new <code>ParticleGroupSet</code> affecting a single group.\nSize gradients.\nFlipbook sprite sheet grid size, if any.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nModifiers to set the velocity of particles.\nMain particle rendering code for the vertex shader.\nMark the attribute struct as being available through a …\nMark the attribute struct as being available through a …\nReturns a new set with the given particle group added.\nA modifier to apply a uniform acceleration to all …\nA modifier to apply a radial acceleration to all particles …\nA modifier to apply a tangential acceleration to all …\nCreate a new modifier with a constant acceleration.\nCreate a new modifier with a constant radial origin and …\nCreate a new modifier with constant values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new modifier from an acceleration expression.\nCreate a new modifier from an origin expression and an …\nCreate a new modifier from origin and axis expressions, …\nCreate a new modifier with an acceleration derived from a …\nCreate a new modifier with an acceleration derived from a …\nCreate a new modifier with an acceleration derived from a …\nA modifier to assign a value to a particle attribute.\nThe attribute to initialize.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of a <code>SetAttributeModifier</code>.\nThe initial value of the attribute.\nDuplicates a particle and places it in a group.\nThe group that the new particle will be spawned into.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>CloneModifier</code> that will duplicate particles …\nHow many seconds must elapse before the particle will be …\nA modifier to apply a force to the particle which makes it …\nA modifier to apply a linear drag force to all particles …\nAcceleration applied to particles to attract them (<code>f32</code>).\nInstantiate a <code>LinearDragModifier</code> with a constant drag …\nDrag coefficient. Higher values increase the drag force, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe influence distance of this attractor (<code>f32</code>).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum speed of attraction toward the sphere surface (<code>f32</code>…\nCreate a new modifier.\nCreate a new modifier from a drag expression.\nThe sphere origin (<code>Vec3</code>), in simulation space.\nThe sphere radius (<code>f32</code>).\nOptional shell half-thickness defining the conforming …\nOptional “stickiness” acceleration factor (<code>f32</code>).\nA modifier killing all particles that enter or exit an …\nA modifier killing all particles that enter or exit a …\nCenter of the sphere.\nCenter of the AABB.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHalf-size of the AABB.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, invert the kill condition and kill all particles …\nIf <code>true</code>, invert the kill condition and kill all particles …\nCreate a new instance of an <code>KillSphereModifier</code> from a …\nCreate a new instance of an <code>KillAabbModifier</code> from an AABB …\nSquared radius of the sphere.\nSet whether particles are killed when inside the AABB or …\nSet whether particles are killed when inside the AABB or …\nOrient a particle alongside its velocity.\nA modifier modulating each particle’s color over its …\nOrient a particle to face the camera’s position.\nA modifier to render particles using flipbook animation.\nMapping of the sample read from a texture image to the …\nModulate the particle’s base color with the full RGBA …\nModulate the alpha component (opacity) of the particle’s …\nModulate the particle’s base color with the RGB sample …\nMode of orientation of a particle’s local frame.\nOrients the particle’s local frame.\nOrient a particle such that its local XY plane is parallel …\nA modifier modulating each particle’s color by sampling …\nMakes particles round.\nA modifier to interpret the size of all particles in …\nA modifier to set the rendering color of all particles.\nA modifier to set the size of all particles.\nA modifier modulating each particle’s size over its …\nThe particle color.\nCreates a new <code>RoundModifier</code> with the given roundness.\nCreates a new <code>RoundModifier</code> that describes an ellipse.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe color gradient defining the particle color based on …\nThe size gradient defining the particle size based on its …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOrientation mode for the particles.\nCreate a new instance of this modifier with the given …\nOptional in-plane rotation expression, as a single <code>f32</code> …\nHow round the particle is.\nThe mapping of the texture image samples to the base …\nIs the particle size in screen-space logical pixel? If <code>true</code>…\nThe 2D particle (quad) size.\nFlipbook sprite sheet grid size.\nThe texture image to modulate the particle color with.\nSet the rotation expression for the particles.\nA modifier to set the position of particles on or inside a …\nA modifier to set the position of particles on a truncated …\nA modifier to set the position of particles on or inside a …\nThe circle axis, which is the normalized normal of the …\nThe cone radius at its base, perpendicularly to its axis.\nThe circle center, relative to the emitter position.\nThe sphere center, relative to the emitter position.\nThe shape dimension to set the position to.\nThe shape dimension to set the position to.\nThe shape dimension to set the position to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe cone height along its axis, between the base and top …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe circle radius.\nThe sphere radius.\nThe cone radius at its truncated top, perpendicularly to …\nRenders particles as ribbons, drawing a quad in between …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA modifier to set the velocity of particles radially on a …\nA modifier to set the velocity of particles to a spherical …\nA modifier to set the velocity of particles along the …\nThe circle axis, which is the normalized normal of the …\nAxis defining the normal to the plane containing the …\nThe circle center, relative to the emitter position.\nCenter of the sphere. The radial direction of the velocity …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOrigin from which to derive the radial axis based on the …\nThe initial speed distribution of a particle when it …\nThe initial speed distribution of a particle when it …\nThe initial speed distribution of a particle when it …\nRuntime storage component for the properties of a …\nA single property of an <code>EffectAsset</code>.\nLayout of properties for an effect.\nGet the alignment of the layout in bytes.\nCheck if the layout contains the property with the given …\nThe default value of the property.\nCreate a new empty property layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate the WGSL property code corresponding to the …\nGet the value of a stored property.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the layout contains no properties.\nMinimum binding size in bytes.\nThe property name.\nCreate a new property.\nCreate a new collection from an iterator.\nIterate over the properties of the layout and their byte …\nSet the value of a property.\nSet the value of a property, only if it changed.\nThe property size, in bytes.\nGet the size of the layout in bytes.\nThe property type.\nCreate or set some properties.")