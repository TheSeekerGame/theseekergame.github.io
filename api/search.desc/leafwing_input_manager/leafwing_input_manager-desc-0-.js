searchState.loadedDescShard("leafwing_input_manager", 0, "About\nAllows a type to be used as a gameplay action in an …\nThis <code>Bundle</code> allows entities to collect and interpret …\nSerialization-friendly representation of changes to …\nTools to control the <code>ActionState</code> of other entities …\nThis module contains <code>ActionState</code> and its supporting …\nAn <code>ActionState</code> component\nTools for working with directional axis-like user inputs …\nTools for working with button-like user inputs (mouse …\nHandles clashing inputs into a <code>InputMap</code> in a configurable …\nRun conditions for actions.\nErrors that may occur when working with 2D coordinates\nReturns the argument unchanged.\nThis module contains <code>InputMap</code> and its supporting methods …\nAn <code>InputMap</code> component\nHelpful utilities for testing input management by sending …\nProcessors for input values\nUnified input streams for working with <code>bevy::input</code> data.\nCalls <code>U::from(self)</code>.\nDirection and rotation for spinning around in 2 dimensions\nContains the main plugin exported by this crate.\nEverything you need to get started\nThe systems that power each <code>InputManagerPlugin</code>.\nType tag registration for trait objects\nHelpful abstractions over user inputs of all sorts\nCreates a <code>InputManagerBundle</code> with the given <code>InputMap</code>.\nStores presses and releases of buttons without timing …\nWill store an <code>ActionDiff</code> as well as what generated it …\nThe axis pair of the action changed\nThe action was pressed\nThe action was released\nThe value of the action changed\nThe <code>ActionDiff</code> that was generated\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf some: the entity that has the <code>ActionState&lt;A&gt;</code> component …\nThe value of the action\nThe value of the action\nThe value of the action\nThe value of the action\nThe new value of the axis\nThe new value of the action\nA component that allows the attached entity to drive the …\nRepresents the entities that an <code>ActionStateDriver</code> targets.\nMultiple targets\nNo targets\nSingle target\nThe action triggered by this entity\nAdd an entity as a target.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert an entity as a target.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no targets.\nGet an iterator for the entities targeted.\nGet the number of targets.\nRemove an entity as a target if it’s in the target set.\nThe entity whose action state should be updated\nAdd an entity as a target using a builder style pattern.\nRemove an entity as a target if it’s in the set using a …\nMetadata about an <code>Actionlike</code> action\nStores the canonical input-method-agnostic representation …\nA reference of the <code>ActionData</code> corresponding to the <code>action</code> …\nA mutable reference of the <code>ActionData</code> corresponding to the …\nA mutable reference of the <code>ActionData</code> corresponding to the …\nApplies an <code>ActionDiff</code> (usually received over the network) …\nGet the <code>DualAxisData</code> from the binding that triggered the …\nThe <code>DualAxisData</code> of the binding that triggered the action.\nGet the <code>DualAxisData</code> associated with the corresponding …\nGet the value associated with the corresponding <code>action</code>, …\nConsumes the <code>action</code>\nConsumes all actions\nIs this <code>action</code> currently consumed?\nWas this action consumed by <code>ActionState::consume</code>?\nDisables the <code>action</code>\nDisables all actions\nIs this <code>action</code> currently disabled?\nIs the action disabled?\nEnables the <code>action</code>\nEnables all actions\nThe <code>state</code> of the action in the <code>FixedMain</code> schedule\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhich actions were just pressed?\nWhich actions were just released?\nWhich actions are currently pressed?\nWhich actions are currently released?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWas the action pressed since the last time it was ticked?\nWas this <code>action</code> pressed since the last time tick was …\nWas the action released since the last time it was ticked?\nWas this <code>action</code> released since the last time tick was …\nReturns an owned list of the <code>Actionlike</code> keys in this …\nPress the <code>action</code>\nIs the action currently pressed?\nIs this <code>action</code> currently pressed?\nRelease the <code>action</code>\nReleases all actions\nIs the action currently released?\nIs this <code>action</code> currently released?\nManually sets the <code>ActionData</code> of the corresponding <code>action</code>\nIs the action pressed or released?\nAdvances the time for all actions\nUpdates the <code>ActionState</code> based on a vector of <code>ActionData</code>, …\nThe <code>state</code> of the action in the <code>Main</code> schedule\nGet the value associated with the corresponding <code>action</code> if …\nThe “value” of the binding that triggered the action.\nAn <code>AxisType</code> could not be converted into a more specialized …\nThe directions for single-axis inputs.\nThe type of axis used by a <code>UserInput</code>.\nDownward direction.\nTwo directional axes combined as one input.\nA wrapped <code>Vec2</code> that represents the combination of two …\nThe directions for dual-axis inputs.\nAn axis for dual-axis inputs.\nInput associated with a gamepad, such as the triggers or …\nLeftward direction.\nInput associated with movement of the mouse\nThe motion direction of the mouse.\nInput associated with a mouse wheel.\nThe motion direction of the mouse wheel.\nNegative direction.\nPositive direction.\nRightward direction.\nA single directional axis with a configurable trigger zone.\nUpward direction.\nA virtual Axis that you can get a value between -1 and 1 …\nA virtual DPad that you can get an <code>DualAxis</code> from.\nHorizontal movement.\nHorizontal movement.\nThe X-axis (typically horizontal movement).\nVertical movement.\nVertical movement.\nThe Y-axis (typically vertical movement).\nGenerates a <code>VirtualAxis</code> corresponding to the <code>AD</code> keyboard …\nGenerates a <code>VirtualDPad</code> corresponding to the arrow …\nReturns the corresponding <code>DualAxisType</code>.\nReturns the corresponding <code>DualAxisType</code>.\nReturns the <code>DualAxisType</code> associated with this direction.\nReturns the <code>AxisDirection</code> (positive or negative) on the …\nThe axis that is being checked.\nClamps the magnitude of the axis\nThe <code>Direction2d</code> that this axis is pointing towards, if any\nReturns the positive and negative <code>DualAxisDirection</code>s for …\nThe input that represents the down direction in this …\nGenerates a <code>VirtualDPad</code> corresponding to the DPad on a …\nCreates a <code>Vec2</code> with the specified <code>value</code> on this axis and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function for generating a <code>VirtualAxis</code> from …\nCreates a new <code>DualAxisData</code> directly from a <code>Vec2</code>\nReturns the full active value along an axis.\nReturns the full active value along both axes.\nGenerates a <code>VirtualDPad</code> corresponding to the face buttons …\nReturns the value along the current axis.\nGenerates a <code>VirtualAxis</code> corresponding to the horizontal …\nGenerates a <code>VirtualAxis</code> corresponding to the horizontal …\nGenerates a <code>VirtualAxis</code> corresponding to the horizontal …\nGet the “value” of this axis. If a processor is set, …\nGet the “value” of these axes. If a processor is set, …\nGet the “value” of these axes. If a processor is set, …\nGet the “value” of the axis. If a processor is set, it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the given <code>value</code> represents an active input in …\nChecks if the given <code>value</code> represents an active input in …\nThe input that represents the left direction in this …\nCreates a <code>DualAxis</code> for the left analogue stick of the …\nHow far from the origin is this axis’s position?\nThe square of the axis’ magnitude\nMerge the state of this <code>DualAxisData</code> with another.\nCreates a <code>DualAxis</code> corresponding to horizontal and …\nGenerates a <code>VirtualDPad</code> corresponding to discretized mouse …\nCreates a <code>SingleAxis</code> corresponding to horizontal …\nCreates a <code>SingleAxis</code> corresponding to vertical <code>MouseMotion</code> …\nCreates a <code>DualAxis</code> corresponding to horizontal and …\nGenerates a <code>VirtualDPad</code> corresponding to discretized …\nCreates a <code>SingleAxis</code> corresponding to horizontal <code>MouseWheel</code>…\nCreates a <code>SingleAxis</code> corresponding to vertical <code>MouseWheel</code> …\nReturns the negative <code>DualAxisDirection</code> for the current …\nThe input that represents the negative direction of this …\nCreates a <code>SingleAxis</code> with the specified axis type.\nCreates a <code>DualAxis</code> with the specified axis types.\nCreates a new <code>DualAxisData</code> from the provided (x,y) …\nReturns the positive <code>DualAxisDirection</code> for the current …\nThe input that represents the positive direction of this …\nThe processor used to handle input values.\nThe processor used to handle input values.\nThe processor used to handle input values.\nThe processor used to handle input values.\nThe input that represents the right direction in this …\nCreates a <code>DualAxis</code> for the right analogue stick of the …\nThe <code>Rotation</code> (measured clockwise from midnight) that this …\nThe input that represents the up direction in this virtual …\nGenerates a <code>VirtualAxis</code> corresponding to the horizontal …\nGenerates a <code>VirtualAxis</code> corresponding to the vertical DPad …\nGenerates a <code>VirtualAxis</code> corresponding to the vertical …\nGenerates a <code>VirtualDPad</code> corresponding to the <code>WASD</code> keys on …\nGenerates a <code>VirtualAxis</code> corresponding to the <code>WS</code> keyboard …\nThe value along the x-axis, typically ranging from -1 to 1\nThe horizontal axis that is being checked.\nThe (x, y) values, each typically ranging from -1 to 1\nThe value along the y-axis, typically ranging from -1 to 1\nThe vertical axis that is being checked.\nThe current state of a particular button, usually …\nCorresponds to <code>-y</code>\nCorresponds to <code>-y</code>\nThe button has been pressed since the most recent tick\nThe button has been released since the most recent tick\nCorresponds to <code>-x</code>\nCorresponds to <code>-x</code>\nA buttonlike-input triggered by <code>MouseMotion</code> events\nA buttonlike-input triggered by <code>MouseWheel</code> events\nThis button is currently pressed (and was pressed before …\nThis button is currently released (and was released before …\nCorresponds to <code>+x</code>\nCorresponds to <code>+x</code>\nCorresponds to <code>+y</code>\nCorresponds to <code>+y</code>\nReturns the corresponding <code>DualAxisDirection</code>.\nReturns the corresponding <code>DualAxisDirection</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHas the button been pressed since the last time …\nHas the button been released since the last time …\nPresses the button\nIs the button currently pressed?\nReleases the button\nIs the button currently released?\nCauses <code>just_pressed</code> and <code>just_released</code> to become false\nHow should clashing inputs by handled by an <code>InputMap</code>?\nAll matching inputs will always be pressed\nOnly press the action that corresponds to the longest chord\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the list of all possible clash strategies.\nRun condition that is active if <code>ActionState::just_pressed</code> …\nRun condition that is active if <code>ActionState::just_released</code> …\nRun condition that is active if <code>ActionState::pressed</code> is …\nStateful run condition that can be toggled via an action …\nThe supplied vector-like struct was too close to zero to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Multi-Map that allows you to map actions to multiple …\nReturns an iterator over all registered actions.\nReturns an iterator over all registered action-input …\nClears the map, removing all action-input bindings.\nClears all input bindings associated with the <code>action</code>.\nClears any <code>Gamepad</code> associated with the entity controlled …\nConverts a <code>HashMap</code> mapping actions to multiple <code>UserInput</code>s …\nReturns the argument unchanged.\nFetches the <code>Gamepad</code> associated with the entity controlled …\nReturns a reference to the inputs associated with the …\nReturns a mutable reference to the inputs mapped to <code>action</code>\nResolve clashing inputs, removing action presses that have …\nInserts a binding between an <code>action</code> and a specific <code>input</code>. …\nInsert a mapping between the simultaneous combination of …\nInserts a mapping between the simultaneous combination of …\nInserts multiple action-input bindings. Note that the type …\nInserts bindings between the same <code>action</code> and multiple …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map contains no action-input bindings.\nReturns an iterator over all registered actions with their …\nCount the total number of registered input bindings.\nMerges the provided <code>InputMap</code> into this <code>map</code>, combining …\nCreates an <code>InputMap</code> from an iterator over action-input …\nChecks if the <code>action</code> are currently pressed by any of the …\nProcesses <code>UserInput</code> bindings for each action and generates …\nRemoves the input for the <code>action</code> if it exists\nRemoves the input for the <code>action</code> at the provided index.\nAssigns a particular <code>Gamepad</code> to the entity controlled by …\nAssociates an <code>action</code> with a specific <code>input</code>. Multiple …\nAssigns a particular <code>Gamepad</code> to the entity controlled by …\nAdds multiple action-input bindings with the same input …\nAssociates an <code>action</code> with multiple <code>inputs</code>.\nSend fake input events for testing purposes\nSend fake UI interaction for testing purposes.\nQuery input state directly for testing purposes.\nPresses all <code>bevy::ui</code> buttons with the matching <code>Marker</code> …\nHovers over all <code>bevy::ui</code> buttons with the matching <code>Marker</code> …\nSimulates an activated event for the given <code>input</code>, pressing …\nSimulates an activated event for the given <code>input</code>, using …\nChecks if the <code>input</code> is currently pressed or active.\nChecks if the <code>input</code> is currently pressed or active on the …\nRetrieves the values on all axes represented by the <code>input</code>.\nRetrieves the values on all axes represented by the <code>input</code> …\nSimulates a released or deactivated event for the given …\nSimulates a released or deactivated event for the given …\nResets all inputs in the <code>MutableInputStreams</code> to their …\nSimulates axis value changed events for the given <code>input</code>. …\nSimulates axis value changed events for the given <code>input</code>, …\nProcessors for dual-axis input values\nProcessors for single-axis input values\nThe <code>DualAxisInverted</code> that inverts both axes.\nSpecifies a circular region defining acceptable ranges for …\nA wrapper around <code>CircleBounds</code> to represent circular value …\nA scaled version of <code>CircleExclusion</code> with the bounds set to …\nA wrapper around <code>CircleDeadZone</code> to represent scaled …\nSpecifies a cross-shaped region for excluding dual-axis …\nA wrapper around <code>CircleExclusion</code> to represent unscaled …\nA user-defined processor that implements …\nA trait for creating custom processor that handles …\nA wrapper around <code>DualAxisDeadZone</code> to represent scaled …\nConverts input values into three discrete values along …\nSpecifies a square-shaped region defining acceptable …\nA scaled version of <code>DualAxisExclusion</code> with the bounds set …\nSpecifies a cross-shaped region for excluding dual-axis …\nFlips the sign of dual-axis input values, resulting in a …\nA processor for dual-axis input values, accepting a <code>Vec2</code> …\nScales dual-axis input values using a specified multiplier …\nA wrapper around <code>DualAxisExclusion</code> to represent unscaled …\nUnlimited <code>CircleBounds</code>.\nUnlimited <code>DualAxisBounds</code>.\nA wrapper around <code>DualAxisInverted</code> to represent inversion.\nNo processor is applied.\nThe <code>DualAxisInverted</code> that only inverts the X-axis inputs.\nThe <code>DualAxisInverted</code> that only inverts the Y-axis inputs.\nProcesses input values sequentially through a sequence of …\nA trait for registering a specific <code>CustomDualAxisProcessor</code>.\nA wrapper around <code>DualAxisSensitivity</code> to represent …\nA wrapper around <code>DualAxisBounds</code> to represent value bounds.\nProvides methods for configuring and manipulating the …\nZero-size <code>CircleExclusion</code>, leaving values as is.\nZero-size <code>CircleDeadZone</code>, only restricting values to a …\nZero-size <code>DualAxisExclusion</code>, leaving values as is.\nZero-size <code>DualAxisDeadZone</code>, only restricting values to the …\nCreates a <code>DualAxisBounds</code> that restricts values within the …\nCreates a <code>DualAxisExclusion</code> that ignores values within the …\nCreates a <code>DualAxisDeadZone</code> that excludes values within the …\nCreates a <code>DualAxisSensitivity</code> with the same value for both …\nCreates a <code>DualAxisBounds</code> that restricts values to a …\nCreates a <code>DualAxisBounds</code> that restricts values to a …\nCreates a <code>DualAxisBounds</code> that only restricts X values to a …\nCreates a <code>DualAxisBounds</code> that only restricts Y values to a …\nCreates a <code>DualAxisBounds</code> that restricts values to a …\nCreates a <code>DualAxisBounds</code> that restricts values to a …\nCreates a <code>DualAxisBounds</code> that only restricts X values to a …\nCreates a <code>DualAxisBounds</code> that only restricts Y values to a …\nReturns the <code>CircleBounds</code> used by this deadzone.\nReturns the bounds for inputs along each axis.\nReturns the <code>DualAxisBounds</code> used by this deadzone.\nReturns the bounds for the X-axis inputs.\nReturns the bounds for the Y-axis inputs.\nClamps the magnitude of <code>input_value</code> within the bounds.\nClamps <code>input_value</code> within the bounds.\nIs the <code>input_value</code> is within the bounds?\nChecks whether the <code>input_value</code> should be excluded.\nIs <code>input_value</code> is within the bounds?\nIs the <code>input_value</code> within the exclusion range?\nReturns the dead zone for the X-axis inputs.\nReturns the dead zone for the Y-axis inputs.\nReturns the dead zones for inputs along each axis.\nCreates a <code>CircleBounds</code> that restricts the values to a …\nCreates a <code>CircleExclusion</code> that ignores input values below …\nCreates a <code>CircleDeadZone</code> that excludes input values below …\nCreates a <code>DualAxisBounds</code> that restricts values within the …\nCreates a <code>DualAxisExclusion</code> that excludes input values …\nCreates a <code>DualAxisDeadZone</code> that excludes input values …\nAppends an <code>DualAxisProcessor::Digital</code> processor as the …\nExcludes input values with a magnitude less than the <code>radius</code>…\nExcludes values within the specified region.\nReturns the <code>CircleExclusion</code> used by this deadzone.\nReturns the <code>DualAxisExclusion</code> used by this deadzone.\nReturns the exclusion range for the X-axis inputs.\nReturns the exclusion range for the Y-axis inputs.\nReturns the exclusion ranges for inputs along each axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMultiples the <code>input_value</code> by the specified inversion …\nAppends a <code>DualAxisInverted::ALL</code> processor as the next …\nAre inputs inverted on both axes?\nAppends a <code>DualAxisInverted::ONLY_X</code> processor as the next …\nAppends a <code>DualAxisInverted::ONLY_Y</code> processor as the next …\nReturns the minimum and maximum radii of the live zone …\nCreates a <code>CircleBounds</code> that restricts input values to a …\nCreates a <code>CircleExclusion</code> that ignores input values below …\nCreates a <code>CircleDeadZone</code> that excludes input values below …\nCreates a <code>DualAxisBounds</code> that restricts values within the …\nCreates a <code>DualAxisExclusion</code> that ignores values within the …\nCreates a <code>DualAxisDeadZone</code> that excludes values within the …\nCreates a <code>DualAxisSensitivity</code> with the given values for …\nNormalizes input values into the live zone.\nNormalizes input values into the live zone.\nCreates a <code>DualAxisBounds</code> that only restricts X values …\nCreates a <code>DualAxisExclusion</code> that only ignores X values …\nCreates a <code>DualAxisDeadZone</code> that only excludes X values …\nCreates a <code>DualAxisSensitivity</code> that only affects the X-axis …\nCreates a <code>DualAxisBounds</code> that only restricts Y values …\nCreates a <code>DualAxisExclusion</code> that only ignores Y values …\nCreates a <code>DualAxisDeadZone</code> that only excludes Y values …\nCreates a <code>DualAxisSensitivity</code> that only affects the Y-axis …\nCreates a <code>DualAxisProcessor::Pipeline</code> from the given …\nComputes the result by processing the <code>input_value</code>.\nComputes the result by processing the <code>input_value</code>.\nReturns the radius of the bounds.\nReturns the radius of the circle.\nReturns the radius of the circle.\nRegisters the specified <code>CustomDualAxisProcessor</code>.\nReplaces the current processing pipeline with the …\nResets the processing pipeline, removing any currently …\nMultiples the <code>input_value</code> by the specified sensitivity …\nCreates a <code>CircleDeadZone</code> using <code>self</code> as the exclusion range.\nCreates a <code>DualAxisDeadZone</code> using <code>self</code> as the exclusion …\nReturns the sensitivity values.\nAppends a <code>DualAxisSensitivity</code> processor as the next …\nAppends a <code>DualAxisSensitivity</code> processor as the next …\nAppends a <code>DualAxisSensitivity</code> processor as the next …\nCreates a <code>DualAxisBounds</code> that restricts values within the …\nCreates a <code>DualAxisExclusion</code> that ignores values within the …\nCreates a <code>DualAxisDeadZone</code> that excludes values within the …\nCreates a <code>DualAxisBounds</code> that restricts values within the …\nCreates a <code>DualAxisExclusion</code> that ignores values within the …\nCreates a <code>DualAxisDeadZone</code> that excludes values within the …\nCreates a <code>DualAxisBounds</code> that only restricts X values …\nCreates a <code>DualAxisExclusion</code> that only ignores X values …\nCreates a <code>DualAxisDeadZone</code> that only excludes X values …\nCreates a <code>DualAxisBounds</code> that only restricts Y values …\nCreates a <code>DualAxisExclusion</code> that only ignores Y values …\nCreates a <code>DualAxisDeadZone</code> that only excludes Y values …\nAppends a <code>DualAxisBounds</code> processor as the next processing …\nAppends a <code>DualAxisBounds</code> processor as the next processing …\nAppends a <code>DualAxisBounds</code> processor as the next processing …\nAppends a <code>DualAxisBounds</code> processor as the next processing …\nAppends a <code>DualAxisBounds</code> processor as the next processing …\nAppends a <code>DualAxisBounds</code> processor as the next processing …\nAppends a <code>CircleBounds</code> processor as the next processing …\nAppends a <code>CircleDeadZone</code> processor as the next processing …\nAppends a <code>CircleExclusion</code> processor as the next processing …\nAppends a <code>DualAxisDeadZone</code> processor as the next …\nAppends a <code>DualAxisDeadZone</code> processor as the next …\nAppends a <code>DualAxisExclusion</code> processor as the next …\nAppends a <code>DualAxisExclusion</code> processor as the next …\nAppends a <code>DualAxisDeadZone</code> processor as the next …\nAppends a <code>DualAxisDeadZone</code> processor as the next …\nAppends a <code>DualAxisExclusion</code> processor as the next …\nAppends a <code>DualAxisExclusion</code> processor as the next …\nAppends a <code>DualAxisDeadZone</code> processor as the next …\nAppends a <code>DualAxisDeadZone</code> processor as the next …\nAppends a <code>DualAxisExclusion</code> processor as the next …\nAppends a <code>DualAxisExclusion</code> processor as the next …\nAppends the given <code>DualAxisProcessor</code> as the next processing …\nAppends the given <code>next_processor</code> as the next processing …\nIs the given <code>input_value</code> within the bounds?\nIs the given <code>input_value</code> within the bounds?\nIs the given <code>input_value</code> within the exclusion range?\nIs the given <code>input_value</code> within the exclusion ranges?\nIs the given <code>input_value</code> within the live zone?\nIs the given <code>input_value</code> within the lower live zone?\nIs the given <code>input_value</code> within the upper live zone?\nSpecifies an acceptable min-max range for valid …\nA scaled version of <code>AxisExclusion</code> with the bounds set to …\nSpecifies an exclusion range for excluding single-axis …\nA processor for single-axis input values, accepting a <code>f32</code> …\nA user-defined processor that implements …\nA trait for creating custom processor that handles …\nA wrapper around <code>AxisDeadZone</code> to represent scaled deadzone.\nConverts input values into three discrete values, similar …\nA wrapper around <code>AxisExclusion</code> to represent unscaled …\nUnlimited <code>AxisBounds</code>.\nFlips the sign of input values, resulting in a directional …\nNo processor is applied.\nProcesses input values sequentially through a sequence of …\nA trait for registering a specific <code>CustomAxisProcessor</code>.\nScales input values using a specified multiplier to …\nA wrapper around <code>AxisBounds</code> to represent value bounds.\nProvides methods for configuring and manipulating the …\nZero-size <code>AxisExclusion</code>, leaving values as is.\nZero-size <code>AxisDeadZone</code>, only restricting values to the …\nCreates an <code>AxisBounds</code> that restricts values to a minimum …\nCreates an <code>AxisBounds</code> that restricts values to a maximum …\nReturns the <code>AxisBounds</code> used by this deadzone.\nClamps <code>input_value</code> within the bounds.\nIs the given <code>input_value</code> within the bounds?\nIs <code>input_value</code> within the deadzone?\nCreates an <code>AxisBounds</code> that restricts values to the range …\nCreates an <code>AxisExclusion</code> that ignores values within the …\nCreates an <code>AxisDeadZone</code> that excludes input values within …\nAppends an <code>AxisProcessor::Digital</code> processor as the next …\nExcludes values within the specified range.\nReturns the <code>AxisExclusion</code> used by this deadzone.\nCreates a <code>DualAxisBounds</code> using <code>self</code> for both axes.\nCreates a <code>DualAxisExclusion</code> using <code>self</code> for both axes.\nCreates a <code>DualAxisDeadZone</code> using <code>self</code> for both axes.\nCreates a <code>DualAxisBounds</code> only using <code>self</code> for the X-axis.\nCreates a <code>DualAxisExclusion</code> only using <code>self</code> for the X-axis.\nCreates a <code>DualAxisDeadZone</code> only using <code>self</code> for the X-axis.\nCreates a <code>DualAxisBounds</code> only using <code>self</code> to the Y-axis.\nCreates a <code>DualAxisExclusion</code> only using <code>self</code> to the Y-axis.\nCreates a <code>DualAxisDeadZone</code> only using <code>self</code> to the Y-axis.\nCreates a <code>DualAxisBounds</code> using <code>self</code> to the Y-axis with the …\nCreates a <code>DualAxisExclusion</code> using <code>self</code> to the Y-axis with …\nCreates a <code>DualAxisDeadZone</code> using <code>self</code> to the Y-axis with …\nCreates a <code>DualAxisBounds</code> using <code>self</code> to the X-axis with the …\nCreates a <code>DualAxisExclusion</code> using <code>self</code> to the X-axis with …\nCreates a <code>DualAxisDeadZone</code> using <code>self</code> to the X-axis with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAppends an <code>AxisProcessor::Inverted</code> processor as the next …\nReturns the minimum and maximum bounds of the lower live …\nReturns the minimum and maximum bounds of the upper live …\nReturns the maximum bound.\nReturns the maximum bounds.\nReturns the minimum bound.\nReturns the minimum bound.\nReturns the minimum and maximum bounds.\nReturns the minimum and maximum bounds.\nCreates an <code>AxisBounds</code> that restricts values to the given …\nCreates an <code>AxisExclusion</code> that ignores values within the …\nCreates an <code>AxisDeadZone</code> that excludes input values within …\nNormalizes input values into the live zone.\nCreates an <code>AxisProcessor::Pipeline</code> from the given …\nComputes the result by processing the <code>input_value</code>.\nComputes the result by processing the <code>input_value</code>.\nRegisters the specified <code>CustomAxisProcessor</code>.\nReplaces the current processing pipeline with the …\nResets the processing pipeline, removing any currently …\nCreates an <code>AxisDeadZone</code> using <code>self</code> as the exclusion range.\nAppends an <code>AxisProcessor::Sensitivity</code> processor as the …\nCreates an <code>AxisBounds</code> that restricts values within the …\nCreates an <code>AxisExclusion</code> that ignores values within the …\nCreates an <code>AxisDeadZone</code> that excludes input values below a …\nAppends an <code>AxisBounds</code> processor as the next processing …\nAppends an <code>AxisBounds</code> processor as the next processing …\nAppends an <code>AxisDeadZone</code> processor as the next processing …\nAppends an <code>AxisDeadZone</code> processor as the next processing …\nAppends an <code>AxisExclusion</code> processor as the next processing …\nAppends an <code>AxisExclusion</code> processor as the next processing …\nAppends the given <code>AxisProcessor</code> as the next processing …\nAppends the given <code>next_processor</code> as the next processing …\nIs the given <code>input_value</code> within the bounds?\nIs the given <code>input_value</code> within the exclusion range?\nIs the given <code>input_value</code> within the lower live zone?\nIs the given <code>input_value</code> within the upper live zone?\nA collection of <code>ButtonInput</code> structs, which can be used to …\nA mutable collection of <code>ButtonInput</code> structs, which can be …\nAre all the <code>buttons</code> pressed?\nIs at least one of the <code>inputs</code> pressed?\nThe <code>Gamepad</code> that this struct will detect inputs from\nThe <code>Gamepad</code> that this struct will detect inputs from\nIs the <code>button</code> pressed?\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an <code>InputStreams</code> from a <code>World</code>\nConstruct a <code>MutableInputStreams</code> from the <code>World</code>\nA <code>GamepadAxis</code> <code>Axis</code> stream\nA <code>GamepadAxis</code> <code>Axis</code> stream\nA <code>GamepadButton</code> <code>Axis</code> stream\nA <code>GamepadButton</code> <code>Axis</code> stream\nA <code>GamepadButton</code> <code>Input</code> stream\nA <code>GamepadButton</code> <code>Input</code> stream\nEvents used for mocking gamepad-related inputs\nA list of registered gamepads\nA list of registered <code>Gamepads</code>\nGuess which registered <code>Gamepad</code> should be used.\nGet the axis pair associated to the user input.\nIs the <code>input</code> matched by the <code>InputStreams</code>?\nGet the “value” of the input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvents used for mocking keyboard-related inputs\nA <code>KeyCode</code> <code>ButtonInput</code> stream\nA <code>KeyCode</code> <code>ButtonInput</code> stream\nEvents used for mocking <code>MouseButton</code> inputs\nA <code>MouseButton</code> <code>Input</code> stream\nA <code>MouseButton</code> <code>Input</code> stream\nA <code>MouseMotion</code> event stream\nA <code>MouseMotion</code> event stream\nA <code>MouseWheel</code> event stream\nA <code>MouseWheel</code> event stream\nCorresponds to a positive rotation\nCorresponds to a negative rotation\nThe number of micro-degrees in one degree\nThe direction that points straight right\nThe number of micro-degrees that make up a full circle\nThe number of micro-degrees that make up a half-circle\nThe direction that points straight up\nThe direction that points halfway between up and right\nThe direction that points halfway between left and up\nA type that can represent an orientation in 2D space\nA discretized 2-dimensional rotation\nA direction that a <code>Rotation</code> can be applied in.\nThe direction that points straight down\nThe direction that points halfway between down and right\nThe direction that points halfway between down and left\nThe direction that points straight left\nAsserts that <code>self</code> is approximately equal to <code>other</code>\nAsserts that <code>self</code> is approximately equal to <code>other</code>\nReturns the absolute distance between <code>self</code> and <code>other</code> as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Rotation</code> from degrees, measured …\nConstruct a <code>Rotation</code> from a whole number of degrees, …\nConstruct a <code>Rotation</code> from radians, measured …\nConstructs a <code>Rotation</code> from an (x,y) Euclidean coordinate\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this rotation into degrees, measured …\nConverts this rotation into radians, measured …\nConverts this rotation into an (x, y) pair with magnitude 1\nReturns the exact internal measurement, stored in …\nCreates a new <code>Rotation</code> from a whole number of millionths …\nReverse the direction into the opposite enum variant\nRotates <code>self</code> towards <code>target_orientation</code> by up to …\nRotates <code>self</code> towards <code>target_orientation</code> by up to …\nWhich <code>RotationDirection</code> is the shortest to rotate towards …\nWhich <code>RotationDirection</code> is the shortest to rotate towards …\nThe sign of the corresponding <code>Rotation</code>\nA <code>Plugin</code> that collects <code>ButtonInput</code> from disparate sources, …\n<code>SystemSet</code>s for the <code>crate::systems</code> used by this crate\nManually control the <code>ActionState</code>\nAdvances action timers.\nCollects input data to update the <code>ActionState</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a version of the plugin intended to run on the …\nGenerates an <code>Events</code> stream of <code>ActionDiff</code> from <code>ActionState</code>\nRelease all inputs when an <code>InputMap&lt;A&gt;</code> is removed to …\nWe are about to enter the <code>FixedMain</code> schedule, so we:\nWe are about to enter the <code>Main</code> schedule, so we:\nAdvances actions timer.\nFetches all the relevant <code>ButtonInput</code> resources to update …\nWhen a button with a component of type <code>A</code> is clicked, press …\nThe type of unique identifiers this registry uses. …\nRegistry implementation mapping unique identifiers of type …\nA trait for registering type tags.\nRegistry mapping unique identifiers of types to their …\nThe trait object type this registry maps deserialize …\nDeserialize a trait object with <code>deserializer</code>, using this …\nReturns the argument unchanged.\nGets the deserialize function for <code>id</code>.\nGets the trait object name, for diagnostic purposes.\nCalls <code>U::from(self)</code>.\nCreates a new registry, using <code>trait_object_name</code> as the …\nRegister <code>deserialize_fn</code> as the deserialize function for <code>id</code>.\nRegister a default deserialize function for type <code>T</code> as the …\nRegisters the specified type tag into the <code>MapRegistry</code>.\nCorresponds to <code>KeyCode::AltLeft</code> and <code>KeyCode::AltRight</code>.\nA combination of buttons, pressed simultaneously\nCorresponds to <code>KeyCode::ControlLeft</code> and …\nTwo paired axes of continuous motion\nA button on a gamepad\nThe different kinds of supported input bindings.\nA keyboard modifier that combines two <code>KeyCode</code> values into …\nA keyboard modifier, like <code>Ctrl</code> or <code>Alt</code>, which doesn’t …\nA button on a mouse\nA discretized mouse movement\nA discretized mousewheel movement\nThe physical location of a key on the keyboard.\nThe basic input events that make up a <code>UserInput</code>.\nThe key that makes letters capitalized, corresponding to …\nA single button\nA single axis of continuous motion\nThe OS or “Windows” key, corresponding to …\nSome combination of user input, which may cross input-mode …\nA virtual axis that you can get a <code>SingleAxis</code> from\nA virtual D-pad that you can get a <code>DualAxis</code> from\nAxes representing mouse movement or gamepad input.\nCreates a <code>UserInput::Chord</code> from an iterator over inputs of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGamepad buttons, independent of a <code>Gamepad</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the number of buttons in the <code>UserInput</code> 0?\nReturns the pair of <code>KeyCode</code> values associated with this …\nPhysical key locations.\nThe number of logical inputs that make up the <code>UserInput</code>.\nCreates a <code>UserInput::Chord</code> from a <code>Modifier</code> and an <code>input</code> …\nMouse buttons\nDiscretized mouse motion inputs\nDiscretized mouse wheel inputs\nHow many of the provided <code>buttons</code> are found in the <code>UserInput</code>\nReturns the raw inputs that make up this <code>UserInput</code>")