searchState.loadedDescShard("bevy_render", 1, "Border color to use when <code>address_mode`` is [</code>…\nIf this is enabled, this is a comparison sampler using the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nConvert a texture from a format to another. Only a few …\nFallback image for <code>TextureViewDimension::Cube</code>.\nFallback image for <code>TextureViewDimension::CubeArray</code>.\nFallback image for <code>TextureViewDimension::D1</code>.\nFallback image for <code>TextureViewDimension::D2</code>.\nFallback image for <code>TextureViewDimension::D2Array</code>.\nFallback image for <code>TextureViewDimension::D3</code>.\ndefault is a 1x1x1 all ‘1.0’ texture\nCreates image settings with linear sampling by default.\nCreates image settings with nearest sampling by default.\nThe default image sampler to use when <code>ImageSampler</code> is set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nLoad a bytes buffer in a <code>Image</code>, according to type …\nConverts a <code>DynamicImage</code> to an <code>Image</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nRetrieves a texture that matches the <code>descriptor</code>. If no …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment, without the …\nReturns the height of a 2D image.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether the texture format is compressed or uncompressed\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns an image sampler with <code>ImageFilterMode::Linear</code> min …\nReturns a sampler descriptor with <code>Linear</code> min and mag …\nProcesses the asset in an asynchronous closure.\nProcesses the asset in an asynchronous closure.\nMaximum level of detail (i.e. mip level) to use.\nMinimum level of detail (i.e. mip level) to use.\nHow to filter the texture when it needs to be magnified …\nHow to filter the texture when it needs to be minified …\nHow to filter between mip map levels\nReturns an image sampler with <code>ImageFilterMode::Nearest</code> min …\nReturns a sampler descriptor with <code>Nearest</code> min and mag …\nCreates a new image from raw binary data and the …\nCreates a new image from raw binary data and the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the size of a pixel in bytes of the format.\nConverts the extracted image into a <code>GpuImage</code>.\nChanges the <code>size</code>, asserting that the total number of data …\nTakes a 2D image containing vertically stacked images of …\nThe intersection of a source flags value with the …\nResizes the image to the new size, by removing information …\nThe <code>ImageSampler</code> to use during rendering.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns the size of a 2D image.\nReturns the size of a 2D image as f32.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert a <code>Image</code> to a <code>DynamicImage</code>. Useful for editing image\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdates the cache and only retains recently used textures.\nUpdates the <code>TextureCache</code> to only retains recently used …\nReturns the width of a 2D image.\nConfigures basic color grading parameters to adjust the …\nConfiguration resource for Multi-Sample Anti-Aliasing.\nExposure value (EV) offset, measured in stops.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNon-linear luminance adjustment applied before …\nRetrieve this target’s main texture’s color attachment.\nRetrieve this target’s “unsampled” main texture’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if and only if the main texture is …\nThe “main” unsampled texture.\nThe <em>other</em> “main” unsampled texture. In most cases you …\nThe <em>other</em> “main” unsampled texture view. In most cases …\nThe “main” unsampled texture.\nThe final texture this view will render to.\nThe format of the final texture this view will render to\nThis will start a new “post process write”, which …\nSaturation adjustment applied after tonemapping. Values …\nSaturation adjustment applied before tonemapping. Values …\nCreates a 3D rangefinder for a view\nThe “main” sampled texture.\nThe “main” sampled texture view.\nLabel for the <code>calculate_bounds</code> and <code>calculate_bounds_2d</code> …\nLabel for the <code>check_visibility</code> system updating …\nAn entity that is invisible in the hierarchy.\nAn entity that cannot be seen from any views.\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nThe total number of layers supported.\nLabel for the <code>update_frusta&lt;OrthographicProjection&gt;</code> system.\nLabel for the <code>update_frusta&lt;PerspectiveProjection&gt;</code> system.\nLabel for the <code>update_frusta&lt;Projection&gt;</code> system.\nAn entity that is visible in the hierarchy.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nCreate a new <code>RenderLayers</code> that belongs to all layers.\nget the bitmask representation of the contained layers\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nBy default, this structure includes layer <code>0</code>, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>RenderLayers</code> from a list of layers.\nReturns <code>true</code> if the entity is visible in the hierarchy. …\nReturns <code>true</code> if the entity is visible in any view. …\nDetermine if a <code>RenderLayers</code> intersects another.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator of the layers.\nCreate a new <code>RenderLayers</code> belonging to the given layer.\nCreate a new <code>RenderLayers</code> that belongs to no layers.\nSets the visibility to <code>true</code>. This should not be considered …\nUpdates <code>Frustum</code>.\nThe visibility of the entity.\nAdd the given layer.\nRemoves the given rendering layer.\nCreates window surfaces.\nAn entity that contains the components in <code>Window</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(re)configures window surfaces, and obtains a swapchain …\nNote: this will not always be the swap chain texture view. …\nA resource which allows for taking screenshots of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSignals the renderer to take a screenshot of this frame.\nSignals the renderer to take a screenshot of this frame.")