searchState.loadedDescShard("bevy_internal", 5, "Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the data the buffer stores.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the active bind group for a given bind group index. …\nSets the active compute pipeline.\nSet push constant data for subsequent dispatch calls.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nLocation for this input. Must match the location in the …\nReturns the size of <code>Self</code> at runtime\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nReturns the size multiple requirement for a texture using …\nSlope depth biasing factor.\nSource code for the shader.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStencil state.\nWhat operations will be performed on the stencil part of …\nHow often this vertex buffer is “stepped” forward.\nHow often this vertex buffer is “stepped” forward.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe color state of the render targets.\nThe color state of the render targets.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds color space and premultiplied alpha information to …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nThe type of the binding\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a vec of (binding index, <code>OwnedBindingResource</code>). In …\nConvenience method to “unwrap” a pipeline state into …\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nUsages of a buffer. If the buffer is used in any way that …\nReturns true if the state relies on the constant color, …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nThe compiled vertex stage, its entry point, and the input …\nThe number of vertices to draw.\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nCalculates the volume of the <code>Extent3d</code>.\nWidth of the extent\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nY position of the origin\nZ position of the origin\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nHelper type meant to be used together with the <code>ShaderType</code> …\nTrait implemented for WGSL runtime-sized arrays and WGSL …\nDynamic storage buffer wrapper facilitating RW operations\nDynamic uniform buffer wrapper facilitating RW operations\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nTrait implemented for all WGSL fixed-footprint types\nBase trait for all WGSL host-shareable types\nStorage buffer wrapper facilitating RW operations\nUniform buffer wrapper facilitating RW operations\nAsserts that <code>Self</code> meets the requirements of the uniform …\nReturns the size of <code>Self</code> assuming the (contained) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nUsed to implement <code>ShaderType</code> for the given vector type\nUsed to implement <code>ShaderType</code> for the given wrapper type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing items necessary to implement <code>ShaderType</code> …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nCreates a new dynamic storage buffer wrapper with an …\nCreates a new dynamic uniform buffer wrapper with an …\nCreates a new dynamic storage buffer wrapper with a given …\nCreates a new dynamic uniform buffer wrapper with a given …\nModule containing items necessary to implement <code>ShaderType</code> …\nReturns the size of <code>Self</code> at runtime\nModule containing items necessary to implement <code>ShaderType</code> …\nHelper type for alignment calculations\nContains the error value\nContains the success value\nHelper type for size calculations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an alignment that is the smallest power of two …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>n</code> is a multiple of this alignment\nReturns the max alignment from an array of alignments\nReturns the amount of padding needed so that <code>n + padding</code> …\nWill round up the given <code>n</code> so that the returned value will …\nWill round up the given <code>n</code> so that the returned value will …\nlength of the contained runtime sized array\nmax elements to read into the contained runtime sized array\nEnables writing to the matrix (via <code>&amp;mut [[T; R]; C]</code>)\nEnables reading from the matrix (via <code>&amp;[[T; R]; C]</code>)\nEnables the cration of a matrix (via <code>[[T; R]; C]</code>)\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nEnables writing to the vector (via <code>&amp;mut [T; N]</code>)\nEnables reading from the vector (via <code>&amp;[T; N]</code>)\nEnables the cration of a vector (via <code>[T; N]</code>)\nUsed to implement <code>ShaderType</code> for the given vector type\nThe handle to the physical device being used for rendering.\nThe <code>AdapterInfo</code> of the adapter in use by the renderer.\nThe context with all information required to interact with …\nThis GPU device is responsible for the creation of most …\nThe GPU instance is used to initialize the <code>RenderQueue</code> and …\nThis queue is used to enqueue tasks for the GPU to execute …\nAppend a <code>CommandBuffer</code> to the command buffer queue.\nAppend a function that will generate a <code>CommandBuffer</code> to the\nCreates a new <code>TrackedRenderPass</code> for the context, …\nGets the current <code>CommandEncoder</code>.\nInitializes <code>Surface</code> for presentation.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> and initializes it with the specified …\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreates a <code>PipelineLayout</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a <code>ShaderModule</code> from either SPIR-V or WGSL source …\nCreates a new <code>Texture</code>.\nCreates a new <code>Texture</code> and initializes it with the …\nList all <code>Features</code> that may be used with this device.\nFinalizes and returns the queue of <code>CommandBuffer</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the renderer by retrieving and preparing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all <code>Limits</code> that were requested of this device.\nCreates a new <code>RenderContext</code> from a <code>RenderDevice</code>.\nCheck for resource cleanups and mapping callbacks.\nGets the underlying <code>RenderDevice</code>.\nUpdates the <code>RenderGraph</code> with all of its nodes and then …\nReturns the wgpu <code>Device</code>.\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nWhether wgpu should expose adapters that run on top of …\nLets the rendering plugin create resources itself.\nNo explicit minor version is requested, the driver …\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nSupported when targeting the web through webassembly with …\nAllows the user to create arrays of buffers in shaders:\nRepresents the backends that wgpu will use.\nEnables clear to zero for textures.\nAllows the user to set a …\nWebGPU default features and limits\nGenerate debug information in shaders and objects.\nAllows for explicit creation of textures of format …\nBy default, polygon depth is clipped to 0-1 range …\nDon’t pass labels to wgpu-hal.\nAllows two outputs from a shader to be used for blending. …\nSupported on Windows 10\nSelects which DX12 shader compiler to use.\nThe Dxc compiler is new, fast and maintained.\nAllows textures with formats “r32float”, “rg32float…\nThe maximum supported features and limits of the adapter …\nThe Fxc compiler (default) is old, slow and unmaintained.\nSupported on Linux/Android, the web through webassembly …\nSelects which OpenGL ES 3 minor version to request.\nAdapter that has the highest performance. This is often a …\nAllows non-zero value for the <code>first_instance</code> member in …\nInstance debugging flags.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nSupported on macOS/iOS\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nAllows renderer resource initialization to happen outside …\nPower usage is not considered when choosing an adapter.\nAllows the user to create bind groups containing arrays …\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nPower Preference when choosing a physical adapter.\nAllows for the creation of ray-tracing queries within …\nAllows for the creation of ray-tracing acceleration …\nAllows for usage of textures of format …\nAn enum describing how the renderer will initialize …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nAllows vertex shaders to have outputs which are not …\nEnables creating shader modules from SPIR-V binary data …\nAllows the user to create uniform arrays of storage …\nEnables device specific texture format features.\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries inside render passes.\nAllows shaders to index uniform buffer and storage texture …\nEnable validation, if possible.\nEnables using 64-bit types for vertex attributes.\nEnables bindings of writable storage buffers and textures …\nSupported on Windows, Linux/Android, and macOS/iOS via …\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nWebGPU default limits plus additional constraints in order …\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nProvides configuration for renderer initialization. Use …\nConfigures the priority used when automatically …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe constraints on limits allowed regardless of what the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nEnable debugging and validation flags.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe features to ensure are disabled regardless of what the …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nThe shader compiler to use for the DX12 backend.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe features to ensure are enabled regardless of what the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer good defaults from the build type\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nAllows you to choose which minor version of GLES3 to use …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThese are for controlling WGPU’s debug information to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe imposed limits.\nFunction to create a <code>RenderCreation::Manual</code> variant.\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet a features/limits priority from the environment …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nModify the current limits to use the buffer alignment …\nModify the current limits to use the resolution limits of …\nReturns this set of flags, affected by environment …\nPath to the <code>dxcompiler.dll</code> file, or path to the directory …\nPath to the <code>dxil.dll</code> file, or path to the directory …\nFunction always passes\nA cached GPU <code>Texture</code> with corresponding <code>TextureView</code>. This …\nClamp the value to the border of the texture Requires the …\nClamp the value to the edge of the texture.\nA wrapper for a <code>CachedTexture</code> that is used as a …\nDefault image sampler, derived from the <code>ImagePlugin</code> setup.\nA rendering resource for the default image sampler which …\nA wrapper for a <code>TextureView</code> that is used as a depth-only …\nCustom sampler for this image which will override global …\nFunction passes if new value is equal to existing value. …\nThe extension of an image file, for example <code>&quot;png&quot;</code>.\nA <code>RenderApp</code> resource that contains the default “fallback …\nA <code>RenderApp</code> resource that contains a “cubemap fallback …\nA Cache of fallback textures that uses the sample count …\nA <code>RenderApp</code> resource that contains a <em>zero-filled</em> “…\nAn error that occurs when loading a texture from a file.\nThe direct format of the image\nThe GPU-representation of an <code>Image</code>. Consists of the <code>Texture</code>…\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\nLoads HDR textures as Texture assets\nHow edges should be handled in texture addressing.\nComparison function used for depth and stencil operations.\nTexel mixing mode when sampling between texels.\nLoader for images that can be read by the <code>image</code> crate.\nAdds the <code>Image</code> as an asset and makes sure that they are …\nUsed in <code>Image</code>, this determines what image sampler to use …\nColor variation to use when the sampler addressing mode is …\nIndicates to an <code>ImageLoader</code> how an <code>Image</code> should be sampled.\nThe type of a raw image buffer.\nOnly cubemaps with six faces are supported.\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nLinear Interpolation.\nThe mime type of an image, for example <code>&quot;image/png&quot;</code>.\nRepeat the texture, mirroring it every repeat.\nNearest neighbor sampling.\nFunction never passes\nFunction passes if new value is not equal to existing …\nRGBA color <code>[0, 0, 0, 1]</code>.\nRGBA color <code>[1, 1, 1, 1]</code>.\nRepeat the texture in a tiling fashion.\nThis resource caches textures that are created repeatedly …\nAn error that occurs when loading a texture\nExtends the wgpu <code>TextureFormat</code> with information about the …\nRGBA color <code>[0, 0, 0, 0]</code>.\nUsed to calculate the volume of an item.\nOn the Metal wgpu backend, this is equivalent to …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nMust be at least 1. If this is not 1, all filter modes …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBorder color to use when <code>address_mode`` is [</code>…\nIf this is enabled, this is a comparison sampler using the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nFallback image for <code>TextureViewDimension::Cube</code>.\nFallback image for <code>TextureViewDimension::CubeArray</code>.\nFallback image for <code>TextureViewDimension::D1</code>.\nFallback image for <code>TextureViewDimension::D2</code>.\nFallback image for <code>TextureViewDimension::D2Array</code>.\nFallback image for <code>TextureViewDimension::D3</code>.\nThe default image sampler to use when <code>ImageSampler</code> is set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nRetrieves a texture that matches the <code>descriptor</code>. If no …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment, without the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns an image sampler with <code>ImageFilterMode::Linear</code> min …\nReturns a sampler descriptor with <code>Linear</code> min and mag …\nProcesses the asset in an asynchronous closure.\nProcesses the asset in an asynchronous closure.\nMaximum level of detail (i.e. mip level) to use.\nMinimum level of detail (i.e. mip level) to use.\nHow to filter the texture when it needs to be magnified …\nHow to filter the texture when it needs to be minified …\nHow to filter between mip map levels\nReturns an image sampler with <code>ImageFilterMode::Nearest</code> min …\nReturns a sampler descriptor with <code>Nearest</code> min and mag …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the size of a pixel in bytes of the format.\nThe intersection of a source flags value with the …\nThe <code>ImageSampler</code> to use during rendering.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdates the cache and only retains recently used textures.\nUpdates the <code>TextureCache</code> to only retains recently used …\nLabel for the <code>calculate_bounds</code> and <code>calculate_bounds_2d</code> …\nLabel for the <code>check_visibility</code> system updating …\nConfigures basic color grading parameters to adjust the …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nConfiguration resource for Multi-Sample Anti-Aliasing.\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nThe total number of layers supported.\nLabel for the <code>update_frusta&lt;OrthographicProjection&gt;</code> system.\nLabel for the <code>update_frusta&lt;PerspectiveProjection&gt;</code> system.\nLabel for the <code>update_frusta&lt;Projection&gt;</code> system.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nCreate a new <code>RenderLayers</code> that belongs to all layers.\nget the bitmask representation of the contained layers\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nCreates window surfaces.\nBy default, this structure includes layer <code>0</code>, which …\nAn entity that contains the components in <code>Window</code>.\nExposure value (EV) offset, measured in stops.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>RenderLayers</code> from a list of layers.\nNon-linear luminance adjustment applied before …\nRetrieve this target’s main texture’s color attachment.\nRetrieve this target’s “unsampled” main texture’s …\nDetermine if a <code>RenderLayers</code> intersects another.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if and only if the main texture is …\nGet an iterator of the layers.\nCreate a new <code>RenderLayers</code> belonging to the given layer.\nThe “main” unsampled texture.\nThe <em>other</em> “main” unsampled texture. In most cases you …\nThe <em>other</em> “main” unsampled texture view. In most cases …\nThe “main” unsampled texture.\nCreate a new <code>RenderLayers</code> that belongs to no layers.\nThe final texture this view will render to.\nThe format of the final texture this view will render to\nThis will start a new “post process write”, which …\nSaturation adjustment applied after tonemapping. Values …\nSaturation adjustment applied before tonemapping. Values …\n(re)configures window surfaces, and obtains a swapchain …\nCreates a 3D rangefinder for a view\nThe “main” sampled texture.\nThe “main” sampled texture view.\nNote: this will not always be the swap chain texture view. …\nUpdates <code>Frustum</code>.\nThe visibility of the entity.\nAdd the given layer.\nRemoves the given rendering layer.\nLabel for the <code>calculate_bounds</code> and <code>calculate_bounds_2d</code> …\nLabel for the <code>check_visibility</code> system updating …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nLabel for the <code>update_frusta&lt;OrthographicProjection&gt;</code> system.\nLabel for the <code>update_frusta&lt;PerspectiveProjection&gt;</code> system.\nLabel for the <code>update_frusta&lt;Projection&gt;</code> system.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nUpdates <code>Frustum</code>.\nThe visibility of the entity.\nCreates window surfaces.\nAn entity that contains the components in <code>Window</code>.\n(re)configures window surfaces, and obtains a swapchain …\nNote: this will not always be the swap chain texture view. …\nA resource which allows for taking screenshots of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSignals the renderer to take a screenshot of this frame.\nSignals the renderer to take a screenshot of this frame.\nContains the set of permitted types by their <code>TypeId</code>.\nContains the set of prohibited types by their <code>TypeId</code>.\nA reflection-powered serializable representation of an …\nA collection of serializable resources and dynamic …\nA <code>DynamicScene</code> builder, used to build a scene from a <code>World</code> …\nA component bundle for a <code>DynamicScene</code> root.\nUnique id identifying a scene instance.\nInformation about a scene instance.\nAn IO Error\nScene contains a proxy without a represented type.\nScene with the given id does not exist.\nDynamic scene with the given id does not exist.\nA RON Error\nTo spawn a scene, you can use either:\nA component bundle for a <code>Scene</code> root.\nA filter used to control which types can be added to a …\n<code>InstanceId</code> of a spawned scene. It can be used with the …\nEmitted when <code>crate::SceneInstance</code> becomes ready to use.\n<code>AssetLoader</code> for loading serialized Bevy scene files as …\nPossible errors that can be produced by <code>SceneLoader</code>\nPlugin that provides scene functionality to an <code>App</code>.\nErrors that can occur when spawning a scene.\nHandles spawning and despawning scenes in the world, …\nScene contains an unregistered type which has a <code>TypePath</code>.\nScene contains an unregistered component type.\nScene contains an unregistered resource type.\nScene contains an unregistered type.\nRepresents an unset filter.\nAllows the given component type, <code>T</code>, to be included in the …\nAllow the given type, <code>T</code>.\nUpdates the filter to allow all component types.\nCreates a filter where all types are allowed.\nUpdates the filter to allow all resource types.\nAllow the given type.\nAllows the given resource type, <code>T</code>, to be included in the …\nConsume the builder, producing a <code>DynamicScene</code>.\nClone the scene.\nA vector of boxed components that belong to the given …\nDenies the given component type, <code>T</code>, from being included in …\nDeny the given type, <code>T</code>.\nUpdates the filter to deny all component types.\nCreates a filter where all types are denied.\nUpdates the filter to deny all resource types.\nDeny the given type.\nDenies the given resource type, <code>T</code>, from being included in …\nSchedule the despawn of all instances of the provided …\nSchedule the despawn of a scene instance, removing all its …\nImmediately despawns a scene instance, removing all its …\nImmediately despawns all scene instances scheduled for …\nImmediately despawns all scenes scheduled for despawn by …\nImmediately despawns all instances of a dynamic scene.\nEntities contained in the dynamic scene.\nThe identifier of the entity, unique within a scene (and …\nMapping of entities from the scene world to the instance …\nExtract entities from the builder’s <code>World</code>.\nExtract one entity from the builder’s <code>World</code>.\nExtract resources from the builder’s <code>World</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new scene from a given dynamic scene.\nCreate a new dynamic scene from a given scene.\nPrepare a builder that will extract entities and their …\nCreate a new dynamic scene from a given world.\nGlobal transform of the scene root entity.\nGlobal transform of the scene root entity.\nInherited visibility of the scene root entity.\nInherited visibility of the scene root entity.\nCheck that an scene instance spawned previously is ready …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the given type, <code>T</code>, is allowed by the …\nReturns true if the given type is allowed by the filter.\nReturns true if the given type, <code>T</code>, is denied by the filter.\nReturns true if the given type is denied by the filter.\nReturns true if there are zero items in the filter.\nReturns an iterator over the items in the filter.\nGet an iterator over the entities in an instance, once it…\nReturns the number of items in the filter.\nProcesses the asset in an asynchronous closure.\nCreates a new scene with the given world.\nEntity to which the scene was spawned as a child.\nDespawns all entities with no components.\nResources stored in the dynamic scene.\nHandle to the scene to spawn.\nHandle to the scene to spawn.\nSystem that will spawn scenes from <code>SceneBundle</code>.\nSystem that handles scheduled scene instance spawning and …\n<code>serde</code> serialization and deserialization implementation for …\nSerialize a given Rust data structure into rust object …\nSerialize this dynamic scene into rust object notation …\nSchedule the spawn of a new instance of the provided scene.\nSchedule the spawn of a new instance of the provided scene …\nSchedule the spawn of a new instance of the provided …\nSchedule the spawn of a new instance of the provided …\nImmediately spawns a new instance of the provided dynamic …\nImmediately spawns all scenes scheduled for spawn.\nImmediately spawns a new instance of the provided scene.\nTransform of the scene root entity.\nTransform of the scene root entity.\nIterate through all instances of the provided scenes and …\nAlgorithmically-computed visibility of the scene root …\nAlgorithmically-computed visibility of the scene root …\nUser-driven visibility of the scene root entity.\nUser-driven visibility of the scene root entity.\nSpecify a custom component <code>SceneFilter</code> to be used with …\nSpecify a custom resource <code>SceneFilter</code> to be used with this …\nThe world of the scene, containing its entities and …\nWrite the resources, the dynamic entities, and their …\nWrite the resources, the dynamic entities, and their …\nWrite the entities and their corresponding components to …\nId of the non-existent dynamic scene.\nId of the non-existent scene.\nThe [type name] for the unregistered type. [type name]: …\nType of the unregistered component.\nType of the unregistered resource.\nThe unregistered type.\nThe dynamic instance type.\nContains the set of permitted types by their <code>TypeId</code>.\nContains the set of prohibited types by their <code>TypeId</code>.\nA collection of serializable resources and dynamic …\nA <code>DynamicScene</code> builder, used to build a scene from a <code>World</code> …\nA component bundle for a <code>DynamicScene</code> root.\nTo spawn a scene, you can use either:\nA component bundle for a <code>Scene</code> root.\nA filter used to control which types can be added to a …\nHandles spawning and despawning scenes in the world, …\nRepresents an unset filter.\nEntities contained in the dynamic scene.\nGlobal transform of the scene root entity.\nGlobal transform of the scene root entity.\nInherited visibility of the scene root entity.\nInherited visibility of the scene root entity.\nResources stored in the dynamic scene.\nHandle to the scene to spawn.\nHandle to the scene to spawn.\nTransform of the scene root entity.\nTransform of the scene root entity.\nAlgorithmically-computed visibility of the scene root …\nAlgorithmically-computed visibility of the scene root …\nUser-driven visibility of the scene root entity.\nUser-driven visibility of the scene root entity.\nThe world of the scene, containing its entities and …\nThe RON deserializer.\nContains the error value\nA <code>Value</code> to <code>Value</code> map.\nA wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.\nContains the success value\nRoundtrip serde options.\nThe RON serializer.\nIf the <code>Number</code> is a float, return it. Otherwise return <code>None</code>.\nIf the <code>Number</code> is an integer, return it. Otherwise return …\nExtensions that are enabled by default during …\nCheck if the remaining bytes are whitespace only, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nCreates a value from a string reference.\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nInserts a new element, returning the previous element with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>f64</code> representation of the <code>Number</code> regardless of …\nTries to deserialize this <code>Value</code> into <code>T</code>.\nReturns <code>true</code> if <code>self.len() == 0</code>, <code>false</code> otherwise.\nIterate all key-value pairs.\nIterate all key-value pairs mutably.\nIterate all keys.\nReturns the number of elements in the map.\nMap this number to a single type using the appropriate …\nCreates a new <code>Serializer</code>.\nCreates a new, empty <code>Map</code>.\nConstruct a new number.\nRoundtrip serde Options module.\nDefault recursion limit that is checked during …\nRemoves an element by its <code>key</code>.\nRetains only the elements specified by the <code>keep</code> predicate.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> in the recommended RON layout in a pretty …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nValue module.\nIterate all values.\nIterate all values mutably.\nEnable <code>default_extension</code> by default during serialization …\nCreates a new <code>Serializer</code>.\nSet a maximum recursion limit during serialization and …\nDo NOT enable <code>default_extension</code> by default during …\nDisable the recursion limit during serialization and …\nThe RON deserializer.\nThis type represents all possible errors that can occur …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type represents all possible errors that can occur …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates an extension flag from an ident.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRoundtrip serde options.\nExtensions that are enabled by default during …\nDefault recursion limit that is checked during …\nPretty serializer configuration.\nThe RON serializer.\nConfigures whether every array should be a single line (…\nEnable compact arrays\nLimits the pretty-formatting based on the number of …\nLimit the pretty-ness up to the given depth.\nConfigures whether a comment shall be added to every array …\nEnumerate array items in comments\nConfigures extensions\nEnable extensions. Only configures ‘implicit_some’, ‘…\nReturns the argument unchanged.\nConfigures the string sequence used for indentation.\nIndentation string\nCalls <code>U::from(self)</code>.\nCreates a default <code>PrettyConfig</code>.\nConfigures the newlines used for serialization.\nNew line string\nConfigures whether tuples are single- or multi-line. If …\nSeparate tuple members with indentation\nConfigures the string sequence used to separate items …\nSeparator string\nConfigures whether to emit struct names.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> in the recommended RON layout in a pretty …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nA wrapper for <code>f64</code>, which guarantees that the inner value …\nA <code>Value</code> to <code>Value</code> map.\nA wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.\nReturns the argument unchanged.\nReturns the wrapped float.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Float</code>.\nName of the serialized component field in an entity struct.\nName of the serialized entity struct type.\nHandles serialization of multiple entities as a map of …\nHandles entity serialization as a map of component type to …\nName of the serialized entities field in a scene struct.\nName of the serialized resources field in a scene struct.\nName of the serialized scene struct type.\nHandles scene deserialization.\nHandles deserialization for a collection of entities.\nHandle deserialization of an entity and its components.\nHandles deserialization of a sequence of values with …\nHandles serializing a list of values with a unique type as …\nHandles serialization of a scene as a struct containing …\nThe entities to serialize.\nThe entity to serialize.\nId of the deserialized entity.\nList of boxed values of unique type to serialize.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a scene serializer.\nType registry in which the components and resources types …\nType registry in which the component types used by the …\nType registry in which the component types used by the …\nType registry in which the types used in <code>entries</code> are …\nType registry in which the types of the values to …\nThe scene to serialize.\nType registry in which the components and resources types …\nType registry in which the component types used by the …\nType registry in which the component types used by the …\nHow a sprite is positioned relative to its <code>Transform</code>. It …\nStruct defining a <code>Sprite</code> border with padding values\nA 2d material that renders 2d meshes with a texture tinted …\nThe GPU representation of the uniform data of a …\nA component bundle for entities with a <code>Mesh2dHandle</code> and a …\nCustom anchor point. Top left is <code>(-0.5, 0.5)</code>, center is …\n<code>RenderCommand</code> for sprite rendering.\nHelper utility to update <code>TextureAtlasLayout</code> on the fly.\nContains the error value\nControls how the image is altered when scaled.\nMaterials are used alongside <code>Material2dPlugin</code> and …\nRender pipeline data for a given <code>Material2d</code>\nAdds the necessary ECS resources and render logic to …\nA component bundle for entities with a <code>Mesh2dHandle</code> and a …\nComponent for rendering with meshes in the 2d pipeline, …\nContains the success value\nAll <code>Material2d</code> values of a given type that should be …\nData prepared for a <code>Material2d</code> instance.\nStores all prepared representations of <code>Material2d</code> assets …\nDefines how a texture slice scales when resized\nThe texture will be cut in 9 slices, keeping the texture …\nSpecifies the rendering properties of a sprite.\nA <code>Bundle</code> of components for drawing a single sprite from an …\nAdds support for 2D sprite rendering.\nA <code>Bundle</code> of components for drawing a single sprite from a …\nSystem set for sprite rendering.\nThe slice will be stretched to fit the area\nComponent used to draw a specific section of a texture.\nA builder which is used to create a texture atlas from …\nStores a map used to lookup the position of a texture in a …\nSingle texture slice, representing a texture rect to draw …\nSlices a texture using the <strong>9-slicing</strong> technique. This …\nThe slice will be tiled to fit the area\nThe texture will be repeated if stretched beyond …\nAdd a new texture to <code>atlas_layout</code>.\nAdd a <em>section</em> to the list in the layout and returns its …\nAdds a texture to be copied to the texture atlas.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\n<code>Anchor</code> point of the sprite in the world\nThe sprite sheet texture atlas, allowing to draw a custom …\nControl whether the added texture should be converted to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe sprite borders, defining the 9 sections of the image\nPixel padding to the bottom\nSystem calculating and inserting an <code>Aabb</code> component to …\nDefines how the center part of the 9 slices will scale\nThe sprite’s color tint\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSlices the given <code>rect</code> into at least 9 sections. If the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nChange the on-screen size of the sprite\nAn optional custom size for the sprite that will be used …\nAdd a bias to the view depth of the mesh which can be used …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nslice draw size\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThis system extracts all created or modified assets of the …\nConsumes the builder, and returns the newly created …\nFlip the sprite along the <code>X</code> axis\nFlip the sprite along the <code>Y</code> axis\nSets the texture format for textures in the atlas.\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nGenerate a <code>TextureAtlasLayout</code> as a grid where each …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nRetrieves the texture <em>section</em> index of the given <code>texture</code> …\nThe absolute transform of the sprite. This should …\nThe absolute transform of the sprite. This should …\nAsset ID of the <code>Image</code> of this sprite PERF: storing an …\nTexture atlas section index\nInherited visibility of an entity.\nInherited visibility of an entity.\nSets the initial size of the atlas in pixels.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nTexture atlas layout handle\nPixel padding to the left\nThe number of textures in the <code>TextureAtlasLayout</code>\nDefines the maximum scale of the 4 corner slices (default …\nSets the max size of the atlas in pixels.\nCreate a new <code>DynamicTextureAtlasBuilder</code>\nCreate a new empty layout with custom <code>dimensions</code>\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\noffset of the slice\nFor cases where additional ExtractedSprites are created …\nSets the amount of padding in pixels to add between the …\nThis system prepares all assets of the corresponding …\nSelect an area of the texture\nAn optional rectangle representing the region of the sprite…\nCreates a new border as a rectangle, with:\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nPixel padding to the right\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nDefines how the 4 side parts of the 9 slices will scale\nCustomizes the default <code>RenderPipelineDescriptor</code>.\nSpecifies the rendering properties of the sprite, such as …\nSpecifies the rendering properties of the sprite, such as …\nCreates a new border as a square, with identical pixel …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA reference-counted handle to the image asset to be drawn.\nThe sprite sheet base texture\nRetrieves the current texture <code>Rect</code> of the sprite sheet …\ntexture area to draw\nThe specific areas of the atlas where each texture can be …\nTransforms the given slice in an collection of tiled …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPixel padding to the top\nThe local transform of the sprite, relative to its parent.\nThe local transform of the sprite, relative to its parent.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns this material’s vertex shader. If …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically\nThe slice will repeat when the ratio between the <em>drawing </em>…\nStruct defining a <code>Sprite</code> border with padding values\nA 2d material that renders 2d meshes with a texture tinted …\nA component bundle for entities with a <code>Mesh2dHandle</code> and a …\nControls how the image is altered when scaled.\nDefines how a texture slice scales when resized\nThe texture will be cut in 9 slices, keeping the texture …\nSpecifies the rendering properties of a sprite.\nA <code>Bundle</code> of components for drawing a single sprite from an …\nA <code>Bundle</code> of components for drawing a single sprite from a …\nThe slice will be stretched to fit the area\nComponent used to draw a specific section of a texture.\nA builder which is used to create a texture atlas from …\nStores a map used to lookup the position of a texture in a …\nSingle texture slice, representing a texture rect to draw …\nSlices a texture using the <strong>9-slicing</strong> technique. This …\nThe slice will be tiled to fit the area\nThe texture will be repeated if stretched beyond …\n<code>Anchor</code> point of the sprite in the world\nThe sprite sheet texture atlas, allowing to draw a custom …\nThe sprite borders, defining the 9 sections of the image\nPixel padding to the bottom\nDefines how the center part of the 9 slices will scale\nThe sprite’s color tint\nAn optional custom size for the sprite that will be used …\nslice draw size\nFlip the sprite along the <code>X</code> axis\nFlip the sprite along the <code>Y</code> axis\nThe absolute transform of the sprite. This should …\nThe absolute transform of the sprite. This should …\nTexture atlas section index\nInherited visibility of an entity.\nInherited visibility of an entity.\nTexture atlas layout handle\nPixel padding to the left\nDefines the maximum scale of the 4 corner slices (default …\noffset of the slice\nAn optional rectangle representing the region of the sprite…\nPixel padding to the right\nDefines how the 4 side parts of the 9 slices will scale\nSpecifies the rendering properties of the sprite, such as …\nSpecifies the rendering properties of the sprite, such as …\nA reference-counted handle to the image asset to be drawn.\nThe sprite sheet base texture\ntexture area to draw\nThe specific areas of the atlas where each texture can be …\nPixel padding to the top\nThe local transform of the sprite, relative to its parent.\nThe local transform of the sprite, relative to its parent.\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically\nThe slice will repeat when the ratio between the <em>drawing </em>…\nA newtype for a task pool for CPU-intensive work that may …\nA newtype for a task pool for CPU-intensive work that must …\nA newtype for a task pool for IO-intensive work (i.e. …\n<code>ParallelIterator</code> closely emulates the <code>std::iter::Iterator</code> …\nProvides functions for mapping read-only slices across a …\nProvides functions for mapping mutable slices across a …\nA <code>TaskPool</code> scope for running one or more non-<code>&#39;static</code> …\nWraps <code>async_executor::Task</code>, a spawned future.\nA thread pool for executing tasks.\nUsed to create a <code>TaskPool</code>\nAn executor that can only be ticked on the thread it was …\nUsed to tick the <code>ThreadExecutor</code>. The executor does not …\nTests if every element of the parallel iterator matches a …\nTests if any element of the parallel iterator matches a …\nGets the logical CPU core count available to the current …\nBlocks the current thread on a future.\nCreates a new <code>TaskPool</code> based on the current options.\nBorrows a parallel iterator, rather than consuming it.\nCancels the task and waits for it to stop running.\nTakes two parallel iterators and returns a parallel …\nCreates a parallel iterator which clones all of its items.\nTransforms a parallel iterator into a collection.\nCreates a parallel iterator which copies all of its items.\nConsumes the parallel iterator and returns the number of …\nRepeats a parallel iterator endlessly.\nDetaches the task to let it keep running in the …\nCreates a parallel iterator which uses a closure to …\nCreates a parallel iterator that both filters and maps.\nCreates a parallel iterator that works like map, but …\nCreates a parallel iterator that flattens nested structure.\nRepeatedly applies a function to items of each batch of a …\nCalls a closure on each item of a parallel iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a parallel iterator which ends after the first …\nGets the global <code>ComputeTaskPool</code> instance.\nGets the global <code>AsyncComputeTaskPool</code> instance.\nGets the global <code>IoTaskPool</code> instance.\nGets the global <code>ComputeTaskPool</code> instance, or initializes …\nGets the global <code>AsyncComputeTaskPool</code> instance, or …\nGets the global <code>IoTaskPool</code> instance, or initializes it …\nEach thread should only create one <code>ThreadExecutor</code>, …\nDoes something with each item of a parallel iterator, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the current task is finished.\nReturns true if <code>self</code> and <code>other</code>’s executor is same\nConsumes the parallel iterator and returns the last item.\nTakes a closure and creates a parallel iterator which …\nReturns the maximum item of a parallel iterator.\nReturns the item that gives the maximum value with respect …\nReturns the item that gives the maximum value from the …\nReturns the minimum item of a parallel iterator.\nReturns the item that gives the minimum value with respect …\nReturns the item that gives the minimum value from the …\nCreates a new task from a given <code>async_executor::Task</code>\nCreates a new <code>TaskPoolBuilder</code> instance\nCreate a <code>TaskPool</code> with the default configuration.\ncreate a new <code>ThreadExecutor</code>\nReturns the next batch of items for processing.\nConsumes the parallel iterator and returns the nth item.\nOverride the number of threads created for the pool. If …\nSets a callback that is invoked once for every created …\nSets a callback that is invoked once for every created …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nConsumes a parallel iterator, creating two collections …\nPolls a future just once and returns an <code>Option</code> with the …\nSearches for an element in a parallel iterator, returning …\nMultiplies all the items of a parallel iterator.\nAllows spawning non-<code>&#39;static</code> futures on the thread pool. …\nThis allows passing an external executor to spawn tasks …\nReturns the bounds on the remaining number of items in the …\nSpawns a static future onto the thread pool. The returned …\nSpawns a scoped future onto the thread pool. The scope <em>must</em>…\nSpawn a task on the thread executor\nSpawns a static future on the thread-local async executor …\nSpawns a scoped future onto the thread of the external …\nSpawns a scoped future onto the thread the scope is run …\nOverride the stack size of the threads created for the pool\nSums the items of a parallel iterator.\nOverride the name of the threads created for the pool. If …\nReturn the number of threads owned by the task pool\nTick the thread executor.\nA function used by <code>bevy_core</code> to tick the global tasks …\nGets the <code>ThreadExecutorTicker</code> for this executor. Use this …\nAttempts to get the global <code>ComputeTaskPool</code> instance, or …\nAttempts to get the global <code>AsyncComputeTaskPool</code> instance, …\nAttempts to get the global <code>IoTaskPool</code> instance, or returns …\nSynchronously try to tick a task on the executor. Returns …\nRuns a function with the local executor. Typically used to …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCombinators for the <code>Future</code> trait.\nCalls a closure on each item and passes it on.\nTools and combinators for I/O.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nTraits <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, <code>AsyncWrite</code>, <code>AsyncBufRead</code>,\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nCombinators for the <code>Stream</code> trait.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + &#39;static&gt;&gt;</code>.\nFuture for the <code>FutureExt::catch_unwind()</code> method.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nThe type of value produced on completion.\nCreates a future which never resolves, representing a …\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>race()</code> function and the <code>FutureExt::race()</code> …\nA future that is immediately ready with a value.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nBlocks the current thread on a future.\nBoxes the future and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nCatches panics while polling the future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Ready</code>, returning the wrapped value.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nCreates a future which never resolves, representing a …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nRace two futures but with a predefined random seed.\nCreates a future that is immediately ready with a value.\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nAsserts that a type implementing <code>std::io</code> traits can be …\nA wrapper around a type that implements <code>AsyncRead</code> or …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nBlocks on all async I/O operations and implements <code>std::io</code> …\nType alias for <code>Pin&lt;Box&lt;dyn AsyncRead + Send + &#39;static&gt;&gt;</code>.\nType alias for <code>Pin&lt;Box&lt;dyn AsyncWrite + Send + &#39;static&gt;&gt;</code>.\nThe operation failed because a pipe was closed.\nAdds buffering to a reader.\nAdds buffering to a writer.\nReader for the <code>AsyncReadExt::bytes()</code> method.\nReader for the <code>AsyncReadExt::chain()</code> method.\nFuture for the <code>AsyncWriteExt::close()</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nGives an in-memory buffer a cursor for reading and writing.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>AsyncBufReadExt::fill_buf()</code> method.\nFuture for the <code>AsyncWriteExt::flush()</code> method.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nStream for the <code>AsyncBufReadExt::lines()</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>AsyncReadExt::read_exact()</code> method.\nFuture for the <code>AsyncReadExt::read()</code> method.\nThe read half returned by <code>split()</code>.\nFuture for the <code>AsyncBufReadExt::read_line()</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>AsyncReadExt::read_to_end()</code> method.\nFuture for the <code>AsyncReadExt::read_to_string()</code> method.\nFuture for the <code>AsyncBufReadExt::read_until()</code> method.\nFuture for the <code>AsyncReadExt::read_vectored()</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nFuture for the <code>AsyncSeekExt::seek()</code> method.\nWriter for the <code>sink()</code> function.\nStream for the <code>AsyncBufReadExt::split()</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>AsyncReadExt::take()</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>AsyncWriteExt::write_all()</code> method.\nFuture for the <code>AsyncWriteExt::write()</code> method.\nThe write half returned by <code>split()</code>.\nFuture for the <code>AsyncWriteExt::write_vectored()</code> method.\nAn error returned when an operation could not be completed …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nReturns a reference to the internal buffer.\nReturns a reference to the internal buffer.\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nAttempt to shutdown the I/O handle.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nThe context we are using to poll the future.\nCopies the entire contents of a reader into a writer.\nAttempt to downcast the custom boxed error to <code>E</code>.\nCreates an empty reader.\nReturns the contents of the internal buffer, filling it …\nFlushes the stream to ensure that all buffered contents …\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nConverts Calloop’s error type into a <code>std::io::Error</code>.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nGets a mutable reference to the inner I/O handle.\nGets a mutable reference to the async I/O handle.\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying buffer.\nGets a mutable reference to the underlying reader.\nGets mutable references to the underlying readers.\nReturns a reference to the inner error wrapped by this …\nGets a reference to the inner I/O handle.\nGets a reference to the async I/O handle.\nGets a reference to the underlying reader.\nGets a reference to the underlying writer.\nGets a reference to the underlying buffer.\nGets a reference to the underlying reader.\nGets references to the underlying readers.\nThe actual reader/writer we are wrapping.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nExtracts the inner I/O handle.\nExtracts the inner async I/O handle.\nUnwraps the buffered reader, returning the underlying …\nUnwraps the buffered writer, returning the underlying …\nUnwraps the cursor, returning the underlying buffer.\nUnwraps the adapter, returning the underlying reader.\nUnwraps the adapter, returning the underlying readers.\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the number of bytes before this adapter will …\nReturns a stream over the lines of this byte stream.\nCreates a new I/O error from a known kind of error as well …\nWraps an I/O handle implementing <code>std::io</code> traits.\nWraps an I/O handle implementing <code>AsyncRead</code> or <code>AsyncWrite</code> …\nWraps an async I/O handle into a blocking interface.\nCreates a buffered reader with the default buffer capacity.\nCreates a buffered writer with the default buffer capacity.\nCreates a cursor for an in-memory buffer.\nCreates a new I/O error from an arbitrary error payload.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nSeeks to an offset, in bytes, in the underlying reader.\nSeek to the offset, in bytes, in the underlying writer.\nPoll this <code>AsyncAsSync</code> for some function.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReturns the current position of this cursor.\nReturns the OS error that this error represents (if any).\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nCreates an infinite reader that reads the same byte …\nSeeks to a new position in a byte stream.\nPuts a limit on the number of bytes.\nSets the position of this cursor.\nCreates a writer that consumes and drops all data.\nSplits a stream into <code>AsyncRead</code> and <code>AsyncWrite</code> halves.\nReturns a stream over the contents of this reader split on …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates a buffered reader with the specified capacity.\nCreates a buffered writer with the specified buffer …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nExtension trait for <code>AsyncBufRead</code>.\nExtension trait for <code>Future</code>.\nExtension trait for <code>AsyncSeek</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the <code>block_on()</code> function.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Stream&lt;Item = T&gt; + &#39;static&gt;&gt;</code>.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>StreamExt::drain()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nValues yielded by the stream.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>race()</code> function and the <code>StreamExt::race()</code> …\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nConverts a stream into a blocking iterator.\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nCreates an empty stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuses the stream so that it stops yielding items after the …\nGet a mutable reference to the underlying stream.\nGet a reference to the underlying stream.\nCalls a closure on each item and passes it on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this stream and get the underlying stream.\nCreates a stream from an iterator.\nReturns the last item in the stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nFinds the index of the first item of the stream for which …\nMerges two streams, with no preference for either stream …\nMerges with <code>other</code> stream, with no preference for either …\nRaces two streams, but with a user-provided seed for …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nMaps items of the stream to new values using a state value …\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.\nA newtype for a task pool for CPU-intensive work that may …\nA newtype for a task pool for CPU-intensive work that must …\nA newtype for a task pool for IO-intensive work (i.e. …\n<code>ParallelIterator</code> closely emulates the <code>std::iter::Iterator</code> …\nProvides functions for mapping read-only slices across a …\nProvides functions for mapping mutable slices across a …\nTests if every element of the parallel iterator matches a …\nTests if any element of the parallel iterator matches a …\nBlocks the current thread on a future.\nBorrows a parallel iterator, rather than consuming it.\nTakes two parallel iterators and returns a parallel …\nCreates a parallel iterator which clones all of its items.\nTransforms a parallel iterator into a collection.\nCreates a parallel iterator which copies all of its items.\nConsumes the parallel iterator and returns the number of …\nRepeats a parallel iterator endlessly.\nCreates a parallel iterator which uses a closure to …\nCreates a parallel iterator that both filters and maps.\nCreates a parallel iterator that works like map, but …\nCreates a parallel iterator that flattens nested structure.\nRepeatedly applies a function to items of each batch of a …\nCalls a closure on each item of a parallel iterator.\nCreates a parallel iterator which ends after the first …\nDoes something with each item of a parallel iterator, …\nConsumes the parallel iterator and returns the last item.\nTakes a closure and creates a parallel iterator which …\nReturns the maximum item of a parallel iterator.\nReturns the item that gives the maximum value with respect …\nReturns the item that gives the maximum value from the …\nReturns the minimum item of a parallel iterator.\nReturns the item that gives the minimum value with respect …\nReturns the item that gives the minimum value from the …\nReturns the next batch of items for processing.\nConsumes the parallel iterator and returns the nth item.\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nConsumes a parallel iterator, creating two collections …\nSearches for an element in a parallel iterator, returning …\nMultiplies all the items of a parallel iterator.\nReturns the bounds on the remaining number of items in the …\nSums the items of a parallel iterator.\nLines will be broken without discrimination on any …\nDetermines how lines will be broken when preventing text …\nLeftmost &amp; rightmost characters are equidistant to the …\nAn InvalidFont Error\nPossible errors that can be produced by <code>FontLoader</code>\nAn IO Error\nDescribes the horizontal alignment of multiple lines of …\nLeftmost character is immediately to the right of the …\nNo soft wrapping, where text is automatically broken up …\nRightmost character is immediately to the left of the …\nThe maximum width and height of text. The text will wrap …\nThe bundle of components needed to draw text in a 2D scene …\nRender information for a corresponding <code>Text</code> component.\nAdds text rendering support to an app.\nSettings used to configure the <code>TextPlugin</code>.\nUnbounded text will not be truncated or wrapped.\nUses the Unicode Line Breaking Algorithm. Lines will be …\nText is rendered for two different view projections, a …\nAllows font size to be set dynamically exceeding the …\nThis system extracts the sprites from the 2D text …\nIf this is not specified, then\nThe vertical height of rasterized glyphs in the font atlas …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Text</code> with a single section.\nConstructs a <code>Text</code> from a list of sections.\nCreate an empty <code>TextSection</code> from a style. Useful when the …\nThe global transform of the text.\nInherited visibility of an entity.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the font atlas set contains no elements\nThe text’s internal alignment. Should not affect its …\nReturns the number of font atlases in this set\nHow the text should linebreak when running out of the …\nProcesses the asset in an asynchronous closure.\nCreate a new <code>TextSection</code>.\nScales <code>value</code> by <code>factor</code>.\nThe maximum width and height of text in logical pixels.\nSoft maximum number of font atlases supported in a …\nContains the text.\nThe maximum width and height of the text.\nHow the text is positioned relative to its transform.\nContains the size of the text and its glyph’s position …\nThe transform of the text.\nUpdates the layout and size information whenever the text …\nAlgorithmically-computed indication of whether an entity …\nThe visibility properties of the text.\nReturns this <code>Text</code> with a new <code>JustifyText</code>.\nReturns this <code>Text</code> with soft wrapping disabled. Hard …\nLeftmost &amp; rightmost characters are equidistant to the …\nDescribes the horizontal alignment of multiple lines of …\nLeftmost character is immediately to the right of the …\nRightmost character is immediately to the left of the …\nThe bundle of components needed to draw text in a 2D scene …\nIf this is not specified, then\nThe vertical height of rasterized glyphs in the font atlas …\nThe global transform of the text.\nInherited visibility of an entity.\nThe text’s internal alignment. Should not affect its …\nHow the text should linebreak when running out of the …\nContains the text.\nThe maximum width and height of the text.\nHow the text is positioned relative to its transform.\nContains the size of the text and its glyph’s position …\nThe transform of the text.\nAlgorithmically-computed indication of whether an entity …\nThe visibility properties of the text.\n<code>Time</code> will be automatically updated each frame using an …\nThe message could not be sent because the channel is …\nThe fixed timestep game clock following virtual time.\nThe message could not be sent because the channel is full.\n<code>Time</code> will be incremented by the specified <code>Duration</code> each …\n<code>Time</code> will be updated to the specified <code>Instant</code> value each …\nRun once and stop.\nReal time clock representing elapsed wall clock time.\nReset when finished.\nA Stopwatch is a struct that track elapsed time when …\nA generic clock resource that tracks how much it has …\nAdds time functionality to Apps.\nChannel resource used to receive time from the render …\nChannel resource used to send time from the render world.\nUpdates the elapsed time. Any system that interacts with …\nConfiguration resource used to determine how the time …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nAn error returned from the <code>try_send</code> method.\nThe virtual game clock representing game time.\nAdvance this clock by adding a <code>delta</code> duration to it.\nAdvance this clock to a specific <code>elapsed</code> time.\nReturns a copy of this clock as fully generic clock …\nCommon run conditions\nReturns a reference to the context of this specific clock.\nReturns a mutable reference to the context of this …\nCreates channels used for sending time between the render …\nReturns how much time has advanced since the last <code>update</code>, …\nReturns how much time has advanced since the last <code>update</code>, …\nReturns how much time has advanced since the last <code>update</code>, …\nDiscard a part of the overstep amount.\nReturns the duration of the timer.\nReturns the speed the clock advanced relative to your …\nReturns the speed the clock advanced relative to your …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns how much time has advanced since <code>startup</code>, as …\nReturns the time elapsed on the timer. Guaranteed to be …\nReturns how much time has advanced since <code>startup</code>, as <code>f32</code> …\nReturns how much time has advanced since <code>startup</code>, as <code>f64</code> …\nReturns how much time has advanced since <code>startup</code> modulo …\nReturns how much time has advanced since <code>startup</code> modulo …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer as an <code>f32</code>. See also …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns how much time has advanced since <code>startup</code> modulo …\nReturns <code>true</code> if the timer has reached its duration.\nReturns the <code>Instant</code> when <code>Self::update</code> was first called, if …\nReturns the fraction of the timer elapsed time (goes from …\nReturns the fraction of the timer remaining time (goes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn new fixed time clock with given timestep as <code>Duration</code>\nReturn new fixed time clock with given timestep frequency …\nCreate new virtual clock with given maximum delta step …\nReturn new fixed time clock with given timestep seconds as …\nCreates a new timer with a given duration in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message.\nReturns <code>true</code> if the send operation failed because the …")