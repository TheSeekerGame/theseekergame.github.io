searchState.loadedDescShard("bevy_internal", 4, "A macro used to generate reflection trait implementations …\nA replacement for deriving <code>TypePath</code> for use on foreign …\nReturns the index of the field.\nReturns the index of the field (in the current variant) …\nGet the index of the field with the given name.\nGets the index of the field with the given name.\nGet the index of the variant with the given name.\nGet the index of the field with the given name.\nInserts an element at position <code>index</code> within the list, …\nInserts an instance of <code>T</code> into this registration’s type …\nInserts a typed key-value pair into the map.\nInserts a field named <code>name</code> with the typed value <code>value</code> into …\nAppends a typed element with value <code>value</code> to the tuple.\nAppends a typed element with value <code>value</code> to the tuple …\nInserts a key-value pair into the map.\nInserts a field named <code>name</code> with value <code>value</code> into the …\nAppends an element with value <code>value</code> to the tuple.\nAppends an element with value <code>value</code> to the tuple struct.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value as a <code>Box&lt;dyn Any&gt;</code>.\nConverts this into an “owned” value.\nCasts this type to a boxed reflected value.\nReturns <code>true</code> if the underlying value is of type <code>T</code>, or <code>false</code>\nReturns true if the trait object wraps an object of type …\nCheck if the given type matches the array type.\nCheck if the given type matches the field type.\nCheck if the given type matches the field type.\nCheck if the given type matches the list type.\nCheck if the given type matches the map type.\nCheck if the given type matches the struct type.\nCheck if the given type matches the tuple type.\nCheck if the given type matches the tuple struct type.\nCheck if the given type matches the underlying type.\nCheck if the given type matches the value type.\nCheck if the given type matches the enum type.\nIndicates whether or not this type is a <em>dynamic</em> type.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the list contains no elements.\nReturns true if the current variant’s type matches the …\nCheck if the given type matches the array item type.\nCheck if the given type matches the list item type.\nThe <code>TypeId</code> of the array item.\nThe <code>TypeId</code> of the list item.\nA representation of the type path of the array item.\nA representation of the type path of the list item.\nReturns an iterator over the array.\nReturns an iterator over the list.\nReturns an iterator over the key-value pairs of the map.\nReturns an iterator over the <code>TypeRegistration</code>s of the …\nIterate over the fields of this struct.\nIterate over the fields of this tuple.\nIterate over the fields of this struct.\nIterate over the variants of this enum.\nIterate over the fields of this variant.\nIterate over the fields of this variant.\nReturns an iterator over the values of the reflectable …\nReturns an iterator over the values of the tuple’s …\nReturns an iterator over the values of the tuple struct’…\nReturns an iterator over the values of the current variant…\nReturns a mutable iterator over the <code>TypeRegistration</code>s of …\nCheck if the given type matches the key type.\nThe <code>TypeId</code> of the key.\nA representation of the type path of the key type.\nReturns the “kind” of this reflected type without any …\nReturns the “kind” of this reflected type without any …\nReturns the “kind” of this reflected type without any …\nReturns the kind of <code>AccessError</code>.\nReturns the number of elements in the array.\nReturns the number of elements in the list.\nReturns the number of elements in the map.\nApplies the elements of <code>b</code> to the corresponding elements of …\nThe default debug formatter for <code>List</code> types.\nReturns the <code>u64</code> hash of the given list.\nCompares a <code>List</code> with a <code>Reflect</code> value.\nApplies the elements of reflected map <code>b</code> to the …\nThe default debug formatter for <code>Map</code> types.\nCompares a <code>Map</code> with a <code>Reflect</code> value.\nReturns the path to the module the type is in, or <code>None</code> if …\nSee <code>TypePath::module_path</code>.\nThe name of the field.\nThe name of this variant.\nThe name of this variant.\nThe name of this variant.\nReturns the name of the field with index <code>index</code>.\nReturns the name of the field (in the current variant) …\nCreates a new <code>ArrayIter</code>.\nCreates a new <code>ListIter</code>.\nCreates a new <code>MapIter</code>.\nCreate a type registry with default registrations for …\nCreate a new <code>ArrayInfo</code>.\nCreate a new <code>NamedField</code>.\nCreate a new <code>ListInfo</code>.\nCreate a new <code>MapInfo</code>.\nCreate a new <code>StructInfo</code>.\nCreate a new <code>TupleInfo</code>.\nCreate a new <code>TupleStructInfo</code>.\nCreate a new <code>DynamicEnum</code> to represent an enum at runtime.\nCreate a new <code>EnumInfo</code>.\nCreate a new <code>StructVariantInfo</code>.\nCreate a new <code>TupleVariantInfo</code>.\nCreate a new <code>UnitVariantInfo</code>.\nCreate a new <code>DynamicEnum</code> with a variant index to represent …\nCreates type registration information for <code>T</code>.\nCreates a new table from a type.\nIf the <code>Access</code> was created with a parser or an offset was …\nA character offset in the string the path was parsed from.\nParses a <code>ParsedPath</code> from a string.\nSimilar to <code>Self::parse</code> but only works on <code>&amp;&#39;static str</code> and …\nReturns a statically typed reference to the value …\nSee <code>TypePath::type_path</code>.\nReturns a statically typed mutable reference to the value …\nRemoves the <em>back</em> element from the list and returns it, or …\nAppends an element to the <em>back</em> of the list.\nAppends a typed value to the list.\nAppends a <code>Reflect</code> trait object to the list.\nTakes a read lock on the underlying <code>TypeRegistry</code>.\nSee <code>TypePath::crate_name</code>.\nGets a reference to the specified element on the given …\nGets a mutable reference to the specified element on the …\nReturns a hash of the value (which includes the type).\nReturns a zero-sized enumeration of “kinds” of type.\nSee <code>TypePath::module_path</code>.\nReturns a mutable enumeration of “kinds” of type.\nReturns an owned enumeration of “kinds” of type.\nReturns a “partial equality” comparison result.\nReturns a reference to the value specified by <code>path</code>.\nReturns a mutable reference to the value specified by <code>path</code>.\nReturns an immutable enumeration of “kinds” of type.\nSee <code>TypePath::short_type_path</code>.\nA macro that automatically generates type data for traits, …\nSee <code>TypePath::type_ident</code>.\nSee <code>TypePath::type_path</code>.\nRegisters the type <code>T</code>, adding reflect data as specified in …\nRegisters the type data <code>D</code> for type <code>T</code>.\nRemoves and returns the element at position <code>index</code> within …\nRemoves an entry from the map.\nReturns <code>true</code> if the underlying value represents a value of …\nReturns a serializable version of the value.\nPerforms a type-checked assignment of a reflected value to …\nSets the type to be represented by this <code>DynamicArray</code>.\nSets the type to be represented by this <code>DynamicList</code>.\nSets the type to be represented by this <code>DynamicMap</code>.\nSets the type to be represented by this <code>DynamicStruct</code>.\nSets the type to be represented by this <code>DynamicTuple</code>.\nSets the type to be represented by this <code>DynamicTupleStruct</code>.\nSets the type to be represented by this <code>DynamicEnum</code>.\nSet the current enum variant represented by this struct.\nSet the current enum variant represented by this struct …\nSee <code>TypePath::short_type_path</code>.\nReturns a short, pretty-print enabled path to the type.\nThe default debug formatter for <code>Struct</code> types.\nCompares a <code>Struct</code> with a <code>Reflect</code> value.\nDowncasts the value to type <code>T</code>, unboxing and consuming the …\nAttempts to downcast the given value to <code>Self</code> using, …\nApplies the elements of <code>b</code> to the corresponding elements of …\nThe default debug formatter for <code>Tuple</code> types.\nCompares a <code>Tuple</code> with a <code>Reflect</code> value.\nThe default debug formatter for <code>TupleStruct</code> types.\nCompares a <code>TupleStruct</code> with a <code>Reflect</code> value.\nReturns the <code>TypeId</code> of the type.\nThe <code>TypeId</code> of the array.\nThe <code>TypeId</code> of the field.\nThe <code>TypeId</code> of the field.\nThe <code>TypeId</code> of the list.\nThe <code>TypeId</code> of the map.\nThe <code>TypeId</code> of the struct.\nThe <code>TypeId</code> of the tuple.\nThe <code>TypeId</code> of the tuple struct.\nThe <code>TypeId</code> of the underlying type.\nThe <code>TypeId</code> of the value.\nReturns the <code>TypeId</code> that the <code>ReflectFromPtr</code> was constructed …\nThe <code>TypeId</code> of the enum.\nReturns the name of the type, or <code>None</code> if it is anonymous.\nReturns the compile-time info for the underlying type.\nReturns a reference to the registration’s <code>TypeInfo</code>\nReturns the fully qualified path of the underlying type.\nThe stable, full type path of the array.\nThe stable, full type path of the field.\nThe stable, full type path of the field.\nThe stable, full type path of the list.\nThe stable, full type path of the map.\nThe stable, full type path of the struct.\nThe stable, full type path of the tuple.\nThe stable, full type path of the struct.\nThe stable, full type path of the underlying type.\nThe stable, full type path of the value.\nThe stable, full type path of the value.\nA representation of the type path of the array.\nA representation of the type path of the field.\nA representation of the type path of the field.\nA representation of the type path of the list.\nA representation of the type path of the map.\nA representation of the type path of the struct.\nA representation of the type path of the tuple.\nA representation of the type path of the struct.\nA representation of the type path of the underlying type.\nA representation of the type path of the value.\nA representation of the type path of the value.\nHelpers for working with Bevy reflection.\nCheck if the given type matches the value type.\nThe <code>TypeId</code> of the value.\nA representation of the type path of the value type.\nGet a variant with the given name.\nGet a variant at the given index.\nThe index of the current variant.\nThe number of variants in this enum.\nThe name of the current variant.\nA slice containing the names of all variants in order.\nReturns the full path to the current variant.\nReturns the full path to the given variant.\nThe type of the current variant.\nTakes a write lock on the underlying <code>TypeRegistry</code>.\nThe actual <code>ReflectKind</code> that was found.\nThe actual <code>VariantType</code> that was found.\nThe <code>ReflectKind</code> that was expected based on the <code>Access</code>.\nThe <code>VariantType</code> that was expected based on the <code>Access</code>.\nThe underlying error.\nPosition in <code>path</code>.\nThe path that the error occured in.\nA singular element access within a path. Multiple accesses …\nA name-based field access on a struct.\nA index-based field access on a struct.\nAn index-based access on a list.\nAn index-based access on a tuple.\nAn object-safe equivalent of Serde’s <code>Deserializer</code> trait.\nContains the error value\nError when a <code>Serializer</code> or <code>Deserializer</code> trait object fails.\nContains the success value\nResult type alias where the error is <code>erased_serde::Error</code>.\nAn object-safe equivalent of Serde’s <code>Serialize</code> trait.\nAn object-safe equivalent of Serde’s <code>Serializer</code> trait.\nDeserialize a value of type <code>T</code> from the given trait object.\nConvert any Serde <code>Deserializer</code> to a trait object.\nConvert any Serde <code>Serializer</code> to a trait object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize the given type-erased serializable value.\nImplement <code>serde::Serialize</code> for a trait object that has …\nA trait that enables types to be dynamically constructed …\nDerives the <code>FromReflect</code> trait.\nA convenience trait which combines fetching and …\nA trait which allows nested <code>Reflect</code> values to be retrieved …\nA convenience trait which combines fetching and …\nThe core trait of <code>bevy_reflect</code>, used for accessing and …\nThe main derive macro used by <code>bevy_reflect</code> for deriving …\nA struct used to provide the default value of a type.\nA struct used to deserialize reflected instances of a type.\nType data that represents the <code>FromReflect</code> trait and allows …\nSomething that can be interpreted as a reflection path in …\nA struct used to serialize reflected instances of a type.\nA trait used to power struct-like operations via reflection…\nA trait used to power tuple struct-like operations via …\nA static accessor to type paths and names.\nDerives the <code>TypePath</code> trait, providing a stable alternative …\nApplies a reflected value to this value.\nReturns the value as a <code>&amp;dyn Any</code>.\nReturns the value as a <code>&amp;mut dyn Any</code>.\nCasts this type to a reflected value.\nCasts this type to a mutable reflected value.\nClones the struct into a <code>DynamicStruct</code>.\nClones the struct into a <code>DynamicTupleStruct</code>.\nClones the value as a <code>Reflect</code> trait object.\nReturns the name of the crate the type is in, or <code>None</code> if …\nDebug formatter for the value.\nGets a <code>&amp;T</code> to the specified element on the given <code>Reflect</code> …\nGets a <code>&amp;mut T</code> to the specified element on the given <code>Reflect</code>…\nReturns a reference to the value of the field named <code>name</code> …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a mutable reference to the value of the field with …\nReturns the number of fields in the struct.\nReturns the number of fields in the tuple struct.\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns the argument unchanged.\nConstructs a concrete instance of <code>Self</code> from a reflected …\nReturns a reference to the value of the field named <code>name</code>, …\nReturns a reference to the value of the field with index …\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns the <code>TypeInfo</code> of the type <em>represented</em> by this value.\nCalls <code>U::from(self)</code>.\nReturns the value as a <code>Box&lt;dyn Any&gt;</code>.\nCasts this type to a boxed reflected value.\nIndicates whether or not this type is a <em>dynamic</em> type.\nReturns an iterator over the values of the reflectable …\nReturns an iterator over the values of the tuple struct’…\nReturns the path to the module the type is in, or <code>None</code> if …\nReturns the name of the field with index <code>index</code>.\nReturns a statically typed reference to the value …\nReturns a statically typed mutable reference to the value …\nGets a reference to the specified element on the given …\nGets a mutable reference to the specified element on the …\nReturns a hash of the value (which includes the type).\nReturns a zero-sized enumeration of “kinds” of type.\nReturns a mutable enumeration of “kinds” of type.\nReturns an owned enumeration of “kinds” of type.\nReturns a “partial equality” comparison result.\nReturns a reference to the value specified by <code>path</code>.\nReturns a mutable reference to the value specified by <code>path</code>.\nReturns an immutable enumeration of “kinds” of type.\nA macro that automatically generates type data for traits, …\nReturns a serializable version of the value.\nPerforms a type-checked assignment of a reflected value to …\nReturns a short, pretty-print enabled path to the type.\nAttempts to downcast the given value to <code>Self</code> using, …\nReturns the name of the type, or <code>None</code> if it is anonymous.\nReturns the fully qualified path of the underlying type.\nA general purpose serializer for reflected types.\nContains data relevant to the automatic reflect powered …\nData needed for (de)serialization of a skipped field.\nA deserializer for type registrations.\nA deserializer for reflected types whose <code>TypeInfo</code> is known.\nA serializer for reflected types whose type is known and …\nA general purpose deserializer for reflected types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a default instance of the skipped field at the …\nGenerates a default instance of the field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no skipped fields.\nReturns true if the given index corresponds to a field …\nReturns an iterator over the skipped fields.\nReturns the number of skipped fields.\nCreates a new <code>SerializationData</code> instance with the given …\nCreate a new <code>SkippedField</code>.\nA struct used to provide the default value of a type.\nA container for <code>TypedProperty</code> over generic types, allowing …\nSee <code>GenericTypeCell</code>.\nSee <code>GenericTypeCell</code>.\nA container for <code>TypeInfo</code> over non-generic types, allowing …\nSee <code>NonGenericTypeCell</code>.\nUsed to store a <code>String</code> in a <code>GenericTypePathCell</code> as part of …\nA type that can be stored in a (<code>Non</code>)<code>GenericTypeCell</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the <code>TypedProperty</code> stored in the …\nReturns a reference to the <code>TypedProperty</code> stored in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a <code>NonGenericTypeCell</code> for non-generic types.\nInitialize a <code>GenericTypeCell</code> for generic types.\nDeterministic fixed state hasher to be used by …\nCleanup render resources here.\nA helper for accessing <code>MainWorld</code> content using a system …\nThis is used for applying the commands from the …\nSchedule which extract data from the main world and …\nThe simulation <code>World</code> of the application, stored as a …\nCreate any additional views such as those used for shadow …\nSort the <code>RenderPhases</code> here.\nPrepare render resources from extracted data for the GPU …\nPrepare assets that have been created/modified/removed …\nA sub-set within <code>Prepare</code> for constructing bind groups, or …\nA sub-set within <code>Prepare</code> for initializing buffers, …\nFlush buffers after <code>PrepareResources</code>, but before ‘…\nQueue drawable entities as phase items in <code>RenderPhase</code>s …\nA sub-set within <code>Queue</code> where mesh entity queue systems are …\nThe main render schedule.\nActual rendering happens here. In most cases, only the …\nA Label for the rendering sub-app.\nContains the default Bevy rendering backend based on wgpu.\nThe labels of the default App rendering sets.\nSets up the base structure of the rendering <code>Schedule</code>.\nInitializes the renderer, sets up the <code>RenderSet</code> and …\nConvenience logic for turning components from the main …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe modular rendering abstraction responsible for queuing, …\nIf <code>true</code>, disables asynchronous pipeline compilation. This …\nThe per-instance data to be inserted into the …\nData used for comparison between phase items. If the …\nA trait to support getting data used for batching draw …\nAdd this component to mesh entities to disable automatic …\nBatch the items in a render phase. This means comparing …\nReturns the argument unchanged.\nGet the per-instance data to be inserted into the …\nCalls <code>U::from(self)</code>.\nKeeping the aspect ratio while the axes can’t be bigger …\nKeeping the aspect ratio while the axes can’t be smaller …\nThis value was calibrated to match Blender’s …\nThe defining <code>Component</code> for camera entities, storing …\nThis component lets you control the <code>TextureUsages</code> field of …\nControl how this camera outputs once rendering is …\nTrait to control the projection matrix of a camera.\nAdds <code>Camera</code> driver systems for a given projection type.\nConfigures the <code>RenderGraph</code> name assigned to be run for a …\nLabel for <code>camera_system&lt;T&gt;</code>, shared across all <code>T</code>.\nA <code>Resource</code> that stores the color that is used to clear the …\nFor a camera, specifies the color used to clear the …\nHolds internally computed <code>Camera</code> values.\nThe given clear color is used, overriding the <code>ClearColor</code> …\nThe clear color is taken from the world’s <code>ClearColor</code> …\nThis value was calibrated to match Blender’s …\nHow much energy a <code>Camera3d</code> absorbs from incoming light.\nManually specify the projection’s size, ignoring window …\nKeep the projection’s width constant; height will be …\nKeep the projection’s height constant; width will be …\nImage to which the camera’s view is rendered.\nImage to which the camera’s view is rendered.\nA manually managed <code>TextureView</code> for use as a …\nA unique id that corresponds to a specific …\nStores manually managed <code>ManualTextureView</code>s for use as a …\nCamera component specifying a mip bias to apply when …\nNo clear color is used: the camera will simply draw on top …\nNormalized version of the render target.\nProject a 3D space onto a 2D surface using parallel lines, …\nA 3D camera projection in which distant objects appear …\nParameters based on physical camera characteristics for …\nA configurable <code>CameraProjection</code> that can select its …\nThe “target” that a <code>Camera</code> will render to. For …\nInformation about the current <code>RenderTarget</code>.\nScaling mode for <code>OrthographicProjection</code>.\nSkips writing the camera output to the configured render …\nCameras sorted by their order field. This is updated in …\nA subpixel offset to jitter a perspective camera’s …\nTexture View to which the camera’s view is rendered. …\nTexture View to which the camera’s view is rendered. …\nRender viewport configuration for the <code>Camera</code> component.\nWindow to which the camera’s view is rendered.\nWindow to which the camera’s view is rendered.\nMatch the viewport size. The argument is the number of …\nWrites the camera output to configured render target.\nhttps://en.wikipedia.org/wiki/F-number\nThe area that the projection covers relative to …\nGet a handle to the render target’s image, or <code>None</code> if …\nThe aspect ratio (width divided by height) of the viewing …\nSystem in charge of updating a <code>Camera</code> when its window or …\nThe clear color operation to perform on the render target.\nCompute camera frustum for camera with given projection …\nComputed values for this camera, such as the projection …\nThe minimum and maximum depth to render (on a scale from …\nScale the <code>ScalingMode</code>. For example, dividing by 2 makes …\nCalculate the EV100.\n…\nConverts EV100 values to exposure values. …\nThe distance from the camera in world units of the viewing …\nThe distance of the far clipping plane in world units.\nThe vertical field of view (FOV) in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>TextureFormat</code> of this render target, if it …\nIf this is set to <code>true</code>, the camera will use an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is set to <code>true</code>, this camera will be rendered to …\nIf this is enabled, a previous camera exists that shares …\nScale the <code>ScalingMode</code>. For example, multiplying by 2 makes …\nThe distance from the camera in world units of the viewing …\nThe distance of the near clipping plane in world units.\nCreates a new <code>CameraRenderGraph</code> from any string-like type.\nNormalize the render target down to a more concrete value, …\nOffset is in range [-0.5, 0.5].\nCameras with a higher order are rendered later, and thus …\nThe <code>CameraOutputMode</code> for this camera.\nThe physical position to render this viewport to within …\nThe physical size of the viewport rectangle to render to …\nThe physical size of this render target (in physical …\nScales the projection.\nThe scale factor of this render target.\nHow the projection will scale to the viewport.\nhttps://en.wikipedia.org/wiki/Film_speed\nSets the graph name.\nhttps://en.wikipedia.org/wiki/Shutter_speed\nThe “target” that this camera will render to.\nIf set, this camera will render to the given <code>Viewport</code> …\nSpecifies the origin of the viewport as a normalized …\nThe blend state that will be used by the pipeline that …\nThe color attachment load operation that will be used by …\nHSL (hue, saturation, lightness) color with an alpha …\nLCH(ab) (lightness, chroma, hue) color with an alpha …\nsRGBA color\nRGBA color in the Linear sRGB colorspace (often …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconverts a color in HLS space to sRGB space\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nconverts a color in LCH space to sRGB space\nconverts a color in sRGB space to HLS space\nconverts a color in sRGB space to LCH space\nAlpha channel. [0.0, 1.0]\nAlpha channel. [0.0, 1.0]\nAlpha channel. [0.0, 1.0]\nAlpha channel. [0.0, 1.0]\nBlue channel. [0.0, 1.0]\nBlue channel. [0.0, 1.0]\nChroma channel. [0.0, 1.5]\nGreen channel. [0.0, 1.0]\nGreen channel. [0.0, 1.0]\nHue channel. [0.0, 360.0]\nHue channel. [0.0, 360.0]\nLightness channel. [0.0, 1.0]\nLightness channel. [0.0, 1.5]\nRed channel. [0.0, 1.0]\nRed channel. [0.0, 1.0]\nSaturation channel. [0.0, 1.0]\nConfigure deterministic rendering to fix flickering due to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSort visible entities by id before rendering to avoid …\nStores all uniforms of the component type.\nStores the index of a uniform inside of <code>ComponentUniforms</code>.\nDescribes how a component gets extracted for rendering.\nImplements <code>ExtractComponent</code> trait for a component. The …\nThis plugin extracts the components into the “render …\nThe output from extraction.\nECS <code>ReadOnlyQueryData</code> to fetch the components to extract.\nFilters the entities with additional constraints.\nThis plugin prepares the components of the corresponding …\nDefines how the component is transferred into the “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes how to extract data needed for rendering from a …\nThis plugin extracts one or more components into the “…\nStores all extract instances of a type in the render world.\nECS <code>ReadOnlyQueryData</code> to fetch the components to extract.\nFilters the entities with additional constraints.\nDefines how the component is transferred into the “…\nCreates a new <code>ExtractInstancesPlugin</code> that extracts to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ExtractInstancesPlugin</code> that unconditionally …\nDescribes how a resource gets extracted for rendering.\nThis plugin extracts the resources into the “render world…\nThis system extracts the resource of the corresponding …\nDefines how the resource is transferred into the “render …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe buffer containing the <code>GlobalsUniform</code>\nContains global values useful when writing shaders. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis plugin prepares the components of the corresponding …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUV space is distributed by how much of the capsule …\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nUpper third of the texture goes to the northern …\nFailed to generate tangents for the mesh.\nThe index/vertex buffer info of a <code>GpuMesh</code>.\nThe GPU-representation of a <code>Mesh</code>. Consists of a vertex …\nAn icosphere, a spherical mesh that consists of equally …\nAn error when creating an icosphere <code>Mesh</code> from a …\nAn array of indices into the <code>VertexAttributeValues</code> for a …\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nA 3D object made out of vertices representing triangles, …\nAdds the <code>Mesh</code> as an asset and makes sure that they are …\nA trait for shapes that can be turned into a <code>Mesh</code>.\nThe output of <code>Self::mesh</code>. This can either be a <code>Mesh</code> or a …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nVertex data is a list of points. Each vertex is a new …\nPrimitive type the input mesh is composed of.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe icosphere has too many vertices.\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nContains an array where each entry describes a property of …\nReturns the values as float triples if possible.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> according to the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> according to the configuration in <code>self</code>.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe <code>Cylinder</code> shape.\nThe <code>Ellipse</code> shape.\nThe format of the vertex attribute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PlaneMeshBuilder</code> from the given size, with …\nFlattens the <code>VertexAttributeValues</code> into a sequence of …\nHalf the size of the plane mesh.\nCreates an icosphere mesh with the given number of …\nThe <em>unique</em> id of the vertex attribute. This will also …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no vertices in this …\nReturns <code>true</code> if there are no indices.\nReturns an iterator over the indices.\nSets the <code>SphereKind</code> that will be used for building the …\nThe type of sphere mesh that will be built.\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the hemispheres …\nReturns the number of vertices in this …\nReturns the number of indices.\nSets the number of vertical lines subdividing the …\nThe number of vertical lines subdividing the hemispheres …\nSets the number of segments used for the main ring of the …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nSets the number of vertices used for each circular segment …\nThe number of vertices used for each circular segment in …\nThe friendly name of the vertex attribute\nCreates a new <code>CircleMeshBuilder</code> from a given radius and …\nCreates a new <code>EllipseMeshBuilder</code> from a given half width …\nCreates a new <code>Capsule3dMeshBuilder</code> from a given radius, …\nCreates a new <code>CylinderMeshBuilder</code> from the given radius, a …\nCreates a new <code>PlaneMeshBuilder</code> from a given normal and …\nCreates a new <code>SphereMeshBuilder</code> from a radius and …\nCreates a new <code>TorusMeshBuilder</code> from an inner and outer …\nSets the normal of the plane, aka the direction the plane …\nThe <code>Plane3d</code> shape.\nMesh generation for primitive shapes.\nSets the number of vertices used for the circle mesh.\nSets the number of vertices used for the ellipse mesh.\nSets the number of vertices used for the top and bottom of …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for the top and bottom of the …\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the cylindrical …\nSets the number of segments along the height of the …\nThe number of segments along the height of the cylinder. …\nGeneration for some primitive shape meshes.\nSets the size of the plane mesh.\nThe <code>Sphere</code> shape.\nThe <code>Torus</code> shape.\nCreates a UV sphere <code>Mesh</code> with the given number of …\nSets the manner in which UV coordinates are distributed …\nThe manner in which UV coordinates are distributed …\nContains all attribute data for each vertex.\nContains all index data of a mesh.\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nHow many components <code>MorphAttributes</code> has.\nMax target count available for morph targets.\nControl a specific <code>Mesh</code> instance’s morph targets. These …\nAttributes <strong>differences</strong> used for morph targets.\nInherit weights from glTF mesh parent entity to direct …\nAn image formatted for use with <code>MorphWeights</code> for rendering …\nControls the morph targets for all child <code>Handle&lt;Mesh&gt;</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBevy meshes are gltf primitives, <code>MorphWeights</code> on the bevy …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate textures for each morph target.\nThe vertex normal difference between base mesh and this …\nThe vertex position difference between base mesh and this …\nThe vertex tangent difference between base mesh and this …\nUV space is distributed by how much of the capsule …\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nUpper third of the texture goes to the northern …\nAn icosphere, a spherical mesh that consists of equally …\nAn error when creating an icosphere <code>Mesh</code> from a …\nA trait for shapes that can be turned into a <code>Mesh</code>.\nThe output of <code>Self::mesh</code>. This can either be a <code>Mesh</code> or a …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe icosphere has too many vertices.\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe <code>Cylinder</code> shape.\nThe <code>Ellipse</code> shape.\nHalf the size of the plane mesh.\nThe type of sphere mesh that will be built.\nThe number of horizontal lines subdividing the hemispheres …\nThe number of vertical lines subdividing the hemispheres …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nThe number of vertices used for each circular segment in …\nThe <code>Plane3d</code> shape.\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for the top and bottom of the …\nThe number of horizontal lines subdividing the cylindrical …\nThe number of segments along the height of the cylinder. …\nThe <code>Sphere</code> shape.\nThe <code>Torus</code> shape.\nThe manner in which UV coordinates are distributed …\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nAn axis-aligned box defined by its minimum and maximum …\nA cylinder with hemispheres at the top and bottom\nA circle in the <code>XY</code> plane\nA cylinder which stands on the XZ plane\nA sphere made from a subdivided Icosahedron.\nA square on the <code>XZ</code> plane centered at the origin.\nA rectangle on the <code>XY</code> plane centered at the origin.\nA regular polygon in the <code>XY</code> plane\nA torus (donut) shape.\nA sphere made of sectors and stacks.\nHeight of the middle cylinder on the <code>Y</code> axis, excluding the …\nHorizontally-flip the texture coordinates of the resulting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new box given the coordinates of two opposing …\nCreates a new plane centered at the origin with the …\nHeight of the cylinder in the Y axis.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of latitudes, distributed by inclination. Must be …\nNumber of longitudes, or meridians, distributed by azimuth.\nCreates a new box centered at the origin with the supplied …\nCreates a regular polygon in the <code>XY</code> plane\nCreates a circle in the <code>XY</code> plane\nRadius on the <code>XZ</code> plane.\nRadius in the XZ plane.\nThe radius of the sphere.\nCircumscribed radius in the <code>XY</code> plane.\nInscribed radius in the <code>XY</code> plane.\nThe radius of the sphere.\nThe number of vertices around each horizontal slice of the …\nNumber of sections in cylinder between hemispheres.\nLongitudinal sectors\nThe number of segments between the two ends. Setting this …\nNumber of sides.\nFull width and height of the rectangle.\nThe total side length of the square.\nLatitudinal stacks\nThe number of subdivisions in the mesh.\nThe number of subdivisions applied.\nManner in which UV coordinates are distributed vertically.\nThe number of vertices used.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>PipelinedRenderingPlugin</code> can be added to your …\nChannels used by the main app to send and receive the …\nA Label for the sub app that runs the parts of pipelined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>RenderAppChannels</code> from a <code>async_channel::Receiver</code> …\nReceive the <code>render_app</code> from the rendering thread.\nSend the <code>render_app</code> to the rendering thread.\nPer vertex coloring. Use in conjunction with …\nPer vertex joint transform matrix index. Use in …\nPer vertex joint transform matrix weight. Use in …\nThe direction the vertex normal is facing in. Use in …\nWhere the vertex is located in space. Use in conjunction …\nThe direction of the vertex tangent. Used for normal …\nTexture coordinates for the vertex. Use in conjunction …\nAlternate texture coordinates for the vertex. Use in …\nThe defining <code>Component</code> for camera entities, storing …\nA <code>Resource</code> that stores the color that is used to clear the …\nFor a camera, specifies the color used to clear the …\nThe given clear color is used, overriding the <code>ClearColor</code> …\nThe clear color is taken from the world’s <code>ClearColor</code> …\nSchedule which extract data from the main world and …\nAn entity that is invisible in the hierarchy.\nAn entity that cannot be seen from any views.\nAn invisible <code>SpatialBundle</code>, with no translation, rotation, …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nHSL (hue, saturation, lightness) color with an alpha …\nA visible <code>SpatialBundle</code>, with no translation, rotation, …\nAdds the <code>Image</code> as an asset and makes sure that they are …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nLCH(ab) (lightness, chroma, hue) color with an alpha …\nA 3D object made out of vertices representing triangles, …\nA trait for shapes that can be turned into a <code>Mesh</code>.\nControls the morph targets for all child <code>Handle&lt;Mesh&gt;</code> …\nConfiguration resource for Multi-Sample Anti-Aliasing.\nNo clear color is used: the camera will simply draw on top …\nProject a 3D space onto a 2D surface using parallel lines, …\nThe output of <code>Self::mesh</code>. This can either be a <code>Mesh</code> or a …\nA 3D camera projection in which distant objects appear …\nA configurable <code>CameraProjection</code> that can select its …\nsRGBA color\nRGBA color in the Linear sRGB colorspace (often …\nA shader, as defined by its <code>ShaderSource</code> and <code>ShaderStage</code> …\nA <code>Bundle</code> that allows the correct positional rendering of …\nAn entity that is visible in the hierarchy.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nGet alpha.\nThe area that the projection covers relative to …\nConverts a <code>Color</code> to variant <code>Color::Hsla</code>\nConverts a <code>Color</code> to a <code>[f32; 4]</code> from HSL colorspace\nConverts a <code>Color</code> to variant <code>Color::Lcha</code>\nConverts a <code>Color</code> to a <code>[f32; 4]</code> from LCH colorspace\nConverts a <code>Color</code> to a <code>[f32; 4]</code> from linear RGB colorspace\nConverts Color to a u32 from linear RGB colorspace.\nConverts a <code>Color</code> to variant <code>Color::Rgba</code>\nConverts a <code>Color</code> to a <code>[f32; 4]</code> from sRGB colorspace\nConverts a <code>Color</code> to variant <code>Color::RgbaLinear</code>\nConverts <code>Color</code> to a <code>u32</code> from sRGB colorspace.\nConverts a <code>Color</code> to a <code>[u8; 4]</code> from sRGB colorspace\nReturns the aspect ratio (width / height) of a 2D image.\nThe aspect ratio (width divided by height) of the viewing …\nRetrieves the data currently set to the vertex attribute …\nRetrieves the data currently set to the vertex attribute …\nReturns an iterator that yields references to the data of …\nReturns an iterator that yields mutable references to the …\nConverts a Color to variant <code>Color::Rgba</code> and return blue in …\nThe clear color operation to perform on the render target.\nCompute the Axis-Aligned Bounding Box of the mesh vertices …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh.\nComputed values for this camera, such as the projection …\nConvert a texture from a format to another. Only a few …\nCounts all vertices of the mesh.\ndefault is a 1x1x1 all ‘1.0’ texture\nCreates image settings with linear sampling by default.\nCreates image settings with nearest sampling by default.\nThe default image sampler to use when <code>ImageSampler</code> is set …\nDuplicates the vertex attributes so that no vertices are …\nThe distance from the camera in world units of the viewing …\nThe distance of the far clipping plane in world units.\nThe first child <code>Handle&lt;Mesh&gt;</code> primitive controlled by these …\nThe vertical field of view (FOV) in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad a bytes buffer in a <code>Image</code>, according to type …\nConverts a <code>DynamicImage</code> to an <code>Image</code>.\nCreates a new <code>SpatialBundle</code> from a <code>Transform</code>.\nConverts a Color to variant <code>Color::Rgba</code> and return green …\nGenerate tangents for the mesh using the <code>mikktspace</code> …\nReturns <code>true</code> if the entity is visible in the hierarchy. …\nReturns <code>true</code> if the entity is visible in any view. …\nComputes and returns the index data of the mesh as bytes. …\nGet this <code>Mesh</code>’s <code>MeshVertexBufferLayout</code>, used in …\nComputes and returns the vertex data of the mesh as bytes. …\nThe global transform of the entity.\nConverts a Color to variant <code>Color::Hsla</code> and return hue\nWhether this mesh has morph targets.\nIf this is set to <code>true</code>, the camera will use an …\nReturns the height of a 2D image.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> with HSL representation in sRGB colorspace.\nNew <code>Color</code> from <code>[f32; 3]</code> (or a type that can be converted …\nConvert <code>Color</code> to HSLA and return as <code>Vec3</code>.\nNew <code>Color</code> with HSL representation in sRGB colorspace.\nNew <code>Color</code> from <code>[f32; 4]</code> (or a type that can be converted …\nConvert <code>Color</code> to HSLA and return as <code>Vec4</code>.\nRetrieves the vertex <code>indices</code> of the mesh.\nRetrieves the vertex <code>indices</code> of the mesh mutably.\nThe inherited visibility of the entity.\nSets the data for a vertex attribute (position, normal, …\nSets the vertex indices of the mesh. They describe how …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is set to <code>true</code>, this camera will be rendered to …\nWhether the texture format is compressed or uncompressed\nDetermine if the color is fully transparent, i.e. if the …\nConverts a Color to variant <code>Color::Hsla</code> and return …\nNew <code>Color</code> with LCH representation in sRGB colorspace.\nNew <code>Color</code> from <code>[f32; 3]</code> (or a type that can be converted …\nConvert <code>Color</code> to LCHA and return as <code>Vec3</code>.\nNew <code>Color</code> with LCH representation in sRGB colorspace.\nNew <code>Color</code> from <code>[f32; 4]</code> (or a type that can be converted …\nConvert <code>Color</code> to LCHA and return as <code>Vec4</code>.\nThe full logical size of this camera’s <code>RenderTarget</code>, …\nThe rendered logical bounds <code>Rect</code> of the camera. If the …\nThe logical size of this camera’s viewport. If the …\nMerges the <code>Mesh</code> data of <code>other</code> with <code>self</code>. The attributes …\nCreates a <code>Mesh</code> for a shape.\nGets a list of all morph target names, if they exist.\nIf this is enabled, a previous camera exists that shares …\nGiven a position in Normalized Device Coordinates, use the …\nThe distance from the camera in world units of the viewing …\nThe distance of the near clipping plane in world units.\nConstruct a new mesh. You need to provide a …\nCreates a new image from raw binary data and the …\nCreates a new image from raw binary data and the …\nNormalize joint weights so they sum to 1.\nCameras with a higher order are rendered later, and thus …\nThe <code>CameraOutputMode</code> for this camera.\nThe full physical size of this camera’s <code>RenderTarget</code> (in …\nThe rendered physical bounds <code>URect</code> of the camera. If the …\nThe physical size of this camera’s viewport (in physical …\nConverts the extracted mesh a into <code>GpuMesh</code>.\nConverts the extracted image into a <code>GpuImage</code>.\nReturns the topology of the mesh.\nThe projection matrix computed using this camera’s …\nConverts a Color to variant <code>Color::Rgba</code> and return red in …\nChanges the <code>size</code>, asserting that the total number of data …\nTakes a 2D image containing vertically stacked images of …\nRemoves the data for a vertex attribute\nRemoves the vertex <code>indices</code> from the mesh and returns them.\nResizes the image to the new size, by removing information …\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from <code>[f32; 3]</code> (or a type that can be converted …\nNew <code>Color</code> from linear RGB colorspace.\nNew <code>Color</code> from <code>[f32; 3]</code> (or a type that can be converted …\nConvert <code>Color</code> to linear RGBA and return as <code>Vec3</code>.\nConvert <code>Color</code> to RGBA and return as <code>Vec3</code>.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from <code>[f32; 4]</code> (or a type that can be converted …\nNew <code>Color</code> from linear RGB colorspace.\nNew <code>Color</code> from <code>[f32; 4]</code> (or a type that can be converted …\nConvert <code>Color</code> to linear RGBA and return as <code>Vec4</code>.\nConvert <code>Color</code> to RGBA and return as <code>Vec4</code>.\nNew <code>Color</code> from sRGB colorspace.\nRotates the vertex positions, normals, and tangents of the …\nRotates the vertex positions, normals, and tangents of the …\nConverts a Color to variant <code>Color::Hsla</code> and return …\nThe <code>ImageSampler</code> to use during rendering.\nScales the projection.\nScales the vertex positions, normals, and tangents of the …\nScales the vertex positions, normals, and tangents of the …\nHow the projection will scale to the viewport.\nSets the visibility to <code>true</code>. This should not be considered …\nSet alpha.\nConverts a Color to variant <code>Color::Rgba</code> and set blue\nConverts a Color to variant <code>Color::Rgba</code> and set green\nConverts a Color to variant <code>Color::Hsla</code> and set hue\nConverts a Color to variant <code>Color::Hsla</code> and set lightness\nSets the names of each morph target. This should …\nSet morph targets image for this mesh. This requires a “…\nConverts a Color to variant <code>Color::Rgba</code> and set red\nConverts a Color to variant <code>Color::Hsla</code> and set saturation\nReturns the size of a 2D image.\nReturns the size of a 2D image as f32.\nThe “target” that this camera will render to.\nConverts a physical size in this <code>Camera</code> to a logical size.\nThe transform of the entity.\nTransforms the vertex positions, normals, and tangents of …\nTransforms the vertex positions, normals, and tangents of …\nTranslates the vertex positions of the mesh in place by …\nTranslates the vertex positions of the mesh by the given …\nConvert a <code>Image</code> to a <code>DynamicImage</code>. Useful for editing image\nThe view visibility of the entity.\nIf set, this camera will render to the given <code>Viewport</code> …\nSpecifies the origin of the viewport as a normalized …\nReturns a ray originating from the camera, that passes …\nReturns a 2D world position computed from a position on …\nThe visibility of the entity.\nThe visibility of the entity.\nReturns the width of a 2D image.\nReturns this color with a new alpha value.\nConverts a Color to variant <code>Color::Rgba</code> and return this …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with no shared …\nConverts a Color to variant <code>Color::Rgba</code> and return this …\nConsumes the mesh and returns a mesh with tangents …\nConverts a Color to variant <code>Color::Hsla</code> and return this …\nConsumes the mesh and returns a mesh with data set for a …\nConsumes the mesh and returns a mesh with the given vertex …\nConverts a Color to variant <code>Color::Hsla</code> and return this …\nConsumes the mesh and returns a mesh with morph target …\nConsumes the mesh and returns a mesh with the given morph …\nConverts a Color to variant <code>Color::Rgba</code> and return this …\nConsumes the mesh and returns a mesh without the data for …\nConsumes the mesh and returns a mesh without the vertex …\nConverts a Color to variant <code>Color::Hsla</code> and return this …\nGiven a position in world space, use the camera’s …\nGiven a position in world space, use the camera to compute …\nAlpha channel. [0.0, 1.0]\nAlpha channel. [0.0, 1.0]\nAlpha channel. [0.0, 1.0]\nAlpha channel. [0.0, 1.0]\nBlue channel. [0.0, 1.0]\nBlue channel. [0.0, 1.0]\nChroma channel. [0.0, 1.5]\nGreen channel. [0.0, 1.0]\nGreen channel. [0.0, 1.0]\nHue channel. [0.0, 360.0]\nHue channel. [0.0, 360.0]\nLightness channel. [0.0, 1.0]\nLightness channel. [0.0, 1.5]\nRed channel. [0.0, 1.0]\nRed channel. [0.0, 1.0]\nSaturation channel. [0.0, 1.0]\nAn axis-aligned bounding box, defined by:\nA region of 3D space defined by the intersection of 6 …\nA region of 3D space, specifically an open set whose …\nReturns the signed distance from the bisecting plane to …\nReturns a bounding box enclosing the specified set of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a frustum derived from <code>view_projection</code>.\nReturns a frustum derived from <code>view_projection</code>, but with a …\nChecks if an Oriented Bounding Box (obb) intersects the …\nChecks if a sphere intersects the frustum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>HalfSpace</code> from a 4D vector whose first 3 …\nReturns the unit normal vector of the bisecting plane that …\nReturns the bisecting plane’s unit normal vector and the …\nCalculate the relative radius of the AABB with respect to …\nTemporarily stores the extracted and removed assets of the …\nSpecifies all ECS data required by …\nAll assets that should be prepared next frame.\nThe GPU-representation of the asset.\nDescribes how an asset gets extracted and prepared for …\nThis plugin extracts the changed assets from the “app …\nDefines where the asset will be used.\nStores all GPU representations (<code>RenderAsset::PreparedAssets</code>…\nGet a flags value with all known bits set.\nWhether or not to unload the asset after extracting it to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns the default render asset usage flags: …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPrepares the asset for the GPU by transforming it into a …\nThis system prepares all assets of the corresponding …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA GPU-accessible <code>Buffer</code>.\nA GPU-accessible <code>Buffer</code>.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn edge, which connects two <code>Nodes</code> in a <code>RenderGraph</code>.\nA collection of input and output <code>Edges</code> for a <code>Node</code>.\nA <code>Node</code> without any inputs, outputs and subgraphs, which …\nAn entity from the ECS.\nAn entity from the ECS.\nThe label for the input node of a graph. Used to connect …\nA <code>Node</code> which acts as an entry point for a <code>RenderGraph</code> with …\nA shorthand for <code>Interned&lt;dyn RenderLabel&gt;</code>.\nA shorthand for <code>Interned&lt;dyn RenderSubGraph&gt;</code>.\nA render node that can be added to a <code>RenderGraph</code>.\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a <code>Node</code>, with all data …\nThe render graph configures the modular, parallel and …\nAdds common <code>RenderGraph</code> operations to <code>App</code>.\nThe context with all graph information required to run a …\nA strongly-typed class of labels used to identify a <code>Node</code> …\nDerive macro generating an impl of the trait <code>RenderLabel</code>.\nA strongly-typed class of labels used to identify a […\nDerive macro generating an impl of the trait <code>RenderSubGraph</code>…\nA <code>RenderGraph</code> <code>Node</code> that runs the configured subgraph once. …\nA command that signals the graph runner to run the sub …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a slot, which specifies its …\nA collection of input or output <code>SlotInfos</code> for a <code>NodeState</code>.\nA <code>SlotLabel</code> is used to reference a slot by either its name …\nDescribes the render resources created (output) or used …\nA value passed between render <code>Nodes</code>. Corresponds to the …\nA <code>TextureView</code> describes a texture used in a pipeline.\nA <code>TextureView</code> describes a texture used in a pipeline.\nThis trait should be used instead of the <code>Node</code> trait when …\nThis <code>Node</code> can be used to run any <code>ViewNode</code>. It will take …\nThe query that will be used on the view entity. It is …\nAdds the <code>node</code> with the <code>label</code> to the graph. If the label is …\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdd <code>node_edge</code>s based on the order of the given <code>edges</code> array.\nAdd node edge to the specified graph\nAutomatically add the required node edges based on the …\nAdd a <code>Node</code> to the <code>RenderGraph</code>:\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nAdds the <code>sub_graph</code> with the <code>label</code> to the graph. If the …\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nClones this <code>RenderSubGraph</code>.\nClones this <code>RenderLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nFeeds this value into the given [<code>Hasher</code>].\nFinishes the context for this <code>Node</code> by returning the sub …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the input slot value referenced by the <code>label</code>.\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the input slot value referenced by the <code>label</code> as …\nReturns the id of the <code>input_node</code>.\nReturns the <code>NodeState</code> of the input node of this graph.\nRetrieves the input slot value referenced by the <code>label</code> as …\nSearches the <code>input_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the <code>Node</code> referenced by the <code>label</code>.\nRetrieves the <code>Node</code> referenced by the <code>label</code> mutably.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code>.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code> mutably.\nReturns the id of the <code>output_node</code>.\nSearches the <code>output_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the <code>SlotInfo</code> for the provided label.\nRetrieves the index (inside input or output slots) of the …\nRetrieves the <code>SlotInfo</code> for the provided label mutably.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nChecks whether the <code>edge</code> already exists in the graph.\nChecks whether the input edge already exists.\nChecks whether the output edge already exists.\nSpecifies the required input slots for this node. They …\nReturns all “input edges” (edges going “in”) for …\nReturns the <code>SlotInfos</code> of the inputs.\nReturns the <code>NodeState</code> of the input node of this graph.\nReturns the input slot values for the node.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns true if there are no slots.\nReturns an iterator over the slot infos.\nReturns an iterator over a tuple of the input edges and …\nReturns an iterator over a tuple of the output edges and …\nReturns an iterator over the <code>NodeStates</code>.\nReturns an iterator over the <code>NodeStates</code>, that allows …\nReturns an iterator over the sub graphs.\nReturns an iterator over the sub graphs, that allows …\nReturns this node’s label.\nReturns the count of slots.\nCreates a new render graph context for the <code>node</code>.\nCreates an <code>NodeState</code> without edges, but the <code>input_slots</code> …\nRetrieves the <code>Node</code>.\nRetrieves the <code>Node</code> mutably.\nSpecifies the produced output slots for this node. They …\nReturns all “output edges” (edges going “out”) for …\nReturns the <code>SlotInfos</code> of the outputs.\nRemoves the <code>node</code> with the <code>label</code> from the graph. If the …\nRemoves the <code>Edge::NodeEdge</code> from the graph. If either node …\nRemoves the <code>Edge::SlotEdge</code> from the graph. If any nodes or …\nRemoves the <code>sub_graph</code> with the <code>label</code> from the graph. If …\nRuns the graph node logic, issues draw calls, updates the …\nRuns the graph node logic, issues draw calls, updates the …\nQueues up a sub graph for execution after the node has …\nCreates an <code>GraphInputNode</code> with the specified slots if not …\nSets the output slot value referenced by the <code>label</code>.\nReturns the <code>SlotType</code> of this value.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nThe name of the type that implements <code>Node</code>.\nUpdates internal node state using the current render <code>World</code> …\nUpdates internal node state using the current render <code>World</code> …\nUpdates all nodes and sub graphs of the render graph. …\nVerifies that the edge existence is as expected and checks …\nValidates that each input slot corresponds to an input …\nValidates that each output slot corresponds to an output …\nWhether or not this <code>PhaseItem</code> should be subjected to …\nRegisters a <code>RenderCommand</code> as a <code>Draw</code> function. They are …\nA <code>PhaseItem</code> item, that automatically sets the appropriate …\nA draw function used to draw <code>PhaseItem</code>s.\nAn identifier for a <code>Draw</code> function stored in <code>DrawFunctions</code>.\nStores all draw functions for the <code>PhaseItem</code> type hidden …\nStores all <code>Draw</code> functions for the <code>PhaseItem</code> type.\nSpecifies the ECS data of the item entity required by …\nSpecifies the general ECS data (e.g. resources) required …\nAn item (entity of the render world) which will be drawn …\n<code>RenderCommand</code>s are modular standardized pieces of render …\nThe result of a <code>RenderCommand</code>.\nWraps a <code>RenderCommand</code> into a state so that it can be used …\nA collection of all rendering instructions, that will be …\nA <code>RenderCommand</code> that sets the pipeline for the …\nThe type used for ordering the items. The smallest values …\nA <code>RenderPass</code>, which tracks the current pipeline state to …\nSpecifies the ECS data of the view entity required by …\nA distance calculator for the draw order of <code>PhaseItem</code>s.\nAdds the <code>Draw</code> function and maps it to its own type.\nAdds a <code>PhaseItem</code> to this render phase.\nAdds the <code>RenderCommand</code> for the specified <code>RenderPhase</code> to …\nAdds the <code>Draw</code> function and maps it to the type <code>T</code>\nThe range of instances that the batch covers. After doing …\nThe id of the render pipeline, cached in the <code>PipelineCache</code>…\nCalculates the distance, or view-space <code>Z</code> value, for the …\nCalculates the distance, or view-space <code>Z</code> value, for the …\nDraws a <code>PhaseItem</code> by issuing zero or more <code>draw</code> calls via …\nFetches the ECS parameters for the wrapped <code>RenderCommand</code> …\nDraws primitives from the active vertex buffer(s).\nSpecifies the <code>Draw</code> function used to render the item.\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nThe corresponding entity that will be drawn.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a 3D rangefinder for a view matrix.\nRetrieves the id of the <code>Draw</code> function corresponding to …\nRetrieves the <code>Draw</code> function corresponding to the <code>id</code> …\nRetrieves the id of the <code>Draw</code> function corresponding to …\nInsert a single debug marker.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn <code>Iterator</code> through the associated <code>Entity</code> for each …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nCreates a new <code>RenderCommandState</code> for the <code>RenderCommand</code>.\nTracks the supplied render pass.\nEnd the current debug group.\nPrepares the draw function to be used. This is called once …\nPrepares all draw function. This is called once and only …\nPrepares the render command to be used. This is called …\nStart a new debug group.\nAccesses the draw functions in read mode.\nRenders a <code>PhaseItem</code> by recording commands (e.g. setting …\nRenders all of its <code>PhaseItem</code>s using their corresponding …\nRenders all <code>PhaseItem</code>s in the provided <code>range</code> (based on …\nSets the active bind group for a given bind group index. …\nSets the blend color as used by some of the blending modes.\nSet the rendering viewport to the given camera <code>Viewport</code>.\nSets the active index buffer.\nSet push constant data.\nSets the active <code>RenderPipeline</code>.\nSets the scissor region.\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nSet the rendering viewport.\nSorts a slice of phase items into render order. Generally …\nSorts all of its <code>PhaseItem</code>s.\nDetermines the order in which the items are drawn.\nThis system sorts the <code>PhaseItem</code>s of all <code>RenderPhase</code>s of …\nReturns the wgpu <code>RenderPass</code>.\nAccesses the draw functions in write mode.\nEnable writes to all channels.\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nA ray-tracing acceleration structure binding.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nFunction always passes\nConverts a value to a <code>BindGroup</code> with a given …\nAn error that occurs during <code>AsBindGroup::as_bind_group</code> …\nConverts a value to a <code>ShaderType</code> for use in a bind group. …\nblock compressed texture. 16 bytes per block.\nEnable blue channel writes\nBack face\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBind groups are responsible for binding render resources …\nDescribes a group of bindings and the resources to be …\nHelper for constructing bindgroups.\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nHelper for constructing bind group layouts.\nResource that can be bound to a pipeline.\nSpecific type of a binding.\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for buffer offsets.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nDescribes a Buffer when allocating.\nIntegral type used for buffer slice sizes.\nDifferent ways that you can use a buffer.\nA structure for storing raw bytes that have already been …\nEnable red, green, and blue channel writes\nBinding is visible from the compute shader of a compute …\nAllow a buffer to be the destination buffer for a […\nAllows a texture to be the destination in a  […\nAllow a buffer to be the source buffer for a […\nAllows a texture to be the source in a […\nIndex of a cached compute pipeline in a <code>PipelineCache</code>.\nState of a cached pipeline inserted into a <code>PipelineCache</code>.\nIndex of a cached render pipeline in a <code>PipelineCache</code>.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nA <code>ComputePipeline</code> represents a compute pipeline and its …\nDescribes a compute pipeline.\nConstant\nThe pipeline GPU object is being created.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nData that will be stored alongside the “prepared” bind …\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nUse the “default” shader for the current context.\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nDiscards the resulting value of the render pass for this …\nArgument buffer layout for draw_indexed_indirect commands.\nArgument buffer layout for draw_indirect commands.\nD.component\nD.alpha\nStores data to be transferred to the GPU and made …\nStores data to be transferred to the GPU and made …\nA writer that can be used to directly write elements into …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nFunction passes if new value is equal to existing value. …\nAn error occurred while trying to create the pipeline GPU …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nBinding is visible from the fragment shader of a render …\nFace of a vertex.\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment process in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nEnable green channel writes\nStores an array of elements to be transferred to the GPU …\nAn index into a <code>GpuArrayBuffer</code> for a given element.\nTrait for types able to go in a <code>GpuArrayBuffer</code>.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\nA handle to a shader stored in the <code>Assets&lt;Shader&gt;</code> resource\nIgnore the stencil state for the face.\nAllow a buffer to be the index buffer in a draw operation.\nAllow a buffer to be the indirect buffer in an indirect …\nAn invalid cached render pipeline index, often used to …\nAn invalid cached compute pipeline index, often used to …\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nSubresource range within an image\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nVertex data is advanced every instance.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nThe texture is laid out densely in memory as:\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nAllow a buffer to be mapped for reading using […\nAllow a buffer to be mapped for writing using […\nPassed to <code>Device::poll</code> to control how and if it should …\nType of buffer mapping.\nmax(Src, Dst)\nmin(Src, Dst)\nThe texture is laid out densely in memory as:\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nBinding is not visible from any shader stage.\nYUV 4:2:0 chroma subsampled format.\nNaga module.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nFunction passes if new value is not equal to existing …\nBlend state of (1 * src) + ((1 - src_alpha) * dst)\nThe pipeline GPU object was created successfully and is …\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nPair of load and store operations for an attachment aspect.\nOrigin of a copy to/from a texture.\nAn owned binding resource of any type (ex: a <code>Buffer</code>, …\nBlend mode that does standard alpha blending with …\nAn asset path leading to a shader\nA pipeline defining the data layout and shader logic for a …\nCache for render and compute pipelines.\nType of error returned by a <code>PipelineCache</code> when the …\nA descriptor for a <code>Pipeline</code>.\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nType of drawing mode for polygons\nA prepared bind group returned as a result of …\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nThe pipeline GPU object is queued for creation.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nDescribes a compute pipeline.\nDescribes the fragment processing in a render pipeline.\nDescribes a render (graphics) pipeline.\nDescribes how the vertex buffer is interpreted.\nDescribes the vertex processing in a render pipeline.\nMap only for reading\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nA <code>RenderPipeline</code> represents a graphics pipeline and its …\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nThe bind group could not be generated. Try again next …\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nA Sampler defines how a pipeline will sample from a …\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nDescribes a <code>Sampler</code>.\nA shader, as defined by its <code>ShaderSource</code> and <code>ShaderStage</code> …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nA reference to a shader asset.\nTrait implemented for all WGSL fixed-footprint types\nSource of a shader module.\nStage of the programmable pipeline.\nDescribes the shader stages that a binding will be visible …\nBase trait for all WGSL host-shareable types\nSampling returns signed integers.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nStores data to be transferred to the GPU and made …\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nSrc - Dst\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nA GPU-accessible texture.\nA texture binding.\nKind of data the texture holds.\nOrder in which TextureData is laid out in memory.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nUnderlying texture data format.\nSpecific type of a sample in a texture binding.\nDifferent ways that you can use a texture.\nDescribes a <code>Texture</code> with its associated metadata required …\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nA buffer for uniform values.\nStores data to be transferred to the GPU and made …\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\na map containing <code>OwnedBindingResource</code>s, keyed by the …\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nBinding is visible from the vertex and fragment shaders of …\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nDescribes how the vertex buffer is interpreted.\nVertex Format for a <code>VertexAttribute</code> (input).\nWhether a vertex buffer is indexed by vertex or by …\nSame as WaitForSubmissionIndex but waits for the most …\nOn wgpu-core based backends, block until the given …\nInformation about an adapter.\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nWGSL module as a string slice.\nMap only for writing\nThe texture can only be written in the shader and it:\nZero origin.\n0.0\nSet stencil value to zero.\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAlpha equation.\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer.\nThe stride, in bytes, between elements of this buffer.\nCreates a bind group for <code>self</code> matching the layout defined …\nReturn the <code>T</code> <code>ShaderType</code> for <code>self</code>. When used in <code>AsBindGroup</code> …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nAsserts that <code>Self</code> meets the requirements of the uniform …\nThe list of attributes which comprise a single vertex.\nThe list of attributes which comprise a single vertex.\nBack face mode.\nBackend used for device\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nThe value added to the vertex index before indexing into …\nBegins recording of a compute pass.\nStart a pipeline statistics query on this render pass. It …\nBegins recording of a render pass.\nDepth bias state.\nCreates the bind group layout matching all bind groups …\nReturns a vec of bind group layout entries\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nWait for a render pipeline to finish compiling.\nThe number of bytes one texel block occupies during an …\nBorder color to use when address_mode is …\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to be copied to/from.\nThe format of any vertex buffers used with this pipeline.\nThe format of any vertex buffers used with this pipeline.\nBytes per “row” in an image.\nDepth bias clamp value (absolute).\nClears buffer to zero.\nClears texture to zero.\nColor equation.\nThe color attachments of the render pass.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nGet the texture dimension required of this texture view …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nContents of a buffer on creation.\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\nThe number of samples calculated per pixel (for MSAA). For …\nIf this value is Some, indicates this entry is an array. …\nCreates a view of this texture.\nThe face culling mode.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nThe depth of the extent or the number of array layers\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nThe dynamic offset to use when setting the bind group in a …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnd the pipeline statistics query on this render pass. It …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is preformed when stencil test fails.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nFormat of the texture.\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the texture view. Either must be the same as the …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nThe compiled fragment stage, its entry point, and the …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nCreates a new densely packed <code>VertexBufferLayout</code> from an …\nFront face mode.\nThe face to consider the front for the purpose of culling …\nTry to retrieve a compute pipeline GPU object from a …\nGet the compute pipeline descriptor a cached render …\nGet the state of a cached compute pipeline.\nTry to retrieve a render pipeline GPU object from a cached …\nGet the render pipeline descriptor a cached render …\nGet the state of a cached render pipeline.\nCreates a writer that can be used to directly write …\nReturns a globally-unique identifier for this <code>ShaderModule</code>.\nReturns a globally-unique identifier for this …\nReturns the format features guaranteed by the WebGPU spec.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nHeight of the extent\nReturns the <code>BindGroupId</code>.\nReturns the <code>ComputePipelineId</code>.\nReturns the <code>TextureId</code>.\nReturns the <code>TextureViewId</code>.\nReturns the <code>SamplerId</code>.\nThe index to use in a shader into the array.\nThe number of indices to draw.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts debug marker.\nInserts debug marker.\nThe number of instances to draw.\nThe number of instances to draw.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nlabel\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label of the texture. This will show up in graphics …\nDebug label of a buffer. This will show up in graphics …\nDebug label of the shader module. This will show up in …\nDebug label of the texture view. This will show up in …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the bind group. This will show up in …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the bind group layout. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nThe layout of bind groups for this pipeline.\nProcesses the asset in an asynchronous closure.\nHow data should be read through this attachment.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nHow to filter the texture when it needs to be minified …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nCreate a new pipeline cache associated with the given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefines where the occlusion query results will be stored …\nBase offset of the buffer, in bytes.\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns the number of planes a multi-planar format has.\nControls the way each polygon is rasterized. Can be either …\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nProcess the pipeline queue and create all pending …\nPush data into the <code>DynamicUniformBuffer</code>’s internal …\nSet of push constant ranges this pipeline uses. Each …\nThe push constant ranges for this pipeline. Supply an …\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nInsert a compute pipeline into the cache, and queue its …\nInsert a render pipeline into the cache, and queue its …\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nReturns the required features (if any) in order to use the …\nCreates a <code>Buffer</code> on the <code>RenderDevice</code> with size at least …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\n“Rows” that make up a single “image”.\nSample count of texture. If this is not 1, texture must …\nReturns the sample type compatible with this format and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …")