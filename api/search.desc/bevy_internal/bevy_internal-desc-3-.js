searchState.loadedDescShard("bevy_internal", 3, "Returns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nWrites the columns of <code>self</code> to the first 6 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 12 elements in …\nWrites the columns of <code>self</code> to the first 9 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 6 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 12 elements in …\nWrites the columns of <code>self</code> to the first 4 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 9 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 16 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the quaternion to an unaligned slice.\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nReturns the vector part of the quaternion.\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nAll false.\nAll false.\nAll false.\nAll true.\nAll true.\nAll true.\nReturns true if all the elements are true, false otherwise.\nReturns true if all the elements are true, false otherwise.\nReturns true if all the elements are true, false otherwise.\nReturns true if any of the elements are true, false …\nReturns true if any of the elements are true, false …\nReturns true if any of the elements are true, false …\nReturns a bitmask with the lowest 2 bits set from the …\nReturns a bitmask with the lowest 3 bits set from the …\nReturns a bitmask with the lowest 4 bits set from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new vector mask.\nCreates a new vector mask.\nCreates a new vector mask.\nSets the element at <code>index</code>.\nSets the element at <code>index</code>.\nSets the element at <code>index</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nTests the value at <code>index</code>.\nTests the value at <code>index</code>.\nTests the value at <code>index</code>.\nA 2D axis-aligned bounding box, or bounding rectangle\nA 3D axis-aligned bounding box\nAn intersection test that casts an <code>Aabb2d</code> along a ray.\nAn intersection test that casts an <code>Aabb3d</code> along a ray.\nA trait with methods that return 2D bounded volumes for a …\nA trait with methods that return 3D bounded volumes for a …\nA bounding circle\nAn intersection test that casts a <code>BoundingCircle</code> along a …\nA bounding sphere\nAn intersection test that casts a <code>BoundingSphere</code> along a …\nA trait that generalizes different bounding volumes. …\nThe type used for the size of the bounding volume. Usually …\nA trait that generalizes intersection tests against a …\nThe position type used for the volume. This should be <code>Vec2</code> …\nA raycast intersection test for 2D bounding volumes\nA raycast intersection test for 3D bounding volumes\nThe aabb that is being cast\nThe aabb that is being cast\nGet an axis-aligned bounding box for the shape with the …\nComputes the smallest <code>Aabb2d</code> containing this <code>BoundingCircle</code>…\nGet an axis-aligned bounding box for the shape with the …\nComputes the smallest <code>Aabb3d</code> containing this <code>BoundingSphere</code>…\nGet the distance at which the <code>Aabb2d</code>s collide, if at all.\nGet the distance at which the <code>Aabb3d</code>s collide, if at all.\nGet the distance of an intersection with an <code>Aabb2d</code>, if any.\nGet the distance of an intersection with an <code>Aabb3d</code>, if any.\nGet a bounding circle for the shape The rotation is in …\nComputes the smallest <code>BoundingCircle</code> containing this <code>Aabb2d</code>…\nGet a bounding sphere for the shape with the given …\nComputes the smallest <code>BoundingSphere</code> containing this <code>Aabb3d</code>…\nReturns the center of the bounding volume.\nThe center of the bounding circle\nThe center of the bounding sphere\nThe circle\nThe circle that is being cast\nGet the distance at which the <code>BoundingCircle</code>s collide, if …\nGet the distance of an intersection with a <code>BoundingCircle</code>, …\nFinds the point on the AABB that is closest to the given …\nFinds the point on the bounding circle that is closest to …\nFinds the point on the AABB that is closest to the given …\nFinds the point on the bounding sphere that is closest to …\nChecks if this bounding volume contains another one.\nGet the cached multiplicative inverse of the direction of …\nGet the cached multiplicative inverse of the direction of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the smallest <code>Aabb2d</code> containing the given set of …\nComputes a <code>BoundingCircle</code> containing the given set of …\nComputes the smallest <code>Aabb3d</code> containing the given set of …\nComputes a <code>BoundingSphere</code> containing the given set of …\nConstruct a <code>RayCast2d</code> from a <code>Ray2d</code> and max distance.\nConstruct an <code>AabbCast2d</code> from an <code>Aabb2d</code>, <code>Ray2d</code>, and max …\nConstruct a <code>BoundingCircleCast</code> from a <code>BoundingCircle</code>, <code>Ray2d</code>…\nConstruct a <code>RayCast3d</code> from a <code>Ray3d</code> and max distance.\nConstruct an <code>AabbCast3d</code> from an <code>Aabb3d</code>, <code>Ray3d</code>, and max …\nConstruct a <code>BoundingSphereCast</code> from a <code>BoundingSphere</code>, <code>Ray3d</code>…\nIncrease the size of the bounding volume in each direction …\nReturns the half size of the bounding volume.\nCheck if a volume intersects with this intersection test\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum, conventionally top-right, point of the box\nThe maximum point of the box\nThe maximum distance for the ray\nThe maximum distance for the ray\nComputes the smallest bounding volume that contains both …\nThe minimum, conventionally bottom-left, point of the box\nThe minimum point of the box\nConstructs an AABB from its center and half-size.\nConstructs a bounding circle from its center and radius.\nConstructs an AABB from its center and half-size.\nConstructs a bounding sphere from its center and radius.\nConstruct a <code>RayCast2d</code> from an origin, <code>Direction2d</code>, and max …\nConstruct an <code>AabbCast2d</code> from an <code>Aabb2d</code>, origin, <code>Direction2d</code>…\nConstruct a <code>BoundingCircleCast</code> from a <code>BoundingCircle</code>, …\nConstruct a <code>RayCast3d</code> from an origin, <code>Direction3d</code>, and max …\nConstruct an <code>AabbCast3d</code> from an <code>Aabb3d</code>, origin, <code>Direction3d</code>…\nConstruct a <code>BoundingSphereCast</code> from a <code>BoundingSphere</code>, …\nGet the radius of the bounding circle\nGet the radius of the bounding sphere\nThe ray for the test\nThe ray along which to cast the bounding volume\nThe ray along which to cast the bounding volume\nThe ray for the test\nThe ray along which to cast the bounding volume\nThe ray along which to cast the bounding volume\nDecrease the size of the bounding volume in each direction …\nThe sphere\nThe sphere that is being cast\nGet the distance at which the <code>BoundingSphere</code>s collide, if …\nGet the distance of an intersection with a <code>BoundingSphere</code>, …\nComputes the visible surface area of the bounding volume. …\nA spline interpolated continuously across the nearest four …\nA spline composed of a single cubic Bezier curve.\nA spline interpolated continuously across the nearest four …\nA collection of <code>CubicSegment</code>s chained into a curve.\nImplement this on cubic splines that can generate a curve …\nA spline interpolated continuously between the nearest two …\nA segment of a cubic curve, used to hold precomputed …\nA point in space of any dimension that supports the math …\nCompute the second derivative with respect to t at <code>t</code>. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate over the curve split into <code>subdivisions</code>, sampling …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nA flexible iterator used to sample curves with arbitrary …\nIterate over the curve split into <code>subdivisions</code>, sampling …\nCompute the position of a point on the cubic curve at the …\nThe list of segments contained in this <code>CubicCurve</code>.\nBuild a <code>CubicCurve</code> by computing the interpolation …\nCompute the first derivative with respect to t at <code>t</code>. This …\nThe unit axes.\nThe unit axes.\nThe unit axes.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 3x3 identity matrix, where all diagonal elements are <code>1</code>, …\nA 2x2 identity matrix, where all diagonal elements are <code>1</code>, …\nA 4x4 identity matrix, where all diagonal elements are <code>1</code>, …\nThe identity quaternion. Corresponds to no rotation.\nAll <code>f32::INFINITY</code>.\nAll <code>f32::INFINITY</code>.\nAll <code>f32::INFINITY</code>.\nAll <code>f32::MAX</code>.\nAll <code>f32::MAX</code>.\nAll <code>f32::MAX</code>.\nAll <code>f32::MIN</code>.\nAll <code>f32::MIN</code>.\nAll <code>f32::MIN</code>.\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nAll NAN:s.\nAll <code>f32::NAN</code>.\nAll <code>f32::NAN</code>.\nAll NAN:s.\nAll NAN:s.\nAll NANs.\nAll <code>f32::NAN</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll negative ones.\nAll negative ones.\nAll negative ones.\nA unit vector pointing along the negative W axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Z axis.\nA unit vector pointing along the negative Z axis.\nAll ones.\nAll ones.\nAll ones.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA unit vector pointing along the positive W axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nA 3x3 matrix with all elements set to <code>0.0</code>.\nAll zeroes.\nAll zeroes.\nA 2x2 matrix with all elements set to <code>0.0</code>.\nA 4x4 matrix with all elements set to <code>0.0</code>.\nAll zeroes.\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nAdds two quaternions.\nAdds two 2x2 matrices.\nAdds two 3x3 matrices.\nAdds two 4x4 matrices.\nReturns the angle (in radians) between <code>self</code> and <code>rhs</code> in the …\nReturns the angle (in radians) between two vectors.\nReturns the angle (in radians) for the minimal rotation …\nReturns some vector that is orthogonal to the given one.\nGiven a unit vector return two other vectors that together …\nReturns any unit vector that is orthogonal to the given …\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no more than <code>max</code>\nReturns a vector with a length no more than <code>max</code>\nReturns a vector with a length no more than <code>max</code>\nReturns a vector with a length no less than <code>min</code>\nReturns a vector with a length no less than <code>min</code>\nReturns a vector with a length no less than <code>min</code>\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns the matrix column for the given <code>index</code>.\nReturns the matrix column for the given <code>index</code>.\nReturns the matrix column for the given <code>index</code>.\nReturns a mutable reference to the matrix column for the …\nReturns a mutable reference to the matrix column for the …\nReturns a mutable reference to the matrix column for the …\nReturns the quaternion conjugate of <code>self</code>. For a unit …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nDivides a quaternion by a scalar value. The quotient is …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>. The dot product …\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nCreates a 3D vector from <code>self</code> and the given <code>z</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a quaternion from a 3x3 rotation matrix inside a …\nCreates an affine transformation matrix from the given 2D …\nCreates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …\nCreates a 2x2 matrix containing a rotation of <code>angle</code> (in …\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a rotation quaternion from an array.\nCreates a new vector from an array.\nCreates a 3D rotation matrix from a normalized rotation …\nCreates an affine transformation matrix containing a 3D …\nCreate a quaternion for a normalized rotation <code>axis</code> and …\nCreates a 3x3 matrix from three column vectors.\nCreates a 2x2 matrix from two column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …\nCreates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …\nCreates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …\nCreates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …\nCreates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …\nCreates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …\nCreates a 3x3 matrix from the first 9 values in <code>slice</code>.\nCreates a 2x2 matrix from the first 4 values in <code>slice</code>.\nCreates a 4x4 matrix from the first 16 values in <code>slice</code>.\nCreates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 3D rotation matrix from the given euler rotation …\nCreates a affine transformation matrix containing a …\nCreates a quaternion from the given Euler rotation …\nCreates an affine transformation matrix from the given 2x2 …\nCreates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …\nCreates an affine transformation matrix from the given 3x3 …\nCreates a quaternion from a 3x3 rotation matrix.\nCreates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …\nCreates an affine transformation matrix from the given 3x3 …\nCreates a quaternion from a 3x3 SIMD aligned rotation …\nCreates a 3x3 matrix from a 4x4 matrix, discarding the 4th …\nCreates a quaternion from a 3x3 rotation matrix inside a …\nCreates a 3D rotation matrix from the given quaternion.\nCreates an affine transformation matrix from the given …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to either …\nCreates an affine transformation matrix from the given 3D …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates an affine transformation matrix from the given …\nCreates an affine transformation matrix containing the …\nCreates a 2x2 matrix containing the combining non-uniform …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transformation matrix from the given 3D …\nCreate a quaternion that rotates <code>v.length()</code> radians around …\nCreates a vector from the first 2 values in <code>slice</code>.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a rotation quaternion from a slice.\nCreates a vector from the first 4 values in <code>slice</code>.\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transformation matrix from the given 3D …\nCreates a new rotation quaternion from a 4D vector.\nCreates a new rotation quaternion.\nPerforms an nlerp, because it’s cheaper and easier to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of a normalized quaternion.\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> of length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view matrix using a camera …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view matrix using a camera …\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nMultiplies a quaternion by a scalar value.\nRotates the <code>Direction3d</code> using a <code>Quat</code>.\nMultiplies a quaternion and a 3D vector, returning the …\nMultiplies two quaternions. If they each represent a …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nMultiplies two quaternions. If they each represent a …\nMultiplies two 2x2 matrices.\nMultiplies two 3x3 matrices.\nMultiplies two 4x4 matrices.\nMultiplies two quaternions. If they each represent a …\nMultiplies a 3x3 matrix by a scalar.\nMultiplies a 2x2 matrix by a scalar.\nMultiplies a 4x4 matrix by a scalar.\nTransforms a 2D vector.\nTransforms a 3D vector.\nMultiplies a quaternion and a 3D vector, returning the …\nTransforms a <code>Vec3A</code>.\nMultiplies a quaternion and a 3D vector, returning the …\nTransforms a 4D vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nCreates a left-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nCreates an infinite left-handed perspective projection …\nCreates an infinite left-handed perspective projection …\nCreates an infinite reverse right-handed perspective …\nCreates an infinite right-handed perspective projection …\nCreates a left-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with […\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nTransforms the given 3D vector as a point, applying …\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nPerforms a spherical linear interpolation between <code>self</code> and …\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nSubtracts the <code>rhs</code> quaternion from <code>self</code>.\nSubtracts two 2x2 matrices.\nSubtracts two 3x3 matrices.\nSubtracts two 4x4 matrices.\nReturns the angle (in radians) of this vector in the range …\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y, z, w]</code>\nReturns the rotation axis (normalized) and angle (in …\nCreates a <code>[f32; 9]</code> array storing data in column major …\nCreates a <code>[f32; 4]</code> array storing data in column major …\nCreates a <code>[f32; 16]</code> array storing data in column major …\nCreates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …\nCreates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …\nCreates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …\nReturns the rotation angles for the given euler rotation …\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …\nReturns the rotation axis scaled by the rotation in …\nTransforms the given 2D vector as a point.\nTransforms the given 3D vector as a point.\nTransforms the given <code>Vec3A</code> as 3D point.\nRotates the given 2D vector.\nTransforms the give 3D vector as a direction.\nTransforms the give <code>Vec3A</code> as 3D vector.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nWrites the columns of <code>self</code> to the first 9 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 4 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 16 elements in …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the quaternion to an unaligned slice.\nWrites the elements of <code>self</code> to the first 4 elements in …\nReturns the vector part of the quaternion.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe unit axes.\nThe unit axes.\nThe unit axes.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nAll <code>i32::MAX</code>.\nAll <code>i32::MAX</code>.\nAll <code>i32::MAX</code>.\nAll <code>i32::MIN</code>.\nAll <code>i32::MIN</code>.\nAll <code>i32::MIN</code>.\nAll negative ones.\nAll negative ones.\nAll negative ones.\nA unit vector pointing along the negative W axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Z axis.\nA unit vector pointing along the negative Z axis.\nAll ones.\nAll ones.\nAll ones.\nA unit vector pointing along the positive W axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nAll zeroes.\nAll zeroes.\nAll zeroes.\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nComponent-wise clamping of values, similar to <code>i32::clamp</code>.\nComponent-wise clamping of values, similar to <code>i32::clamp</code>.\nComponent-wise clamping of values, similar to <code>i32::clamp</code>.\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nCreates a 3D vector from <code>self</code> and the given <code>z</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a vector from the first 2 values in <code>slice</code>.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a vector from the first 4 values in <code>slice</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA polygon with a variable number of vertices, allocated on …\nA series of connected line segments in 2D space, allocated …\nA series of connected line segments in 3D space, allocated …\nA 2D capsule primitive, also known as a stadium or pill …\nA 3D capsule primitive. A three-dimensional capsule is …\nA circle primitive\nA clockwise winding order\nA cone primitive.\nA conical frustum primitive. A conical frustum can be …\nA counterclockwise winding order\nA spline interpolated continuously across the nearest four …\nA spline composed of a single cubic Bezier curve.\nA spline interpolated continuously across the nearest four …\nImplement this on cubic splines that can generate a curve …\nA spline interpolated continuously between the nearest two …\nA segment of a cubic curve, used to hold precomputed …\nA cuboid primitive, more commonly known as a box.\nA cylinder primitive\nA normalized vector pointing in a direction in 2D space\nA normalized vector pointing in a direction in 3D space\nAn ellipse primitive\nEuler rotation sequences.\nA trait for extending <code>f32</code> and <code>f64</code> with extra methods.\nA torus that has no hole but also doesn’t intersect …\nA rectangle defined by two opposite corners.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nThe length of the direction vector is <code>std::f32::INFINITY</code>.\nA torus with non-geometric properties like a minor or …\nAn invalid winding order indicating that it could not be …\nAn error indicating that a direction is invalid.\nAn infinite line along a direction in 2D space.\nAn infinite line along a direction in 3D space.\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Z axis.\nThe length of the direction vector is <code>NaN</code>.\nAn unbounded plane in 2D space. It forms a separating …\nAn unbounded plane in 3D space. It forms a separating …\nA polygon with N vertices.\nA series of connected line segments in 2D space.\nA series of connected line segments in 3D space.\nA marker trait for 2D primitives\nA marker trait for 3D primitives\nA quaternion representing an orientation.\nAn infinite half-line starting at <code>origin</code> and going in …\nAn infinite half-line starting at <code>origin</code> and going in …\nA rectangle defined by two opposite corners.\nA rectangle primitive\nA polygon where all vertices lie on a circle, equally far …\nA torus that has a ring. The major radius is greater than …\nA segment of a line along a direction in 2D space.\nA segment of a line along a direction in 3D space.\nA sphere primitive\nA self-intersecting torus. The major radius is less than …\nA torus primitive, often representing a ring or donut shape\nThe type of torus determined by the minor and major radii\nA triangle in 2D space\nA rectangle defined by two opposite corners.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nThe winding order for a set of points\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nIntrinsic three-axis rotation XYZ\nIntrinsic three-axis rotation XZY\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nIntrinsic three-axis rotation YXZ\nIntrinsic three-axis rotation YZX\nA unit vector pointing along the positive Z axis.\nIntrinsic three-axis rotation ZXY\nIntrinsic three-axis rotation ZYX\nThe length of the direction vector is zero or very close …\nInstantaneous acceleration of a point at parametric value <code>t</code>…\nGet the area of the circle\nGet the area of the ellipse\nGet the area of the triangle\nGet the area of the rectangle\nGet the area of the regular polygon\nGet the surface area of the sphere\nGet the surface area of the cuboid\nGet the total surface area of the cylinder\nGet the surface area of the capsule\nGet the total surface area of the cone\nGet the surface area of the torus. Note that this only …\nGet the base of the cylinder as a <code>Circle</code>\nGet the base of the cone as a <code>Circle</code>\nGet the surface area of one base of the cylinder\nGet the surface area of the base of the cone\nCompute the circle passing through all three vertices of …\nThe circumcircle on which all vertices lie\nGet the radius of the circumcircle on which all vertices …\nFinds the point on the circle that is closest to the given …\nFinds the point on the rectangle that is closest to the …\nFinds the point on the sphere that is closest to the given …\nFinds the point on the cuboid that is closest to the given …\nReturns the default <code>Circle</code> with a radius of <code>0.5</code>.\nReturns the default <code>Ellipse</code> with a half-width of <code>1.0</code> and a …\nReturns the default <code>Plane2d</code> with a normal pointing in the …\nReturns the default <code>Triangle2d</code> with the vertices <code>[0.0, 0.5]</code>…\nReturns the default <code>Rectangle</code> with a half-width and …\nReturns the default <code>RegularPolygon</code> with six sides (a …\nReturns the default <code>Capsule2d</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Sphere</code> with a radius of <code>0.5</code>.\nReturns the default <code>Plane3d</code> with a normal pointing in the …\nReturns the default <code>Cuboid</code> with a width, height, and depth …\nReturns the default <code>Cylinder</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Capsule3d</code> with a radius of <code>0.5</code> and a …\nReturns the default <code>Torus</code> with a minor radius of <code>0.25</code> and …\nGet the diameter of the circle\nGet the diameter of the sphere\nThe direction of the line. The line extends infinitely in …\nThe direction of the line segment\nThe direction of the line\nThe direction of the line\nThe direction of the ray.\nThe direction of the ray.\nGiven a <code>time</code> within <code>0..=1</code>, returns an eased value that …\nGet the external angle of the regular polygon in degrees.\nGet the external angle of the regular polygon in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Rectangle</code> from two corner points\nCreate a new <code>Cuboid</code> from two corner points\nCreates an <code>InvalidDirectionError</code> from the length of an …\nCreate a new <code>Segment2d</code> from its endpoints and compute its …\nCreate a new <code>Plane3d</code> based on three points and compute the …\nCreate a new <code>Segment3d</code> from its endpoints and compute its …\nCreate a new <code>Ellipse</code> from a given full size.\nCreate a new <code>Rectangle</code> from a given full size\nCreate a new <code>Cuboid</code> from a given full size\nCreate a direction from its <code>x</code> and <code>y</code> components.\nCreate a direction from its <code>x</code>, <code>y</code>, and <code>z</code> components.\nThe half height of the cylinder\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemicircles\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemispheres\nHalf of the width and height of the ellipse.\nHalf of the width and height of the rectangle\nHalf of the width, height and depth of the cuboid\nThe height of the cone\nThe height of the frustum\nGet the inner radius of the torus. For a ring torus, this …\nGet the inradius or apothem of the regular polygon. This …\nGet the internal angle of the regular polygon in degrees.\nGet the internal angle of the regular polygon in radians.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>v</code> normalized to the range <code>[a, b]</code>.\nGet the <code>TorusKind</code> determined by the minor and major radii.\nGet the surface area of the side of the cylinder, also …\nGet the surface area of the side of the cone, also known …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nThe distance from the center of the torus to the center of …\nThe maximum corner point of the rect.\nThe maximum corner point of the rect.\nThe maximum corner point of the rect.\nThe minimum corner point of the rect.\nThe minimum corner point of the rect.\nThe minimum corner point of the rect.\nThe radius of the tube of the torus\nCreate a new cubic Bezier curve from sets of control …\nCreate a new Hermite curve from sets of control points.\nBuild a new Cardinal spline.\nBuild a new Cardinal spline.\nCreate a direction from a finite, nonzero <code>Vec2</code>.\nCreate a new <code>Circle</code> from a <code>radius</code>\nCreate a new <code>Ellipse</code> from half of its width and height.\nCreate a new <code>Plane2d</code> from a normal\nCreate a new <code>Segment2d</code> from a direction and full length of …\nCreate a new <code>Polyline2d</code> from its vertices\nCreate a new <code>BoxedPolyline2d</code> from its vertices\nCreate a new <code>Triangle2d</code> from points <code>a</code>, <code>b</code>, and <code>c</code>\nCreate a new <code>Rectangle</code> from a full width and height\nCreate a new <code>Polygon</code> from its vertices\nCreate a new <code>BoxedPolygon</code> from its vertices\nCreate a new <code>RegularPolygon</code> from the radius of the …\nCreate a new <code>Capsule2d</code> from a radius and length\nCreate a direction from a finite, nonzero <code>Vec3</code>.\nCreate a new <code>Sphere</code> from a <code>radius</code>\nCreate a new <code>Plane3d</code> from a normal\nCreate a new <code>Segment3d</code> from a direction and full length of …\nCreate a new <code>Polyline3d</code> from its vertices\nCreate a new <code>BoxedPolyline3d</code> from its vertices\nCreate a new <code>Cuboid</code> from a full x, y, and z length\nCreate a new <code>Cylinder</code> from a radius and full height\nCreate a new <code>Capsule3d</code> from a radius and length\nCreate a new <code>Torus</code> from an inner and outer radius.\nCreate a direction from a finite, nonzero <code>Vec2</code>, also …\nCreate a direction from a finite, nonzero <code>Vec3</code>, also …\nConstruct a cubic Bezier curve for animation easing, with …\nBuild a new Catmull-Rom spline, the special case of a …\nCreate a <code>Direction2d</code> from a <code>Vec2</code> that is already …\nCreate a <code>Direction3d</code> from a <code>Vec3</code> that is already …\nThe normal of the plane. The plane will be placed …\nThe normal of the plane. The plane will be placed …\nThe origin of the ray.\nThe origin of the ray.\nGet the outer radius of the torus. This corresponds to the …\nGet the perimeter or circumference of the circle\nGet the perimeter of the triangle\nGet the perimeter of the rectangle\nGet the perimeter of the regular polygon. This is the sum …\nGet the position of the first point on the line segment\nGet the position of the first point on the line segment\nGet the position of the second point on the line segment\nGet the position of the second point on the line segment\nInstantaneous position of a point at parametric value <code>t</code>.\nThe radius of the circle\nThe radius of the capsule\nThe radius of the sphere\nThe radius of the cylinder\nThe radius of the capsule\nThe radius of the base\nThe radius of the base of the frustum\nThe radius of the top of the frustum\nRemap <code>self</code> from the input range to the output range.\nReverse the <code>WindingOrder</code> of the triangle by swapping the …\nReturns the length of the semi-major axis. This …\nReturns the length of the semi-minor axis. This …\nGet the length of one side of the regular polygon\nThe number of sides\nGet the size of the rectangle\nGet the size of the cuboid\nGet the slant height of the cone, the length of the line …\nBuild a <code>CubicCurve</code> by computing the interpolation …\nGet the part connecting the hemispherical ends of the …\nInstantaneous velocity of a point at parametric value <code>t</code>.\nReturns an iterator over the vertices of the regular …\nThe vertices of the polyline\nThe vertices of the polyline\nThe vertices of the triangle\nThe vertices of the <code>Polygon</code>\nThe vertices of the <code>BoxedPolygon</code>\nThe vertices of the polyline\nThe vertices of the polyline\nGet the volume of the sphere\nGet the volume of the cuboid\nGet the volume of the cylinder\nGet the volume of the capsule\nGet the volume of the cone\nGet the volume of the torus. Note that this only produces …\nGet the <code>WindingOrder</code> of the triangle\nA polygon with a variable number of vertices, allocated on …\nA series of connected line segments in 2D space, allocated …\nA series of connected line segments in 3D space, allocated …\nA 2D capsule primitive, also known as a stadium or pill …\nA 3D capsule primitive. A three-dimensional capsule is …\nA circle primitive\nA clockwise winding order\nA cone primitive.\nA conical frustum primitive. A conical frustum can be …\nA counterclockwise winding order\nA cuboid primitive, more commonly known as a box.\nA cylinder primitive\nA normalized vector pointing in a direction in 2D space\nA normalized vector pointing in a direction in 3D space\nAn ellipse primitive\nA torus that has no hole but also doesn’t intersect …\nThe length of the direction vector is <code>std::f32::INFINITY</code>.\nA torus with non-geometric properties like a minor or …\nAn invalid winding order indicating that it could not be …\nAn error indicating that a direction is invalid.\nAn infinite line along a direction in 2D space.\nAn infinite line along a direction in 3D space.\nThe length of the direction vector is <code>NaN</code>.\nAn unbounded plane in 2D space. It forms a separating …\nAn unbounded plane in 3D space. It forms a separating …\nA polygon with N vertices.\nA series of connected line segments in 2D space.\nA series of connected line segments in 3D space.\nA marker trait for 2D primitives\nA marker trait for 3D primitives\nA rectangle primitive\nA polygon where all vertices lie on a circle, equally far …\nA torus that has a ring. The major radius is greater than …\nA segment of a line along a direction in 2D space.\nA segment of a line along a direction in 3D space.\nA sphere primitive\nA self-intersecting torus. The major radius is less than …\nA torus primitive, often representing a ring or donut shape\nThe type of torus determined by the minor and major radii\nA triangle in 2D space\nThe winding order for a set of points\nThe length of the direction vector is zero or very close …\nThe circumcircle on which all vertices lie\nThe direction of the line. The line extends infinitely in …\nThe direction of the line segment\nThe direction of the line\nThe direction of the line\nThe half height of the cylinder\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemicircles\nHalf the length of the line segment. The segment extends …\nHalf the height of the capsule, excluding the hemispheres\nHalf of the width and height of the ellipse.\nHalf of the width and height of the rectangle\nHalf of the width, height and depth of the cuboid\nThe height of the cone\nThe height of the frustum\nThe distance from the center of the torus to the center of …\nThe radius of the tube of the torus\nThe normal of the plane. The plane will be placed …\nThe normal of the plane. The plane will be placed …\nThe radius of the circle\nThe radius of the capsule\nThe radius of the sphere\nThe radius of the cylinder\nThe radius of the capsule\nThe radius of the base\nThe radius of the base of the frustum\nThe radius of the top of the frustum\nThe number of sides\nThe vertices of the polyline\nThe vertices of the polyline\nThe vertices of the triangle\nThe vertices of the <code>Polygon</code>\nThe vertices of the <code>BoxedPolygon</code>\nThe vertices of the polyline\nThe vertices of the polyline\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe unit axes.\nThe unit axes.\nThe unit axes.\nAll <code>u32::MAX</code>.\nAll <code>u32::MAX</code>.\nAll <code>u32::MAX</code>.\nAll <code>u32::MIN</code>.\nAll <code>u32::MIN</code>.\nAll <code>u32::MIN</code>.\nAll ones.\nAll ones.\nAll ones.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA unit vector pointing along the positive W axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nAll zeroes.\nAll zeroes.\nAll zeroes.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nComponent-wise clamping of values, similar to <code>u32::clamp</code>.\nComponent-wise clamping of values, similar to <code>u32::clamp</code>.\nComponent-wise clamping of values, similar to <code>u32::clamp</code>.\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nCreates a 3D vector from <code>self</code> and the given <code>z</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a vector from the first 2 values in <code>slice</code>.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a vector from the first 4 values in <code>slice</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating addition of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating division of <code>self</code>…\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating multiplication …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nReturns a vector containing the saturating subtraction of …\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping addition of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping division of <code>self</code> …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping multiplication of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nReturns a vector containing the wrapping subtraction of …\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCombines the color of the fragments with the colors behind …\nSets how a material’s base color alpha channel is used …\nAn ambient light, which lights the entire scene equally.\nHolds <code>AssetId</code>s of the texture or textures that this light …\nA more general form of the <code>FogFalloff::Exponential</code> mode. …\nThe base color alpha value defines the opacity of the …\nControls how cascaded shadow mapping works. Prefer using …\nBuilder for <code>CascadeShadowConfig</code>.\nMethod by Ignacio Castaño for The Witness using 9 samples …\nConfiguration of the clustering strategy for clustered …\nConfigure the far z-plane mode used for the furthest depth …\nConfigure the depth-slicing strategy for clustered forward …\nConstant max z-depth\n<code>ParallaxMappingMethod::Relief</code> with a 5 steps, a reasonable …\nDefault render method used for opaque materials.\nA Directional light.\nA component bundle for <code>DirectionalLight</code> entities.\nControls the resolution of <code>DirectionalLight</code> shadow maps.\nAn exponential fog falloff with a given <code>density</code>.\nA squared exponential fog falloff with a given <code>density</code>.\nA material that extends a base <code>Material</code> with additional …\nHandle for the fog WGSL Shader internal asset\nFixed number of <code>Z</code> slices, <code>X</code> and <code>Y</code> calculated to give …\nAllows switching between different fog falloff modes, and …\nMetadata for fog\nA plugin that consolidates fog extraction, preparation and …\nConfigures the “classic” computer graphics distance fog…\nThe GPU-side representation of the fog configuration that…\nHardware 2x2.\nMethod by Jorge Jimenez for Call of Duty: Advanced Warfare …\nThe ID of the lightmap shader.\nA marker component for a light probe, which is a cuboid …\nA trait implemented by all components that represent light …\nAdds support for light probes: cuboid bounding regions …\nA GPU buffer that stores information about all light …\nA per-view shader uniform that specifies all the light …\nA component that applies baked indirect diffuse global …\nA plugin that provides an implementation of lightmaps.\nA linear fog falloff that grows in intensity between <code>start</code> …\nMaximum number of joints supported for skinned meshes.\nThe maximum number of each type of light probe that each …\nHow many textures are allowed in the view bind group …\nReduce transparency to fully opaque or fully transparent …\nMaterials are used alongside <code>MaterialPlugin</code> and …\nA subset of the <code>Material</code> trait for defining extensions to …\nA component bundle for entities with a <code>Mesh</code> and a <code>Material</code>.\nRender pipeline data for a given <code>Material</code>.\nA key uniquely identifying a specialized <code>MaterialPipeline</code>.\nAdds the necessary ECS resources and render logic to …\nCommon <code>Material</code> properties, calculated for a specific …\nCalculate the required maximum z-depth based on currently …\nBind groups for meshes currently loaded.\nAll possible <code>BindGroupLayout</code>s in bevy’s default mesh …\nMSAA uses the highest 3 bits for the MSAA log2(sample …\nA key that uniquely identifies a <code>MeshPipelineViewLayout</code>.\nCombines the color of the fragments with the colors behind …\nDisable light cluster calculations for this view\nAdd this component to make a <code>Mesh</code> not cast shadows.\nAdd this component to make a <code>Mesh</code> not receive shadows.\nA simple linear interpolation, using a single texture …\nBase color alpha values are overridden to be fully opaque …\nRender method used for opaque materials.\nThe parallax mapping method to use to compute depth based …\nA component bundle for PBR entities with a <code>Mesh</code> and a …\nSets up the entire PBR infrastructure of bevy.\nA light that emits light in all directions from a central …\nA component bundle for <code>PointLight</code> entities.\nSimilar to <code>AlphaMode::Blend</code>, however assumes RGB channel …\nAll <code>Material</code> values of a given type that should be …\nData prepared for a <code>Material</code> instance.\nSets up everything required to use the prepass pipeline.\nSets up the prepasses for a <code>Material</code>.\nA 2% contrast threshold was originally proposed by …\nDiscovers the best depth value based on binary search.\nStores data for all lightmaps in the render world.\nStores all prepared representations of <code>Material</code> assets for …\nA component, part of the render world, that stores the …\nBundle to apply screen space ambient occlusion.\nPlugin for screen space ambient occlusion.\nComponent to apply screen space ambient occlusion to a 3d …\nSets the bind group for a given <code>Material</code> at the configured …\nAdd this component to a <code>Camera3d</code> to control how to …\nOne single cluster. Optimal for low-light complexity …\nA light that emits light in a given direction from a …\nA component bundle for spot light entities\nA material with “standard” properties used in PBR …\nBitflags info about the material a shader is currently …\nThe pipeline key for <code>StandardMaterial</code>.\nThe GPU representation of the uniform data of a …\nAdd this component to make a <code>Mesh</code> using a PBR material …\nInserted on each <code>Entity</code> with an <code>ExtractedView</code> to keep …\nIf the light probe can be attached to the view itself (as …\nA component attached to each camera in the render world …\nExplicit <code>X</code>, <code>Y</code> and <code>Z</code> counts (may yield non-square <code>X/Y</code> …\nControls if <code>DeferredPbrLightingPlugin</code> is added.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nWhen the alpha mode mask flag is set, any base color alpha …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nThe <code>AlphaMode</code> of this material.\nHow to apply the alpha channel of the <code>base_color_texture</code>.\nThe resulting (non-absorbed) color after white light …\nColor white light takes after travelling through the …\nHow far, on average, light travels through the volume …\nHow far light travels through the volume underneath the …\nThe color of the surface of the material before lighting.\nDoubles as diffuse albedo for non-metallic, specular for …\nThe texture component of the material’s color before …\nWhether binding arrays (a.k.a. bindless textures) are …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe (positive) distance to the far boundary of each …\nA direct scale factor multiplied with <code>color</code> before being …\nReturns the cascade config as specified by this builder.\nThe color of the fog effect.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreates an instance of <code>RenderViewLightProbes</code> containing …\nWhether to cull the “front”, “back” or neither …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s deferred fragment shader. If …\nUsed for selecting the deferred lighting pass for deferred …\nID for specifying which deferred lighting pass should be …\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nAdjust rendered depth.\nThe depth map used for parallax mapping.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe amount of light transmitted <em>diffusely</em> through the …\nAmount of diffuse light transmitted through the material\nColor used to modulate the influence of directional light …\nThe exponent applied to the directional light alignment …\nSupport two-sided lighting by automatically flipping the …\nColor the material “emits” to the camera.\nThe emissive map, multiplies pixels with <code>emissive</code> to get …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nMap of view entity to the visible entities for each …\nEnvironment maps and reflection probes.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThis system extracts all created or modified assets of the …\nDetermines which falloff mode to use, and its parameters.\nStrategy for how to evaluate the far <code>Z</code> plane of the …\nSets the far bound of the first cascade, relative to the …\nFar <code>Z</code> plane of the first depth slice\nThe <code>StandardMaterialFlags</code> accessible in the <code>wgsl</code> shader.\nNormal map textures authored for DirectX have their …\nWhether to enable fog for this material.\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nGenerates all possible view layouts for the mesh pipeline, …\nGet the <code>BindGroup</code> for <code>GpuMesh</code> with given <code>handle_id</code> and …\nReturns the asset ID or asset IDs of the texture or …\nIlluminance in lux (lumens per square meter), representing …\nThe lightmap texture.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nAngle defining the distance from the spot light direction …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the intensity of this light probe.\nLuminous power in lumens, representing the amount of light …\nLuminous power in lumens, representing the amount of light …\nluminous intensity in lumens per steradian\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of refraction of the material.\nIndex of Refraction\nIrradiance volumes, also known as voxel global …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCalculates the extinction coefficient β, from V and Cₜ, …\nBuilds a unique label for each layout based on the flags\nThe exposure (brightness) level of the lightmap, if …\nThe exposure (brightness) level of the lightmap, if …\nIncludes the lightmap texture and uniform.\nIn how many layers to split the depth maps for parallax …\nIn how many layers to split the depth maps for Steep …\nUsing <code>ParallaxMappingMethod::Relief</code>, how many additional …\nThe maximum shadow distance. Areas further from the camera …\nHow “metallic” the material appears, within <code>[0.0, 1.0]</code>.\nFrom [0.0, 1.0], dielectric to pure metallic\nMetallic and roughness maps, stored as a single texture.\nThe minimum shadow distance, which can help improve the …\nThe (positive) distance to the near boundary of the first …\nThe mesh model uniform (transform) and nothing else.\nAlso includes the uniform and <code>MorphAttributes</code> for morph …\nAlso includes both uniforms for skinning and morph …\nCreates a new light probe component.\nPrepare the layouts used by the default bevy <code>Mesh</code>.\nUsed to fake the lighting of bumps and dents on a material.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of shadow cascades. More cascades increases …\nSpecifies the level of exposure to ambient light.\nReturns if this material should be rendered by the …\nRender method used for opaque materials. (Where <code>alpha_mode</code> …\nAngle defining the distance from the spot light direction …\nSets the overlap proportion between cascades. The overlap …\nThe proportion of overlap each cascade has with the …\nHow deep the offset introduced by the depth map should be.\nThe depth of the <code>StandardMaterial::depth_map</code> to apply.\nWhich parallax mapping method to use.\n<code>MeshUniform</code>s are stored in arrays in buffers. If storage …\nLinear perceptual roughness, clamped to <code>[0.089, 1.0]</code> in …\nPrepares fog metadata and writes the fog-related uniform …\nThis system prepares all assets of the corresponding …\nControls if the prepass is enabled for the Material. For …\nControls if the prepass is enabled for the …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns whether the material would like to read from …\nWhether the material would like to read from …\nSpecular intensity for non-metals on a linear scale of …\nSpecular intensity for non-metals on a linear scale of […\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIs this material should be rendered by the deferred …\nLinear perceptual roughness, clamped to [0.089, 1.0] in …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nAlso includes the uniform for skinning\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nThe amount of light transmitted <em>specularly</em> through the …\nAmount of specular light transmitted through the material\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThickness of the volume beneath the material surface.\nThickness of the volume underneath the material surface\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhether to apply only the base color to this material.\nThe rectangle within the lightmap texture that the UVs are …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nEnables or disables the light\nEnables or disables the light\nEnables or disables the light\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nMultiplier applied to the world distance (within the …\nMultiplier applied to the world distance (within the …\nDistance from the camera where fog is completely opaque, …\nControls how much light is removed due to atmospheric …\nControls how much light is added due to light scattering …\nDistance from the camera where fog is completely …\nHow many additional steps to use at most to find the depth …\nSamples per slice side is also tweakable, but recommended …\nHigher slice count means less noise, but worse performance.\nComponent with a <code>depth_id</code> for specifying which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle to the environment map helper shader.\nLike <code>EnvironmentMapLight</code>, but contains asset IDs instead …\nA pair of cubemap textures that represent the surroundings …\nInformation about the environment map attached to the …\nA bundle that contains everything needed to make an entity …\nThe blurry image that represents diffuse radiance …\nThe cubemaps that make up this environment map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks this environment map as a light probe.\nContains a transform that specifies the position of this …\nThe typically-sharper, mipmapped image that represents …\nLabel for the screen space ambient occlusion render node.\nLabel for the shadow pass node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe component that defines an irradiance volume.\nReturns the argument unchanged.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nThe 3D texture that represents the ambient cubes, encoded …\nCombines the color of the fragments with the colors behind …\nSets how a material’s base color alpha channel is used …\nAn ambient light, which lights the entire scene equally.\nA more general form of the <code>FogFalloff::Exponential</code> mode. …\nThe base color alpha value defines the opacity of the …\nA Directional light.\nA component bundle for <code>DirectionalLight</code> entities.\nA pair of cubemap textures that represent the surroundings …\nAn exponential fog falloff with a given <code>density</code>.\nA squared exponential fog falloff with a given <code>density</code>.\nAllows switching between different fog falloff modes, and …\nConfigures the “classic” computer graphics distance fog…\nA marker component for a light probe, which is a cuboid …\nA linear fog falloff that grows in intensity between <code>start</code> …\nReduce transparency to fully opaque or fully transparent …\nMaterials are used alongside <code>MaterialPlugin</code> and …\nA component bundle for entities with a <code>Mesh</code> and a <code>Material</code>.\nAdds the necessary ECS resources and render logic to …\nCombines the color of the fragments with the colors behind …\nA simple linear interpolation, using a single texture …\nBase color alpha values are overridden to be fully opaque …\nThe parallax mapping method to use to compute depth based …\nA component bundle for PBR entities with a <code>Mesh</code> and a …\nA light that emits light in all directions from a central …\nA component bundle for <code>PointLight</code> entities.\nSimilar to <code>AlphaMode::Blend</code>, however assumes RGB channel …\nA bundle that contains everything needed to make an entity …\nDiscovers the best depth value based on binary search.\nPlugin for screen space ambient occlusion.\nA light that emits light in a given direction from a …\nA component bundle for spot light entities\nA material with “standard” properties used in PBR …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nHow to apply the alpha channel of the <code>base_color_texture</code>.\nThe resulting (non-absorbed) color after white light …\nHow far, on average, light travels through the volume …\nThe color of the surface of the material before lighting.\nThe texture component of the material’s color before …\nA direct scale factor multiplied with <code>color</code> before being …\nThe color of the fog effect.\nWhether to cull the “front”, “back” or neither …\nReturns this material’s deferred fragment shader. If …\nUsed for selecting the deferred lighting pass for deferred …\nReturns this material’s deferred vertex shader. If …\nAdd a bias to the view depth of the mesh which can be used …\nAdjust rendered depth.\nThe depth map used for parallax mapping.\nThe blurry image that represents diffuse radiance …\nThe amount of light transmitted <em>diffusely</em> through the …\nColor used to modulate the influence of directional light …\nThe exponent applied to the directional light alignment …\nSupport two-sided lighting by automatically flipping the …\nColor the material “emits” to the camera.\nThe emissive map, multiplies pixels with <code>emissive</code> to get …\nThe cubemaps that make up this environment map.\nDetermines which falloff mode to use, and its parameters.\nNormal map textures authored for DirectX have their …\nWhether to enable fog for this material.\nReturns this material’s fragment shader. If …\nIlluminance in lux (lumens per square meter), representing …\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nAngle defining the distance from the spot light direction …\nLuminous power in lumens, representing the amount of light …\nLuminous power in lumens, representing the amount of light …\nScale factor applied to the diffuse and specular light …\nThe index of refraction of the material.\nConstants for operating with the light units: lumens, and …\nMarks this environment map as a light probe.\nThe exposure (brightness) level of the lightmap, if …\nIn how many layers to split the depth maps for parallax …\nHow “metallic” the material appears, within <code>[0.0, 1.0]</code>.\nMetallic and roughness maps, stored as a single texture.\nUsed to fake the lighting of bumps and dents on a material.\nSpecifies the level of exposure to ambient light.\nReturns if this material should be rendered by the …\nRender method used for opaque materials. (Where <code>alpha_mode</code> …\nAngle defining the distance from the spot light direction …\nHow deep the offset introduced by the depth map should be.\nWhich parallax mapping method to use.\nLinear perceptual roughness, clamped to <code>[0.089, 1.0]</code> in …\nControls if the prepass is enabled for the Material. For …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns whether the material would like to read from …\nSpecular intensity for non-metals on a linear scale of …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nContains a transform that specifies the position of this …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nThe typically-sharper, mipmapped image that represents …\nThe amount of light transmitted <em>specularly</em> through the …\nThickness of the volume beneath the material surface.\nWhether to apply only the base color to this material.\nReturns this material’s vertex shader. If …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nEnables or disables the light\nEnables or disables the light\nEnables or disables the light\nMultiplier applied to the world distance (within the …\nMultiplier applied to the world distance (within the …\nDistance from the camera where fog is completely opaque, …\nControls how much light is removed due to atmospheric …\nControls how much light is added due to light scattering …\nDistance from the camera where fog is completely …\nHow many additional steps to use at most to find the depth …\nApproximations for converting the wattage of lamps to …\nPredefined for lux values in several locations.\nThe amount of light (lux) from ambient daylight (not …\nThe amount of light (lux) during the dark limit of civil …\nThe amount of light (lux) during sunrise or sunset on a …\nThe amount of light (lux) in very dark overcast day\nThe amount of light (lux) in direct sunlight.\nThe amount of light (lux) in full daylight (not direct …\nThe amount of light (lux) during a full moon on a clear …\nThe amount of light (lux) in an office building’s …\nThe amount of light (lux) in family living room lights.\nThe amount of light (lux) in a moonless, overcast night …\nThe amount of light (lux) in an office.\nThe amount of light (lux) on a overcast day; typical TV …\nDisables wireframe rendering for any entity it is attached …\nEnables wireframe rendering for any entity it is attached …\nSets the color of the <code>Wireframe</code> of the entity it is …\nA <code>Plugin</code> that draws wireframes.\nIf <code>Self::global</code> is set, any <code>Entity</code> that does not have a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to show wireframes for all meshes. Can be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplements <code>Deref</code> for structs. This is especially useful …\nImplements <code>DerefMut</code> for structs. This is especially useful …\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nTrait that is only implemented for <code>Aligned</code> and <code>Unaligned</code> …\nType-erased Box-like pointer to some unknown type chosen …\nType-erased borrow of some unknown type chosen when …\nType-erased mutable borrow of some unknown type chosen …\nConceptually equivalent to <code>&amp;&#39;a [T]</code> but with length …\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nExtension trait for helper methods on <code>UnsafeCell</code>\nGets a mutable pointer from this owned pointer.\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nGets an immutable reference from this mutable reference\nGets an immutable pointer from this owned pointer.\nTransforms this <code>Ptr</code> into an <code>PtrMut</code>\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCreates a dangling pointer with specified alignment. See …\nSafety\nTransforms this <code>Ptr&lt;T&gt;</code> into a <code>&amp;T</code> with the same lifetime\nSafety\nTransforms this <code>PtrMut&lt;T&gt;</code> into a <code>&amp;mut T</code> with the same …\nConsumes the <code>OwningPtr</code> to drop the underlying data of type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndexes the slice without doing bounds checks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes a value and creates an <code>OwningPtr</code> to it while …\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nTransforms this <code>PtrMut</code> into an <code>OwningPtr</code>\nReturns a copy of the contained value.\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nGets a <code>PtrMut</code> from this with a smaller lifetime.\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer\nA singular element access within a path. Multiple accesses …\nAn error originating from an <code>Access</code> of an element within a …\nThe kind of <code>AccessError</code>, along with some kind-specific …\nA trait used to power array-like operations via reflection.\nA container for compile-time array info.\nAn iterator over an <code>Array</code>.\nA fixed-size list of reflected values.\nA dynamic representation of an enum.\nA list of reflected values.\nAn ordered mapping between reflected values.\nA struct type which allows fields to be added at runtime.\nA tuple which allows fields to be added at runtime.\nA tuple struct which allows fields to be added at runtime.\nDynamic dispatch for <code>TypePath</code>.\nA dynamic representation of an enum variant.\nA trait used to power enum-like operations via reflection.\nA container for compile-time enum info, used by <code>TypeInfo</code>.\nA name-based field access on a struct.\nA index-based field access on a struct.\nAn iterator over the field values of a struct.\nA trait that enables types to be dynamically constructed …\nDerives the <code>FromReflect</code> trait.\nTrait used to generate <code>TypeData</code> for trait reflection.\nA convenience trait which combines fetching and …\nA trait which allows nested <code>Reflect</code> values to be retrieved …\nA convenience trait which combines fetching and …\nA convenience trait which combines fetching and …\nA trait which allows a type to generate its …\nAn error that occurs when using an <code>Access</code> on the wrong …\nAn error that occurs when using an <code>Access</code> on the wrong …\nAn error caused by trying to access a path that’s not …\nAn error that occurs when a type cannot downcast to a …\nA trait used to power list-like operations via reflection.\nAn index-based access on a list.\nA container for compile-time list info.\nAn iterator over an <code>List</code>.\nA trait used to power map-like operations via reflection.\nA container for compile-time map info.\nAn iterator over the key-value pairs of a <code>Map</code>.\nAn error that occurs when a certain type doesn’t contain …\nThe named field of a reflected struct.\nAn <code>Access</code> combined with an <code>offset</code> for more helpful error …\nAn error that occurs when parsing reflect path strings.\nAn error caused by an invalid path string that couldn’t …\nA pre-parsed path to an element within a type.\nThe core trait of <code>bevy_reflect</code>, used for accessing and …\nThe main derive macro used by <code>bevy_reflect</code> for deriving …\nA struct used to deserialize reflected instances of a type.\n<code>Reflect</code> values are commonly used in situations where the …\nType data that represents the <code>FromReflect</code> trait and allows …\nA zero-sized enumuration of the “kinds” of a reflected …\nA mutable enumeration of “kinds” of a reflected type.\nAn owned enumeration of “kinds” of a reflected type.\nSomething that can be interpreted as a reflection path in …\nAn error returned from a failed path string query.\nAn immutable enumeration of “kinds” of a reflected …\nA struct used to serialize reflected instances of a type.\nA trait used to power struct-like operations via reflection…\nStruct enums take the form:\nStruct enums take the form:\nA container for compile-time named struct info.\nType info for struct variants.\nA trait used to power tuple-like operations via reflection.\nTuple enums take the form:\nTuple enums take the form:\nAn iterator over the field values of a tuple.\nAn index-based access on a tuple.\nA container for compile-time tuple info.\nA trait used to power tuple struct-like operations via …\nAn iterator over the field values of a tuple struct.\nA container for compile-time tuple struct info.\nType info for tuple variants.\nA trait used to type-erase type metadata.\nCompile-time type information for various reflected types.\nA static accessor to type paths and names.\nDerives the <code>TypePath</code> trait, providing a stable alternative …\nProvides dynamic access to all methods on <code>TypePath</code>.\nRuntime storage for type metadata, registered into the …\nA registry of reflected types.\nA synchronized wrapper around a <code>TypeRegistry</code>.\nA static accessor to compile-time type information.\nUnit enums take the form:\nUnit enums take the form:\nType info for unit variants.\nThe unnamed field of a reflected tuple or tuple struct.\nA container for compile-time info related to general value …\nAn iterator over the fields in the current enum variant.\nA container for compile-time enum variant info.\nDescribes the form of an enum variant.\nRepresentation for individual element accesses within a …\nThe returns the <code>Access</code> that this <code>AccessError</code> occured in.\nThe <code>Access</code> itself.\nRegisters the type described by <code>registration</code>.\nApplies a reflected value to this value.\nApplies the reflected array data to the given array.\nThe default debug formatter for <code>Array</code> types.\nReturns the <code>u64</code> hash of the given array.\nCompares two arrays (one concrete and one reflected) to …\nReturns the value as a <code>&amp;dyn Any</code>.\nReturns the value as a <code>&amp;mut dyn Any</code>.\nCasts this type to a reflected value.\nConvert <code>Ptr</code> into <code>&amp;dyn Reflect</code>.\nCasts this type to a mutable reflected value.\nConvert <code>PtrMut</code> into <code>&amp;mut dyn Reflect</code>.\nThe compile-time capacity of the array.\nClones the map, producing a <code>DynamicMap</code>.\nClones the struct into a <code>DynamicStruct</code>.\nClones the struct into a <code>DynamicTuple</code>.\nClones the struct into a <code>DynamicTupleStruct</code>.\nClones the list, producing a <code>DynamicArray</code>.\nClones the list, producing a <code>DynamicList</code>.\nClones the value as a <code>Reflect</code> trait object.\nChecks if a variant with the given name exists within this …\nReturns the name of the crate the type is in, or <code>None</code> if …\nSee <code>TypePath::crate_name</code>.\nReturns a reference to the value of type <code>T</code> in this …\nReturns a mutable reference to the value of type <code>T</code> in this …\nDebug formatter for the value.\nDeserializes a reflected value.\nReturns a reference to this <code>Access</code>’s inner value as a …\nDowncasts the value to type <code>T</code>, consuming the trait object.\nReturns a boxed object from a boxed trait object if the …\nDowncasts the value to type <code>T</code> by mutable reference.\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nDowncasts the value to type <code>T</code> by reference.\nReturns a reference to the object within the trait object …\nDrain the elements of this array to get a vector of owned …\nDrain the elements of this list to get a vector of owned …\nDrain the key-value pairs of this map to get a vector of …\nDrain the fields of this tuple to get a vector of owned …\nGets a <code>&amp;T</code> to the specified element on the given <code>Reflect</code> …\nGets a <code>&amp;mut T</code> to the specified element on the given <code>Reflect</code>…\nCreate a type registry with <em>no</em> registered types.\nThe default debug formatter for <code>Enum</code> types.\nReturns the <code>u64</code> hash of the given enum.\nCompares an <code>Enum</code> with a <code>Reflect</code> value.\nReturns a reference to the value of the field named <code>name</code> …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field (in the …\nGet the field with the given name.\nGet the field with the given name.\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field (in the …\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field (in …\nReturns the number of fields in the struct.\nReturns the number of fields in the tuple.\nReturns the number of fields in the tuple struct.\nReturns the number of fields in the current variant.\nThe total number of fields in this struct.\nThe total number of fields in this tuple.\nThe total number of fields in this struct.\nThe total number of fields in this variant.\nThe total number of fields in this variant.\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field (in …\nA slice containing the names of all fields in order.\nA slice containing the names of all fields in order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DynamicEnum</code> from an existing one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a function pointer to turn a <code>Ptr</code> into <code>&amp;dyn Reflect</code> for …\nGet a function pointer to turn a <code>PtrMut</code> into …\nCreate a <code>DynamicEnum</code> from an existing one.\nConstructs a concrete instance of <code>Self</code> from a reflected …\nPerform a <code>FromReflect::from_reflect</code> conversion on the …\nReturns a reference to the element at <code>index</code>, or <code>None</code> if …\nReturns a reference to the element at <code>index</code>, or <code>None</code> if …\nReturns a reference to the value associated with the given …\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns the key-value pair at <code>index</code> by reference, or <code>None</code> …\nReturns the key-value pair at <code>index</code> by reference where the …\nReturns a reference to the value of the field named <code>name</code>, …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the element at <code>index</code>, or …\nReturns a mutable reference to the element at <code>index</code>, or …\nReturns a mutable reference to the value associated with …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nReturns the <code>TypeInfo</code> of the type <em>represented</em> by this value.\nTurn the value into a serializable representation\nReturns a reference to the <code>TypeData</code> of type <code>T</code> associated …\nReturns a mutable reference to the <code>TypeData</code> of type <code>T</code> …\nReturns the <code>TypeInfo</code> associated with the given <code>TypeId</code>.\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nSee <code>TypePath::type_ident</code>.\nA macro used to generate a <code>FromReflect</code> trait …\nA replacement for <code>#[derive(Reflect)]</code> to be used with …")