searchState.loadedDescShard("bevy_internal", 6, "Returns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the clock is currently paused.\nReturns <code>true</code> only on the tick the timer reached its …\nReturns the <code>Instant</code> when <code>Self::update</code> was last called, if …\nReturns the maximum amount of time that can be added to …\nReturns the mode of the timer.\nCreate a new unpaused <code>Stopwatch</code> with no elapsed time.\nConstructs a new <code>Time&lt;Real&gt;</code> instance with a specific …\nCreates a new timer with a given duration.\nCreate a new clock from context with <code>Self::delta</code> and …\nReturns the amount of overstep time accumulated toward new …\nReturns the amount of overstep time accumulated toward new …\nReturns the amount of overstep time accumulated toward new …\nPauses the stopwatch. Any call to <code>tick</code> while paused will …\nStops the clock, preventing it from advancing until …\nPauses the Timer. Disables the ticking of the timer.\nReturns <code>true</code> if the stopwatch is paused.\nReturns <code>true</code> if the timer is paused.\nThe Bevy Time Prelude.\nReturns the speed the clock advances relative to your …\nReturns the speed the clock advances relative to your …\nReturns the remaining time using Duration\nReturns the remaining time in seconds\nResets the stopwatch. The reset doesn’t affect the …\nResets the timer. The reset doesn’t affect the <code>paused</code> …\nRuns <code>FixedMain</code> zero or more times based on delta of …\nSets the duration of the timer.\nSets the elapsed time of the stopwatch.\nSets the elapsed time of the timer without any other …\nSets the maximum amount of time that can be added to this …\nSets the mode of the timer.\nSets the speed the clock advances relative to your system …\nSets the speed the clock advances relative to your system …\nSets the amount of virtual time that must pass before the …\nSets the amount of virtual time that must pass before the …\nSets the amount of virtual time that must pass before the …\nSets the modulus used to calculate <code>elapsed_wrapped</code>.\nReturns the <code>Instant</code> the clock was created.\nAdvance the stopwatch by <code>delta</code> seconds. If the stopwatch …\nAdvance the timer by <code>delta</code> seconds. Non repeating timer …\nReturns the number of times a repeating timer finished …\nReturns the amount of virtual time that must pass before …\nUnpauses the stopwatch. Resume the effect of ticking on …\nResumes the clock if paused.\nUnpauses the Timer. Resumes the ticking of the timer.\nUpdates the internal time measurements.\nUpdates time with a specified <code>Duration</code>.\nUpdates time with a specified <code>Instant</code>.\nAdvances <code>Time&lt;Virtual&gt;</code> and <code>Time</code> based on the elapsed …\nReturns <code>true</code> if the clock was paused at the start of this …\nReturns the modulus used to calculate <code>elapsed_wrapped</code>.\nRun condition that is active on a regular time interval, …\nRun condition that is active on a regular time interval, …\nRun condition that is active <em>once</em> after the specified …\nRun condition that is active <em>once</em> after the specified …\nRun condition that is active when the <code>Time&lt;Virtual&gt;</code> clock …\nRun condition that is active <em>indefinitely</em> after the …\nRun condition that is active <em>indefinitely</em> after the …\nThe fixed timestep game clock following virtual time.\nRun once and stop.\nReal time clock representing elapsed wall clock time.\nReset when finished.\nA generic clock resource that tracks how much it has …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nThe virtual game clock representing game time.\nAn identity <code>TransformBundle</code> with no translation, rotation, …\nA <code>Bundle</code> of the <code>Transform</code> and <code>GlobalTransform</code> <code>Component</code>s, …\nThe base plugin for handling <code>Transform</code> components\nA trait for point transformation methods.\nPropagates changes in transform to children’s …\nSet enum for the systems relating to transform propagation\nExtension to <code>EntityCommands</code> to modify <code>bevy_hierarchy</code> …\nThe basic components of the transform crate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TransformBundle</code> from a <code>Transform</code>.\nThe global transform of the entity.\nSystem parameter for computing up-to-date <code>GlobalTransform</code>s.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe transform of the entity.\nSystems responsible for transform propagation\nTransform a point.\nCollection of methods similar to <code>BuildChildren</code>, but …\nCommand similar to <code>PushChild</code>, but updating the child …\nCommand similar to <code>RemoveParent</code>, but updating the child …\nChild entity to add.\n<code>Entity</code> whose parent must be removed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParent entity to add the child to.\nMake this entity parentless while preserving this entity’…\nChange this entity’s parent while preserving this entity…\nDescribe the position of an entity relative to the …\nAn identity <code>GlobalTransform</code> that maps all points in space …\nAn identity <code>Transform</code> with no translation, rotation, and a …\nDescribe the position of an entity. If the entity has a …\nReturns the 3d affine transformation matrix as an <code>Affine3A</code>.\nReturn the local back vector (Z).\nEquivalent to <code>local_z()</code>\nReturns the 3d affine transformation matrix from this …\nReturns the 3d affine transformation matrix as a <code>Mat4</code>.\nReturns the 3d affine transformation matrix from this …\nReturns the transformation as a <code>Transform</code>.\nReturn the local down vector (-Y).\nEquivalent to <code>-local_y()</code>\nReturn the local forward vector (-Z).\nEquivalent to <code>-local_z()</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the translation, rotation, and scale from <code>matrix</code>. …\nCreates a new <code>Transform</code>, with <code>rotation</code>. Translation will …\nCreates a new <code>Transform</code>, with <code>scale</code>. Translation will be 0 …\nCreates a new <code>Transform</code>, with <code>translation</code>. Rotation will …\nCreates a new <code>Transform</code> at the position <code>(x, y, z)</code>. In 2d, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if, and only if, translation, rotation and …\nReturn the local left vector (-X).\nEquivalent to <code>-local_x()</code>\nGet the unit vector in the local <code>X</code> direction.\nGet the unit vector in the local <code>Y</code> direction.\nGet the unit vector in the local <code>Z</code> direction.\nRotates this <code>Transform</code> so that <code>Transform::forward</code> points …\nRotates this <code>Transform</code> so that <code>Transform::forward</code> points …\nReturns this <code>Transform</code> with a new rotation so that …\nReturns this <code>Transform</code> with a new rotation so that …\nMultiplies <code>self</code> with <code>transform</code> component by component, …\nMultiplies <code>self</code> with <code>transform</code> component by component, …\nGet an upper bound of the radius from the given <code>extents</code>.\nReturns the <code>Transform</code> <code>self</code> would have if it was a child of …\nReturn the local right vector (X).\nEquivalent to <code>local_x()</code>\nRotates this <code>Transform</code> by the given rotation.\nRotates this <code>Transform</code> around a <code>point</code> in space.\nRotates this <code>Transform</code> around the given <code>axis</code> by <code>angle</code> (in …\nRotates this <code>Transform</code> by the given <code>rotation</code>.\nRotates this <code>Transform</code> around its local <code>axis</code> by <code>angle</code> (in …\nRotates this <code>Transform</code> around its local <code>X</code> axis by <code>angle</code> …\nRotates this <code>Transform</code> around its local <code>Y</code> axis by <code>angle</code> …\nRotates this <code>Transform</code> around its local <code>Z</code> axis by <code>angle</code> …\nRotates this <code>Transform</code> around the <code>X</code> axis by <code>angle</code> (in …\nRotates this <code>Transform</code> around the <code>Y</code> axis by <code>angle</code> (in …\nRotates this <code>Transform</code> around the <code>Z</code> axis by <code>angle</code> (in …\nRotation of the entity.\nScale of the entity.\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.\nTransforms the given <code>point</code>, applying shear, scale, …\nTransforms the given <code>point</code>, applying scale, rotation and …\nTranslates this <code>Transform</code> around a <code>point</code> in space.\nGet the translation as a <code>Vec3</code>.\nPosition of the entity. In 2d, the last value of the <code>Vec3</code> …\nGet the translation as a <code>Vec3A</code>.\nReturn the local up vector (Y).\nEquivalent to <code>local_y()</code>\nReturns this <code>Transform</code> with a new rotation.\nReturns this <code>Transform</code> with a new scale.\nReturns this <code>Transform</code> with a new translation.\nError returned by <code>TransformHelper::compute_global_transform</code>…\nAn ancestor is missing. This probably means that your …\nThe entity or one of its ancestors is missing the <code>Transform</code>…\nThe entity does not exist.\nSystem parameter for computing up-to-date <code>GlobalTransform</code>s.\nComputes the <code>GlobalTransform</code> of the given entity from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate <code>GlobalTransform</code> component of entities based on …\nUpdate <code>GlobalTransform</code> component of entities that aren’t …\nIndependent of all other nodes, but relative to its parent …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nAutomatically determine the value based on the context and …\nUse the parent node’s <code>AlignItems</code> value to determine how …\nUse the parent node’s <code>JustifyItems</code> value to determine …\nTrack minimum size should be automatically sized\nTrack maximum size should be automatically sized\nRepeat the track to fill available space\nRepeat the track to fill available space but collapse any …\nThe amount of space available to a node in a given axis …\nThe background color of the node\nThe items are packed such that their baselines align.\nThe items are packed such that their baselines align.\nThis item will be aligned at the baseline.\nThis item will be aligned at the baseline.\nBlocks interaction\nThe border color of the UI node.\nThe calculated clip of the node\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis\nThis item will be aligned along the center of the axis.\nThis item will be aligned along the center of the axis.\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis.\nHide overflowing items.\nFlex from top to bottom.\nItems are placed by filling each column in turn, adding …\nCombines <code>Column</code> with the dense packing algorithm.\nFlex from bottom to top.\nA node with a <code>ContentSize</code> component is a node where its …\nRepeat the track fixed number of times\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe amount of space available is the specified number of …\nDefines the text direction.\nDefines the layout model used by this node.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nThis item will be aligned with the end of the axis.\nThis item will be aligned with the end of the axis.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nTrack maximum size should be sized according to the …\nTrack maximum size should be sized according to the …\nA <code>FixedMeasure</code> is a <code>Measure</code> that ignores all constraints …\nUse Flexbox layout model to determine the position of this …\nDefines how flexbox items are ordered within a flexbox\nThe items are packed towards the end of the axis, unless …\nThis item will be aligned with the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nThis item will be aligned with the start of the axis, …\nThe items are packed towards the start of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nDefines if flexbox items appear on a single line or on …\nAfter this label, input interactions with UI entities have …\nDescribes whether the node should block interactions with …\nThe dimension as a fraction of the total available grid …\nIndicates the order in which this node should be rendered …\nUse CSS Grid layout model to determine the position of …\nControls whether grid items are placed row-wise or …\nRepresents the position of a grid item in a single axis.\nErrors that occur when setting constraints for a …\nA <code>GridTrack</code> is a Row or Column of a CSS Grid. This struct …\nHow many times to repeat a repeated grid track\nThe node has been hovered over\nInherit from parent node.\nDescribes what type of input interaction has occurred for …\nMarker used to identify default cameras, they will have …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nAfter this label, the ui layout state has been updated\nText is written left to right.\nIndicates the order in which this node should be rendered …\nThe amount of space available is indefinite and the node …\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nA <code>Measure</code> is used to compute the size of a ui node when …\nThe amount of space available is indefinite and the node …\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nSingle line, will overflow if needed.\nBase component for a UI node, which also provides the …\nMain query for <code>ui_focus_system</code>\nAutomatically generated [<code>WorldQuery</code>] item type for …\nAutomatically generated [<code>WorldQuery</code>] type for a read-only …\nAutomatically generated [<code>WorldQuery</code>] item type for …\nNothing has happened\nUse no layout, don’t render this node and its children.\nThe <code>Outline</code> component adds an outline outside the edge of …\nAfter this label, node outline widths have been updated\nWhether to show or hide overflowing items\nWhether to show or hide overflowing items\nLets interaction pass through\nSet the value as a percentage of its parent node’s …\nTrack minimum size should be a percentage value\nTrack maximum size should be a percentage value\nThe strategy used to position this node\nThe node has been pressed.\nSet this value in logical pixels.\nTrack minimum size should be a fixed pixel value\nTrack maximum size should be a fixed pixel value\nRelative to all other nodes with the <code>PositionType::Relative</code>…\nA component storing the position of the mouse relative to …\nRepresents a <em>possibly</em> repeated <code>GridTrack</code>.\nText is written right to left.\nSame way as text direction along the main axis.\nItems are placed by filling each row in turn, adding new …\nCombines <code>Row</code> with the dense packing algorithm.\nOpposite way as text direction along the main axis.\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nAfter this label, the <code>UiStack</code> resource has been updated\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nThis item will be aligned with the start of the axis.\nThis item will be aligned with the start of the axis.\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nThe items are stretched to fill the space they’re given.\nThe items are stretched to fill the space they’re given.\nThis item will be stretched to fill the container.\nThis item will be stretched to fill the space it’s given.\nThe items are stretched to fill the container along the …\nThe items are stretched to fill the container along the …\nDescribes the style of a UI container node\nIndicates that this root <code>Node</code> entity should be rendered to …\nThe 2D texture displayed for this UI node\nMaterials are used alongside <code>UiMaterialPlugin</code> and …\nRender pipeline data for a given <code>UiMaterial</code>\nAdds the necessary ECS resources and render logic to …\nThe basic plugin for Bevy UI\nA type which is commonly used to define margins, paddings …\nThe current scale of the UI.\nThe current UI stack, which contains all UI nodes ordered …\nThe label enum labeling the types of systems in the Bevy UI\nSet this value in percent of the viewport’s larger …\nSet this value in percent of the viewport’s smaller …\nRepresents the possible value types for layout properties.\nSet this value in percent of the viewport height\nShow overflowing items.\nSet this value in percent of the viewport width\nMultiple lines, if needed.\nSame as <code>FlexWrap::Wrap</code> but new lines will appear before …\nIndicates that this <code>Node</code> entity’s front-to-back ordering …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nCreates a new <code>UiRect</code> where all sides have the same value.\nThe aspect ratio of the node (defined as <code>width / height</code>)\nCreate a grid track which is automatically sized to fit …\nCreate a repeating set of grid tracks with automatic size\nPlace the grid item automatically (letting the <code>span</code> …\nCreates a new <code>UiRect</code> where both <code>left</code> and <code>right</code> take the …\nThe amount of space between the margins of a node and its …\nCreates a new <code>UiRect</code> where <code>bottom</code> takes the given value, …\nThe value corresponding to the bottom side of the UI rect.\nThe vertical position of the bottom edge of the node.\nClip overflowing items on both axes\nThe rect of the clip\nClip overflowing items on the x axis\nClip overflowing items on the y axis\nThe color of the outline.\nThe size of the gutters between items in a horizontal …\nCompute the layout for each window entity’s …\nCompute free_space given the passed used_space\nDefines the text direction. For example, English is …\nWhich layout algorithm to use when laying out this node’…\nPlace the grid item specifying the <code>end</code> grid line (letting …\nPlace the grid item specifying the <code>end</code> grid line and how …\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nCreate a <code>fit-content()</code> grid track with percentage limit.\nCreate a repeating set of <code>fit-content()</code> grid tracks with …\nCreate a <code>fit-content()</code> grid track with fixed pixel limit.\nCreate a repeating set of <code>fit-content()</code> grid tracks with …\nCreates a <code>ContentSize</code> with a <code>Measure</code> that always returns …\nCreate a grid track with a <code>minmax(0, Nfr)</code> size.\nCreate a repeating set of grid tracks with a <code>minmax(0, Nfr)</code>…\nThe initial length of a flexbox in the main axis, before …\nWhether a Flexbox container should be a row or a column. …\nDefines how much a flexbox item should grow if there’s …\nDefines how much a flexbox item should shrink if there’s …\nWhether a Flexbox container should wrap its contents onto …\nWhether the image should be flipped along its x-axis\nWhether the image should be flipped along its y-axis\nCreate a grid track with an <code>fr</code> size. Note that this will …\nCreate a repeating set of grid tracks with an <code>fr</code> size. …\nReturns this materials fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the grid line at which the item should end, or <code>None</code>…\nGet the layout geometry for the taffy node corresponding …\nReturns span for this grid item, or <code>None</code> if not set.\nReturns the grid line at which the item should start, or …\nDefines the size of implicitly created columns. Columns …\nControls whether automatically placed grid items are …\nDefines the size of implicitly created rows. Rows are …\nThe column in which a grid item starts and how many …\nThe row in which a grid item starts and how many rows it …\nDefines the number of columns a grid has and the sizes of …\nDefines the number of rows a grid has and the sizes of …\nThe ideal height of the node. <code>height</code> is used when it is …\nCreates a new <code>UiRect</code> where <code>left</code> and <code>right</code> take the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to Option Definite values become Some(value). …\nReturns true for definite values, else false\nCompare equality with another AvailableSpace, treating …\nOverflow is visible on both axes\nOverflow is visible on this axis\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nCreates a new <code>UiRect</code> where <code>left</code> takes the given value, and …\nThe value corresponding to the left side of the UI rect.\nThe horizontal position of the left edge of the node.\nReturns the logical pixel coordinates of the UI node, …\nIf passed value is Some then return …\nThe amount of space around a node outside its border.\nCreate a grid track which is automatically sized to fit …\nCreate a repeating set of grid tracks with max-content size\nThe maximum height of the node. <code>max_height</code> is used if it …\nThe maximum width of the node. <code>max_width</code> is used if it is …\nIf passed value is Some then return …\nCalculate the size of the node given the constraints.\nCreate a grid track which is automatically sized to fit …\nCreate a repeating set of grid tracks with min-content size\nThe minimum height of the node. <code>min_height</code> is used if it …\nThe minimum width of the node. <code>min_width</code> is used if it is …\nCreate a <code>minmax()</code> grid track.\nCreate a repeating set of <code>minmax()</code> grid track\nA helper function to check if the mouse is over the node\nCreates a new <code>UiRect</code> from the values specified.\nCreate a new outline\nThis module contains basic node bundles used to build UIs\nCursor position relative to the size and position of the …\nVisible area of the Node relative to the size of the …\nThe amount of space between a node’s outline the edge of …\nReturn self if definite or a default value\nReturn self if definite or a the result of the default …\nReturns the thickness of the UI node’s outline. If this …\nWhether overflowing content should be displayed or clipped.\nThe amount of space between the edges of a node and its …\nCreates a new <code>UiRect</code> from the values specified in …\nCreate a grid track with a percentage size\nCreate a repeating set of grid tracks with a percentage …\nReturns the physical pixel coordinates of the UI node, …\nReturns the size of the node in physical pixels based on …\nWhether a node should be laid out in-flow with, or …\nCreates a new <code>UiRect</code> from the values specified in logical …\nCreate a grid track with a fixed pixel size\nCreate a repeating set of grid tracks with a fixed pixel …\nThe range of vertices inside the <code>UiMaterialMeta</code>\nRemoves each camera entity from the internal map and then …\nRemoves each entity from the internal map and then removes …\nCreate a repetition of a set of tracks\nResolves a <code>Val</code> to its value in logical pixels and returns …\nResolve and update the widths of Node outlines\nCreates a new <code>UiRect</code> where <code>right</code> takes the given value, …\nThe value corresponding to the right side of the UI rect.\nThe horizontal position of the right edge of the node.\nThe size of the gutters between items in a vertical …\nSet a <code>Measure</code> for the UI node entity with this component\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_archetype</code> for each member that …\nSet the ui node entities without a <code>Parent</code> as children to …\nMutate the item, setting the <code>end</code> grid line\nMutate the item, setting the number of tracks the item …\nMutate the item, setting the <code>start</code> grid line\nSAFETY: we call <code>set_table</code> for each member that implements …\nSAFETY: we call <code>set_table</code> for each member that implements …\nThe calculated node size as width and height in logical …\nPlace the grid item automatically, specifying how many …\nThe order of the node in the UI layout. Nodes with a …\nPlace the grid item specifying the <code>start</code> grid line …\nPlace the grid item specifying <code>start</code> and <code>end</code> grid lines (…\nPlace the grid item specifying the <code>start</code> grid line and how …\nHandle to the texture\nCreates a new <code>UiRect</code> where <code>top</code> takes the given value, and …\nThe value corresponding to the top side of the UI rect.\nThe vertical position of the top edge of the node.\nRemoves children from the entity’s taffy node if it …\nRemoves the measure from the entity’s taffy node if it …\nUpdate the <code>MeasureFunc</code> of the taffy node corresponding to …\nThe system that sets Interaction for all UI elements based …\nUpdates the UI’s layout tree, computes the new layout …\nList of UI nodes ordered from back-to-front\nThe calculated node size as width and height in logical …\nReturn the definite value. Panic is the value is not …\nReturn the definite value or a default value\nReturn the definite value or the result of the default …\nThis module contains systems that update the UI when …\nUpdate the children of the taffy node corresponding to the …\nRetrieves the Taffy node associated with the given UI node …\nReturns this materials vertex shader. If <code>ShaderRef::Default</code>…\nCreates a new <code>UiRect</code> where <code>top</code> and <code>bottom</code> take the given …\nShow overflowing items on both axes\nThis module contains the basic building blocks of Bevy’s …\nThe ideal width of the node. <code>width</code> is used when it is …\nThe width of the outline.\nFlip the image along its x-axis\nFlip the image along its y-axis\nWhether to show or clip overflowing items on the x axis\nWhether to show or clip overflowing items on the y axis\nPrints a debug representation of the computed layout of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of space available to a node in a given axis …\nA node with a <code>ContentSize</code> component is a node where its …\nThe amount of space available is the specified number of …\nA <code>FixedMeasure</code> is a <code>Measure</code> that ignores all constraints …\nThe amount of space available is indefinite and the node …\nA <code>Measure</code> is used to compute the size of a ui node when …\nThe amount of space available is indefinite and the node …\nCalculate the size of the node given the constraints.\nA UI node that is a texture atlas sprite\nA UI node that is a button\nA UI node that is an image\nA UI node that is rendered using a <code>UiMaterial</code>\nThe basic UI node.\nA UI node that is text\nThe background color, which serves as a “fill” for …\nThe background color, which serves as a “fill” for …\nThe background color, which serves as a “fill” for …\nThe background color that will fill the containing node\nThe background color, which serves as a “fill” for …\nThe color of the Node’s border\nThe color of the Node’s border\nMarker component that signals this node is a button\nThe calculated size based on the given image\nThe calculated size based on the given image\nThe calculated size based on the given image\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>TextBundle</code> from a single section.\nCreate a <code>TextBundle</code> from a list of sections.\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe image of the node\nThe image of the node\nThe image of the node\nThe size of the image in pixels\nThe size of the image in pixels\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nDescribes whether and how the button has been interacted …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>UiMaterial</code> used to render the node.\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nStyles which control the layout (size and position) of the …\nStyles which control the layout (size and position) of the …\nStyles which control the layout (size and position) of the …\nStyles which control the layout (size and position) of the …\nStyles which control the layout (size and position) of the …\nStyles which control the layout (size and position) of the …\nContains the text of the node\nText system flags\nText layout information\nA handle to the texture atlas to use for this Ui Node\nThe transform of the node\nThe transform of the node\nThe transform of the node\nThe transform of the node\nThe transform of the node\nThe transform of the node\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nReturns this <code>TextBundle</code> with a new <code>BackgroundColor</code>.\nReturns this <code>TextBundle</code> with soft wrapping disabled. Hard …\nReturns this <code>TextBundle</code> with a new <code>Style</code>.\nReturns this <code>TextBundle</code> with a new <code>JustifyText</code> on <code>Text</code>.\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nMaterials are used alongside <code>UiMaterialPlugin</code> and …\nReturns this materials fragment shader. If …\nReturns this materials vertex shader. If <code>ShaderRef::Default</code>…\nUpdates clipping for all nodes\nMarker struct for buttons\nUsed to calculate the size of UI image nodes\nMarker struct for labels\nText system flags\nThe size of the image’s texture\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a new <code>Measure</code> for a text node on changes to its …\nThe size of the image’s texture\nThe size of the image’s texture\nUpdates the layout and size information for a UI text node …\nUpdates content size of the node based on the image …\nA <code>Hasher</code> for hashing an arbitrary stream of bytes.\nA borrowed value\nAn owned and dynamically typed Future used when you can’…\nMuch like a <code>Cow</code>, but owned values are Arc-ed to make …\nA <code>Duration</code> type to represent a span of time, typically …\nA shortcut alias for <code>hashbrown::hash_map::Entry</code>.\nA hasher builder that will create a fixed hasher.\nA wrapper for floats that implements <code>Ord</code>, <code>Eq</code>, and <code>Hash</code> …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nA pre-hashed value of a specific type. Pre-hashing enables …\nA measurement of a monotonically nondecreasing clock. …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nThe duration of one nanosecond.\n<code>BuildHasher</code> for <code>TypeId</code>s.\nAn occupied entry.\nA type which calls a function when dropped. This can be …\nAn owned <code>Arc</code>-ed value\nA <code>BuildHasher</code> that results in a <code>PassHasher</code>.\nA no-op hash that only works on <code>u64</code>s. Will panic if …\nA <code>HashMap</code> pre-configured to use <code>Hashed</code> keys and <code>PassHash</code> …\nExtension methods intended to add functionality to …\nProvides a Hasher factory. This is typically used (e.g. by …\nThe duration of one second.\nA stable hash map implementing aHash, a high speed keyed …\nA stable hash set implementing aHash, a high speed keyed …\nA static value reference. This exists to avoid conversion …\nA measurement of the system clock, useful for talking to …\nAn error returned from the <code>duration_since</code> and <code>elapsed</code> …\nAn error which can be returned when converting a …\nA specialized hashmap type with Key of <code>TypeId</code> Iteration …\nAn anchor in time which can be used to create new …\nA Universally Unique Identifier (UUID).\nA vacant entry.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nPanics\nHelper macro to generate tuple pyramids. Useful to …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a <code>Braced</code> formatter.\nConstructs a new AHasher with keys based on this …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nClones into an owned [<code>CowArc&lt;&#39;static&gt;</code>]. If internally a …\nCalls the <code>tracing::debug!</code> macro on a value.\nCall <code>debug!</code> once per call site.\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nConstructs a new AHasher with fixed keys. If <code>std</code> is …\nMacro to define a new label trait\nLike <code>tracing::trace</code>, but conditional on cargo feature …\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.\nDivide <code>Duration</code> by <code>f32</code>.\nDivide <code>Duration</code> by <code>f64</code>.\nReturns the positive duration which represents how far …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed from an earlier point …\nReturns the amount of time elapsed since this instant.\nReturns the difference from this system time to the …\nA buffer that can be used for <code>encode_...</code> calls, that is …\nA fast impl of <code>PartialEq</code> that first checks that <code>other</code>’s …\nProcesses a <code>Result</code> by calling the <code>tracing::error!</code> macro in …\nCall <code>error!</code> once per call site.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nCreates a new <code>Duration</code> from the specified number of weeks.\nUtilities for working with <code>Future</code>s.\nCreate a new <code>RandomState</code> <code>BuildHasher</code> based on the provided …\nIf the UUID is the correct version (v1, or v6) this will …\nTries to get or insert the value for the given <code>key</code> using …\nShortens a type name to remove all module paths.\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nThe pre-computed hash.\nCalculates the hash of a single value. This provides a …\nGet a <code>Hyphenated</code> formatter.\nCalls the <code>tracing::info!</code> macro on a value.\nCall <code>info!</code> once per call site.\nProvides types used to statically intern immutable values.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConverts this into an “owned” value. If internally a …\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nReturns true if this <code>Duration</code> spans no time.\nTraits used by label implementations\nThe ‘max UUID’ (all ones).\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nPre-hashes the given value using the <code>BuildHasher</code> …\nReturns an object that will invoke the specified callback …\nCreate a new <code>RandomState</code> <code>BuildHasher</code> using random keys.\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a random UUID.\nCreates a UUID using a name from a namespace, based on the …\nThe ‘nil UUID’ (all zeros).\nReturns an instant corresponding to “now”.\nReturns the system time corresponding to “now”.\nCall some expression only once per call site.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nGet a <code>Simple</code> formatter.\nReturns the amount of time elapsed from another instant to …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nA reimplementation of the currently unstable …\nA reimplementation of the currently unstable …\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns a 128bit little-endian value containing the value.\nCall <code>trace!</code> once per call site.\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nUUID utilities.\nProcesses a <code>Result</code> by calling the <code>tracing::warn!</code> macro in …\nCall <code>warn!</code> once per call site.\nBuild a <code>RandomState</code> from a single key. The provided key …\nAllows for explicitly setting the seeds to used. All …\nPolls a future once, and returns the output if ready or …\nConsumes a future, polls it once, and immediately returns …\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nKey equivalence trait.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nLow-level hash table with explicit hashing.\nThe error type for <code>try_reserve</code> methods.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nReturns the number of elements the table can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nClears the table, removing all values.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nClears the set, returning all elements in an iterator.\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nReturns an <code>Entry</code> for an entry in the table with the given …\nGets the given key’s corresponding entry by reference in …\nChecks if this value is equivalent to the given key.\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nReturns a reference to an entry in the table with the …\nReturns an <code>OccupiedEntry</code> for an entry in the table with …\nReturns a mutable reference to an entry in the table with …\nReturns the argument unchanged.\nExamples\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts an owned copy of the given <code>value</code> into the set if …\nInserts a value computed from <code>f</code> into the set if the given …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA hash table implemented with quadratic probing and SIMD …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts an element into the <code>HashTable</code> with the given hash …\nInsert a key-value pair into the map without checking if …\nInsert a value the set without checking if the value …\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates a consuming iterator, that is, one that moves each …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order, with …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the table.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code>.\nCreates an empty <code>HashMap</code> using the given allocator.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code> using the given allocator.\nExperimental and unsafe <code>RawTable</code> API. This module is only …\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nReturns a reference to the <code>RawTable</code> used underneath <code>HashMap</code>…\nReturns a reference to the <code>RawTable</code> used underneath <code>HashSet</code>…\nReturns a mutable reference to the <code>RawTable</code> used …\nReturns a mutable reference to the <code>RawTable</code> used …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate. …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the table with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nShrinks the capacity of the table as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity.\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity using …\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe layout of the allocation request that failed.\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash and matching …\nAccess an immutable entry by hash and matching function.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an immutable entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an immutable entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns a …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntryRef’s …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nSet the value of an entry with a custom hasher function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nTake ownership of the key.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntryRef into a mutable reference to …\nGets a reference to the key in the entry.\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it. Keeps …\nTakes the value out of the entry, and returns it. Keeps …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map. …\nTake the ownership of the key and value from the map. …\nReplaces the entry, returning the old key and value. The …\nReplaces the entry, returning the old key and value. The …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nReplaces the key in the hash map with the key used to …\nReplaces the key in the hash map with the key used to …\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nEnsures a value is in the entry by inserting if it was …\nTakes the value out of the entry, and returns it. Keeps …\nReplaces the entry, returning the old value. The new value …\nType representing the absence of an entry, as returned by …\nA draining iterator over the items of a <code>HashTable</code>.\nA view into a single entry in a table, which may either be …\nA draining iterator over entries of a <code>HashTable</code> which don…\nLow-level hash table with explicit hashing.\nAn owning iterator over the entries of a <code>HashTable</code> in …\nAn iterator over the entries of a <code>HashTable</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashTable</code> in …\nAn occupied entry.\nA view into an occupied entry in a <code>HashTable</code>. It is part …\nA vacant entry.\nA view into a vacant entry in a <code>HashTable</code>. It is part of …\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, replacing any existing value …\nInserts a new element into the table with the hash that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the VacantEntry into a mutable reference to the …\nConverts the AbsentEntry into a mutable reference to the …\nEnsures a value is in the entry by inserting if it was …\nEnsures a value is in the entry by inserting the result of …\nTakes the value out of the entry, and returns it along …\nA reference to a hash table bucket containing a <code>T</code>.\nA reference to an empty bucket into which an can be …\nIterator which consumes elements without freeing the table …\nIterator which consumes a table and returns elements.\nIterator which returns a raw pointer to every full bucket …\nIterator over occupied buckets that could match a given …\nA raw hash table with an unsafe API.\nReturn the information about memory allocated by the table.\nReturns a reference to the underlying allocator.\nReturns a unique mutable reference to the <code>value</code>.\nAcquires the underlying raw pointer <code>*mut T</code> to <code>data</code>.\nReturns a shared immutable reference to the <code>value</code>.\nReturns a pointer to an element in the table.\nReturns the index of a bucket from a <code>Bucket</code>.\nReturns the number of buckets in the table.\nReturns the number of elements the map can hold without …\nRemoves all elements from the table without freeing the …\nMarks all table buckets as empty without dropping their …\nVariant of <code>clone_from</code> to use when a hasher is available.\nCopies <code>size_of&lt;T&gt;</code> bytes from <code>other</code> to <code>self</code>. The source and …\nReturns pointer to one past last <code>data</code> element in the table …\nReturns pointer to start of data table.\nReturns an iterator which removes all elements from the …\nReturns an iterator which removes all elements from the …\nErases an element from the table, dropping it in place.\nFinds and erases an element from the table, dropping it in …\nSearches for an element in the table.\nSearches for an element in the table. If the element is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to an element in the table.\nAttempts to get mutable references to <code>N</code> entries in the …\nGets a mutable reference to an element in the table.\nInserts a new element into the table, and returns its raw …\nInserts a new element into the table, and returns a …\nInserts a new element into the table in the given slot, …\nInserts a new element into the table, without growing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator which consumes all elements from the …\nChecks whether the bucket at <code>index</code> is full.\nReturns <code>true</code> if the table contains no elements.\nReturns an iterator over every element in the table. It is …\nReturns an iterator over occupied buckets that could match …\nReturns the number of elements in the table.\nCreates a new empty hash table without allocating any …\nCreates a new empty hash table without allocating any …\nRefresh the iterator so that it reflects an insertion into …\nRefresh the iterator so that it reflects a removal from …\nRemoves an element from the table, returning it.\nFinds and removes an element from the table, returning it.\nTemporary removes a bucket, applying the given function to …\nEnsures that at least <code>additional</code> items can be inserted …\nShrinks the table to fit <code>max(self.len(), min_size)</code> …\nAttempts to insert a new element without growing the table …\nTries to ensure that at least <code>additional</code> items can be …\nAttempts to allocate a new hash table with at least enough …\nAttempts to allocate a new hash table using the given …\nAllocates a new hash table with at least enough capacity …\nAllocates a new hash table using the given allocator, with …\nA trait for internable values.\nAn interned value. Will stay valid until the end of the …\nA thread-safe interner which can be used to create …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the <code>Interned&lt;T&gt;</code> corresponding to <code>value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a static reference to <code>self</code>, possibly leaking …\nCreates a new empty interner\nReturns <code>true</code> if the two references point to the same value.\nFeeds the reference to the hasher.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn object safe version of <code>Hash</code>. This trait is …\nCasts the type to <code>dyn Any</code>.\nCasts the type to <code>dyn Any</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given <code>Hasher</code>.\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nAn error type returned when an integer cannot be parsed …\nAn error type returned when a checked integral type …\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nMarker type for a directed graph.\nEdge direction.\nEdge direction.\nA graph’s edge type determines whether it has directed …\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\nAn <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.\nAn <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.\nConvert an element like <code>(i, j)</code> or <code>(i, j, w)</code> into a triple …\nAn <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.\nAn <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.\nMarker type for an undirected graph.\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd a node (also called vertex) with associated data <code>weight</code>…\nSimple adjacency list.\nGraph algorithms.\nReturn the current node and edge capacity of the graph.\nRemove all nodes and edges\nRemove all edges\nLookup if there is an edge from <code>a</code> to <code>b</code>.\nCompressed Sparse Row (CSR) is a sparse adjacency matrix …\nGraph traits for associated data and graph construction.\nSimple graphviz dot file format output.\nReturn the number of edges in the graph.\nAccess the source and target nodes for <code>e</code>.\nReturn an iterator over the edge indices of the graph\nCreate an iterator over all edges, in indexed order.\nAccess the weight for edge <code>e</code>.\nAccess the weight for edge <code>e</code>, mutably.\nReturn an iterator yielding immutable access to all edge …\nReturn an iterator yielding mutable access to all edge …\nReturn an iterator of all edges of <code>a</code>.\nReturn an iterator over all the edges connecting <code>a</code> and <code>b</code>.\nReturn an iterator of all edges of <code>a</code>, in the specified …\nExtend the graph from an iterable of edges.\nReturn an iterator over either the nodes without edges to …\nCreate a new <code>Graph</code> by mapping nodes and edges. A node or …\nLookup an edge from <code>a</code> to <code>b</code>.\nLookup an edge between <code>a</code> and <code>b</code>, in either direction.\nAccessor for data structure internals: the first edge in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Graph</code> from an iterable of edges.\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\n<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure where node …\nReturn <code>0</code> for <code>Outgoing</code> and <code>1</code> for <code>Incoming</code>.\nIndex the <code>Graph</code> by two indices, any combination of node or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the graph into either undirected or directed. No …\nConvert the graph into a vector of Nodes and a vector of …\nWhether the graph has directed edges or not.\nCreate a new <code>Graph</code> by mapping node and edge weights to new …\n<code>MatrixGraph&lt;N, E, Ty, NullN, NullE, Ix&gt;</code> is a graph …\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <code>Graph</code> with directed edges.\nCreate a new <code>Graph</code> with undirected edges.\nAccessor for data structure internals: the next edge for …\nReturn the number of nodes (vertices) in the graph.\nReturn an iterator over the node indices of the graph.\nAccess the weight for node <code>a</code>.\nAccess the weight for node <code>a</code>, mutably.\nReturn an iterator yielding immutable access to all node …\nReturn an iterator yielding mutable access to all node …\nOperators for creating new graphs from existings ones.\nReturn the opposite <code>Direction</code>.\nCommonly used items.\nAccess the internal edge array.\nAccess the internal node array.\nRemove an edge and return its edge weight, or <code>None</code> if it …\nRemove <code>a</code> from the graph if it exists, and return its …\nReserves capacity for at least <code>additional</code> more edges to be …\nReserves the minimum capacity for exactly <code>additional</code> more …\nReserves the minimum capacity for exactly <code>additional</code> more …\nReserves capacity for at least <code>additional</code> more nodes to be …\nKeep all edges that return <code>true</code> from the <code>visit</code> closure, …\nKeep all nodes that return <code>true</code> from the <code>visit</code> closure, …\nReverse the direction of all edges\nShrinks the capacity of the graph as much as possible.\nShrinks the capacity of the underlying edges collection as …\nShrinks the capacity of the underlying nodes collection as …\n<code>StableGraph</code> keeps indices stable across removals.\n<code>UnionFind&lt;K&gt;</code> is a disjoint-set data structure.\nAdd or update an edge from <code>a</code> to <code>b</code>. If the edge already …\nGraph traits and graph traversals.\nCreate a new <code>Graph</code> with estimated capacity.\nThe default integer type for graph indices. <code>u32</code> is the …\nAdjacency list edge index type, a pair of integers.\nA reference to an edge of the graph.\nAn iterator over the <code>EdgeReference</code> of all the edges of the …\nTrait for the unsigned integer type used for node and edge …\nAn adjacency list with labeled edges.\nAn iterator over the indices of the neighbors of a node.\nAdjacency list node index type, a plain integer.\nAn iterator over all node indices in the graph.\nAn Iterator over the indices of the outgoing edges from a …\nIterator over the <code>EdgeReference</code> of the outgoing edges from …\nA very simple adjacency list with no node or label weights.\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdds a new node to the list. This allocates a new <code>Vec</code> and …\nAdds a new node to the list. This allocates a new <code>Vec</code> and …\nAdds a new node to the list by giving its list of …\nAdds a new node to the list. This allocates a new <code>Vec</code> and …\nRemoves all nodes and edges from the list.\nLookups whether there is an edge from <code>a</code> to <code>b</code>.\nReturns the number of edges in the list\nReturns the number of edges in the list\nAccesses the source and target of edge <code>e</code>\nReturns an iterator over all edge indices of the graph.\nAccesses the weight of edge <code>e</code>\nAccesses the weight of edge <code>e</code>\nLookups whether there is an edge from <code>a</code> to <code>b</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of all nodes with an edge starting …\nCreates a new, empty adjacency list.\nReturns the number of nodes in the list\nReturns an iterator over all node indices of the graph.\nUpdates or adds an edge from <code>a</code> to <code>b</code> to the graph, with its …\nCreates a new, empty adjacency list tailored for <code>nodes</code> …\nAn algorithm error: a cycle was found in the graph.\nWorkspace for a graph traversal.\nA floating-point measure.\nComputed <em>matching</em> of the graph.\nAssociated data that can be used for measures (such as …\nAn algorithm error: a cycle of negative weights was found …\nSome measure of positive numbers, assuming positive …\nA reusable state for computing the <em>strongly connected </em>…\nA floating-point measure that can be computed from <code>usize</code> …\nReturns an iterator that produces all simple paths from …\n[Generic] A* shortest path algorithm.\nBellman-Ford algorithms.\n[Generic] Compute shortest paths from node <code>source</code> to all …\nGraph Condense every strongly connected component into a …\n[Generic] Return the number of connected components of the …\nReturns <code>true</code> if given edge is in the matching, or <code>false</code> …\nReturns <code>true</code> if given node is in the matching, or <code>false</code> …\n[Generic] Dijkstra’s shortest path algorithm.\nCompute dominators of a control-flow graph.\nIterates over all edges from the matching.\n[Generic] Find the path of a negative cycle reachable from …\n[Generic] Floyd–Warshall algorithm is an algorithm for …\n[Generic] Ford-Fulkerson algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n[Generic] Finds a feedback arc set: a set of edges in the …\n[Generic] Compute a <em>matching</em> using a greedy heuristic.\n[Generic] Check if there exists a path starting at <code>from</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the graph is bipartite. A graph is …\n[Generic] Return <code>true</code> if the input directed graph contains …\n[Generic] Return <code>true</code> if the input graph contains a cycle.\nReturns <code>true</code> if the number of matched <strong>edges</strong> is 0.\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\nReturns <code>true</code> if the matching is perfect.\n[Generic] k’th shortest path algorithm.\n[Generic] Compute the <em>strongly connected components</em> using …\nGets the number of matched <strong>edges</strong>.\nGets the matched counterpart of given node, if there is …\n[Generic] Compute the <em>maximum matching</em> using Gabow’s …\nMinimum Spanning Tree algorithms.\n[Generic] Compute a <em>minimum spanning tree</em> of a graph.\nCreates a new <code>TarjanScc</code>\nReturns the index of the component in which v has been …\nReturn a node id that participates in the cycle\nIterates over all nodes from the matching.\n[Generic] Page Rank algorithm.\n[Generic] Compute the <em>strongly connected components</em> using …\nRenamed to <code>kosaraju_scc</code>.\nUsing the VF2 algorithm, examine both syntactic and …\n[Generic] Compute the <em>strongly connected components</em> using …\n[Generic] Perform a topological sort of a directed graph.\nCompute the transitive reduction and closure of a directed …\n[Generic] A* shortest path algorithm.\n[Generic] Compute shortest paths from node <code>source</code> to all …\n[Generic] Find the path of a negative cycle reachable from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n[Generic] Dijkstra’s shortest path algorithm.\nIterator for nodes dominated by a given node.\nThe dominance relation for some graph and root.\nIterator for a node’s dominators.\nIterate over all of the given node’s dominators …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the immediate dominator of the given node.\nIterate over all nodes immediately dominated by the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the root node used to construct these dominance …\nThis is an implementation of the engineered “Simple, …\nIterate over the given node’s strict dominators.\n[Generic] Finds a feedback arc set: a set of edges in the …\n[Generic] Floyd–Warshall algorithm is an algorithm for …\n[Generic] Ford-Fulkerson algorithm.\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\n[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …\nUsing the VF2 algorithm, examine both syntactic and …\n[Generic] k’th shortest path algorithm.\nComputed <em>matching</em> of the graph.\nReturns the argument unchanged.\nReturns the argument unchanged.\n[Generic] Compute a <em>matching</em> using a greedy heuristic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[Generic] Compute the <em>maximum matching</em> using Gabow’s …\nAn iterator producing a minimum spanning forest of a graph.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n[Generic] Compute a <em>minimum spanning tree</em> of a graph.\n[Generic] Page Rank algorithm.\nReturns an iterator that produces all simple paths from …\nCreates a representation of the same graph respecting …\nComputes the transitive reduction and closure of a DAG.\nCompressed Sparse Row (<code>CSR</code>) is a sparse adjacency matrix …\nThe default integer type for graph indices. <code>u32</code> is the …\nCsr edge index type, a plain integer.\nCsr creation error: edges were not in sorted order.\nTrait for the unsigned integer type used for node and edge …\nCsr node index type, a plain integer.\nIterator over all nodes of a graph.\nReturn <code>true</code> if the edge was added\nAdds a new node with the given weight, returning the …\nRemove all edges\nComputes in <strong>O(log |V|)</strong> time.\nReturn an iterator of all edges of <code>a</code>.\nComputes in <strong>O(1)</strong> time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Csr</code> from a sorted sequence of edges\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator of all neighbors of <code>a</code>.\nComputes in <strong>O(1)</strong> time.\nCreate an empty <code>Csr</code>.\nComputes in <strong>O(1)</strong> time.\nAccess the edge’s weight.\nCreate a new <code>Csr</code> with <code>n</code> nodes. <code>N</code> must implement <code>Default</code> …\nA graph that can be extended with further nodes and edges\nA graph that can be created\nAccess node and edge weights (associated data).\nAccess node and edge weights mutably.\nA graph edge.\nA graph element.\nIterator adaptors for iterators of <code>Element</code>.\nAn iterator that filters graph elements.\nCreate a graph from an iterator of elements.\nA graph node.\nAdd a new edge. If parallel edges (duplicate) are not …\nCreate an iterator adaptor that filters graph elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd or update the edge from <code>a</code> to <code>b</code>. Return the id of the …\n<code>Dot</code> configuration.\n<code>Dot</code> implements output to graphviz .dot format for a graph.\nUse indices for edge labels.\nUse no edge labels.\nDo not print the graph/digraph string.\nUse indices for node labels.\nUse no node labels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Dot</code> formatting wrapper with default configuration.\nCreate a <code>Dot</code> formatting wrapper with custom configuration.\nThe default integer type for graph indices. <code>u32</code> is the …\nA <code>Graph</code> with directed edges.\nThe graph’s edge type.\nEdge identifier.\nIterator over the edge indices of a graph.\nReference to a <code>Graph</code> edge.\nIterator over all edges of a graph.\nIterator yielding mutable access to all edge weights.\nIterator over the edges of from or to a node\nIterator over the multiple directed edges connecting a …\nAn iterator over either the nodes without edges to them or …\n<code>Frozen</code> is a graph wrapper.\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\nA <code>GraphIndex</code> is a node or edge index.\nTrait for the unsigned integer type used for node and edge …\nIterator over the neighbors of a node.\nThe graph’s node type.\nNode identifier.\nIterator over the node indices of a graph.\nIterator over all nodes of a graph.\nIterator yielding mutable access to all node weights.\nA <code>Graph</code> with undirected edges.\nA “walker” object that can be used to step through the …\nReturn a “walker” object that can be used to step …\nShort version of <code>EdgeIndex::new</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex the <code>Graph</code> by two indices, any combination of node or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Frozen</code> from a mutable reference to a graph.\nStep to the next edge and its endpoint node in the walk …\nAccessor for data structure internals: the first edge in …\nAccessor for data structure internals: the next edge for …\nShort version of <code>NodeIndex::new</code>\nReturn the source node index.\nReturn the target node index.\nAccess the edge’s weight.\nAssociated node data.\nAssociated edge data.\nA <code>GraphMap</code> with directed edges.\n<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure using an …\nA trait group for <code>GraphMap</code>’s node identifier.\nA reference that is hashed and compared by its pointer …\nA <code>GraphMap</code> with undirected edges.\nPtr is ordered by pointer value, i.e. an arbitrary but …\nPtr compares by pointer equality, i.e if they point to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>MatrixGraph</code> with directed edges.\nIterator over all edges of a graph.\nIterator over the edges of from or to a node\nTrait for the unsigned integer type used for node and edge …\n<code>MatrixGraph&lt;N, E, Ty, Null&gt;</code> is a graph datastructure using …\nIterator over the neighbors of a node.\nIterator over the node identifiers of a graph.\nNode identifier.\nIterator over all nodes of a graph.\n<code>NotZero</code> is used to optimize the memory usage of edge …\nWrapper trait for an <code>Option</code>, allowing user-defined structs …\nA <code>MatrixGraph</code> with undirected edges.\nBase trait for types that can be wrapped in a <code>NotZero</code>.\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd a node (also called vertex) with associated data <code>weight</code>…\nRemove all nodes and edges.\nReturn the number of edges in the graph.\nAccess the weight for edge <code>e</code>.\nAccess the weight for edge <code>e</code>, mutably.\nReturn an iterator of all edges of <code>a</code>.\nReturn an iterator of all edges of <code>a</code>, in the specified …\nExtend the graph from an iterable of edges.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>MatrixGraph</code> from an iterable of edges.\nReturn true if there is an edge between <code>a</code> and <code>b</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether the graph has directed edges or not.\nReturn true if <code>self</code> is equal to the sentinel value.\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <code>MatrixGraph</code> with directed edges.\nCreate a new <code>MatrixGraph</code> with undirected edges.\nReturn the number of nodes (vertices) in the graph.\nShort version of <code>NodeIndex::new</code> (with Ix = <code>DefaultIx</code>)\nAccess the weight for node <code>a</code>.\nAccess the weight for node <code>a</code>, mutably.\nRemove the edge from <code>a</code> to <code>b</code> to the graph.\nRemove <code>a</code> from the graph.\nUpdate the edge from <code>a</code> to <code>b</code> to the graph, with its …\nCreate a new <code>MatrixGraph</code> with estimated capacity for nodes.\nReturn the singleton object which can be used as a …\n[Generic] complement of the graph\nA breadth first search (BFS) of a graph.\nVisit nodes of a graph in a depth-first-search (DFS) …\nVisit nodes in a depth-first-search (DFS) emitting nodes …\nA <code>Graph</code> with directed edges.\nA <code>GraphMap</code> with directed edges.\nMarker type for a directed graph.\nEdge direction.\nEdge identifier.\nAn edge reference.\n<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …\n<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure using an …\nAn <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.\nNode identifier.\nAn <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.\nA <code>StableGraph</code> with directed edges.\n<code>StableGraph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using …\nA <code>StableGraph</code> with undirected edges.\nA <code>Graph</code> with undirected edges.\nA <code>GraphMap</code> with undirected edges.\nMarker type for an undirected graph.\nAdd an edge connecting <code>a</code> and <code>b</code> to the graph, with …\nAdd node <code>n</code> to the graph.\nReturn an iterator over all edges of the graph with their …\nReturn an iterator over all edges of the graph in …\nReturn the current node and edge capacity of the graph.\nRemove all nodes and edges\nReturn <code>true</code> if the edge connecting <code>a</code> with <code>b</code> is contained …\nReturn <code>true</code> if the node is contained in the graph.\nThe map of discovered nodes\nThe map of discovered nodes\nThe map of discovered nodes\nReturn the number of edges in the graph.\nReturn a reference to the edge weight connecting <code>a</code> with <code>b</code>, …\nReturn a mutable reference to the edge weight connecting <code>a</code> …\nReturn an iterator of target nodes with an edge starting …\nReturn an iterator of target nodes with an edge starting …\nCreate a new <strong>Dfs</strong> using the graph’s visitor map, and no …\nCreate a new <code>DfsPostOrder</code> using the graph’s visitor map, …\nThe map of finished nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>GraphMap</code> from an iterable of edges.\nCreates a <code>GraphMap</code> that corresponds to the given <code>Graph</code>.\nCreate a <code>Dfs</code> from a vector and a visit map\nThe edge’s identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>Graph</code> that corresponds to this <code>GraphMap</code>.\nWhether the graph has directed edges.\nKeep the discovered map, but clear the visit stack and …\nKeep the discovered and finished map, but clear the visit …\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <strong>Dfs</strong>, using the graph’s visitor map, and put …\nCreate a new <code>DfsPostOrder</code> using the graph’s visitor map, …\nCreate a new <strong>Bfs</strong>, using the graph’s visitor map, and put …\nCreate a new <code>GraphMap</code>\nReturn the next node in the dfs, or <strong>None</strong> if the traversal …\nReturn the next node in the traversal, or <code>None</code> if the …\nReturn the next node in the bfs, or <strong>None</strong> if the traversal …\nReturn the number of nodes in the graph.\nReturn an iterator over the nodes of the graph.\nRemove edge from <code>a</code> to <code>b</code> from the graph and return the edge …\nReturn <code>true</code> if node <code>n</code> was removed.\nClear the visit state\nClear the visit state\nThe source node of the edge.\nThe stack of nodes to visit\nThe stack of nodes to visit\nThe queue of nodes to visit\nThe target node of the edge.\nA reference to the weight of the edge.\nCreate a new <code>GraphMap</code> with estimated capacity.\nCreate a new <code>GraphMap</code> with estimated capacity, and …\nThe default integer type for graph indices. <code>u32</code> is the …\nEdge identifier.\nIterator over the edge indices of a graph.\nReference to a <code>StableGraph</code> edge.\nIterator over all edges of a graph.\nIterator over the edges of from or to a node\nIterator over the multiple directed edges connecting a …\nAn iterator over either the nodes without edges to them or …\nA <code>GraphIndex</code> is a node or edge index.\nTrait for the unsigned integer type used for node and edge …\nIterator over the neighbors of a node.\nNode identifier.\nIterator over the node indices of a graph.\nIterator over all nodes of a graph.\nA <code>StableGraph</code> with directed edges.\n<code>StableGraph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using …\nA <code>StableGraph</code> with undirected edges.\nA “walker” object that can be used to step through the …\nAdd an edge from <code>a</code> to <code>b</code> to the graph, with its associated …\nAdd a node (also called vertex) with associated data <code>weight</code>…\nReturn the current node and edge capacity of the graph.\nRemove all nodes and edges\nRemove all edges\nLookup if there is an edge from <code>a</code> to <code>b</code>.\nReturn a “walker” object that can be used to step …\nReturn the number of edges in the graph.\nAccess the source and target nodes for <code>e</code>.\nShort version of <code>EdgeIndex::new</code>\nReturn an iterator over the edge indices of the graph\nCreate an iterator over all edges in the graph, in indexed …\nAccess the weight for edge <code>e</code>.\nAccess the weight for edge <code>e</code>, mutably\nReturn an iterator yielding immutable access to all edge …\nReturn an iterator yielding mutable access to all edge …\nReturn an iterator of all edges of <code>a</code>.\nReturn an iterator over all the edges connecting <code>a</code> and <code>b</code>.\nReturn an iterator of all edges of <code>a</code>, in the specified …\nAn invalid <code>EdgeIndex</code> used to denote absence of an edge, …\nExtend the graph from an iterable of edges.\nReturn an iterator over either the nodes without edges to …\nCreate a new <code>StableGraph</code> by mapping nodes and edges. A …\nLookup an edge from <code>a</code> to <code>b</code>.\nLookup an edge between <code>a</code> and <code>b</code>, in either direction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>StableGraph</code> from an iterable of edges.\nIndex the <code>StableGraph</code> by two indices, any combination of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the graph has directed edges or not.\nCreate a new <code>StableGraph</code> by mapping node and edge weights …\nReturn an iterator of all nodes with an edge starting from …\nReturn an iterator of all neighbors that have an edge …\nReturn an iterator of all neighbors that have an edge …\nCreate a new <code>StableGraph</code> with directed edges.\nStep to the next edge and its endpoint node in the walk …\nReturn an upper bound of the node indices in the graph\nReturn the number of nodes (vertices) in the graph.\nShort version of <code>NodeIndex::new</code>\nReturn an iterator over the node indices of the graph\nAccess the weight for node <code>a</code>.\nAccess the weight for node <code>a</code>, mutably.\nReturn an iterator yielding immutable access to all node …\nReturn an iterator yielding mutable access to all node …\nRemove an edge and return its edge weight, or <code>None</code> if it …\nRemove <code>a</code> from the graph if it exists, and return its …\nKeep all edges that return <code>true</code> from the <code>visit</code> closure, …\nKeep all nodes that return <code>true</code> from the <code>visit</code> closure, …\nReverse the direction of all edges\nAdd or update an edge from <code>a</code> to <code>b</code>. If the edge already …\nAccess the edge’s weight.\nCreate a new <code>StableGraph</code> with estimated capacity.\n<code>UnionFind&lt;K&gt;</code> is a disjoint-set data structure. It tracks …\nReturns <code>true</code> if the given elements belong to the same set, …\nReturn the representative for <code>x</code>.\nReturn the representative for <code>x</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a vector mapping each element to its representative.\nCreate a new <code>UnionFind</code> of <code>n</code> disjoint sets.\nUnify the two sets containing <code>x</code> and <code>y</code>.\nThe associated adjacency matrix type\nAn edge to an already visited node.\nA breadth first search (BFS) of a graph.\nStop the DFS traversal and return the provided value.\nContinue the DFS traversal as normal.\nControl flow for <code>depth_first_search</code> callbacks.\nControl flow for callbacks.\nA cross or forward edge.\nDefine associated data for nodes and edges\nVisit nodes of a graph in a depth-first-search (DFS) …\nA depth first search (DFS) visitor event.\nVisit nodes in a depth-first-search (DFS) emitting nodes …\nA graph with a known edge count.\nAn edge-filtering graph adaptor.\nA filtered edges iterator.\nA filtered neighbors iterator.\nA filtered neighbors-directed iterator.\nedge identifier\nThe graph’s <code>NodeId</code>s map to indices\nAn edge reference.\nThe kind of edges in the graph.\nA graph filter for edges\nA graph filter for nodes.\nAll edges from a node have been reported.\nCreate or access the adjacency matrix of a graph.\nBase graph trait: defines the associated node identifier …\nEdge kind property (directed or undirected edges)\nA copyable reference to a graph.\nAccess to the sequence of the graph’s edges\nAccess to the edges of each node.\nAccess to all edges of each node, in the specified …\nAccess to the neighbors of each node\nAccess to the neighbors of each node, through incoming or …\nAccess to the sequence of the graph’s <code>NodeId</code>s.\nAccess to the sequence of the graph’s nodes\nThe associated map type\nThe graph’s <code>NodeId</code>s map to indices, in a range without …\nA graph with a known node count.\nA node-filtering graph adaptor.\nA filtered edges iterator.\nA filtered edges iterator.\nA filtered neighbors iterator.\nA filtered node references iterator.\nnode identifier\nThe graph’s <code>NodeId</code>s map to indices\nA node reference.\nPrune the current node from the DFS traversal. No more …\nAn edge-reversing graph adaptor.\nA reversed edge reference\nA reversed edge references iterator.\nA reversed edges iterator.\nStrictly monotonically increasing event time for a depth …\nA topological order traversal for a graph.\nAn edge of the tree formed by the traversal.\nA mapping for storing the visited status for NodeId <code>N</code>.\nA graph that can create a map that tracks the visited …\nA walker is a traversal state, but where part of the …\nA walker and its context wrapped into an iterator.\nCreate the adjacency matrix\nReturn the original, unreversed edge reference.\nGet the value in <code>Control::Break(_)</code>, if present.\nA recursive depth first search.\nThe map of discovered nodes\nThe map of discovered nodes\nThe map of discovered nodes\nReturn an upper bound of the edge indices in the graph …\nReturn the number of edges in the graph.\nThe map of finished nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>NodeFiltered</code> adaptor from the closure <code>filter</code>.\nCreate an <code>EdgeFiltered</code> adaptor from the closure <code>filter</code>.\nConvert <code>i</code> to a node index. <code>i</code> must be a valid value in the …\nConvert <code>i</code> to an edge index. <code>i</code> must be a valid value in the …\nThe edge’s identifier.\nReturn true to have the edge be part of the graph\nReturn true to have the node be part of the graph\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and return the original, unreversed edge …\nReturn true if there is an edge from <code>a</code> to <code>b</code>, false …\nReturn whether <code>a</code> has been visited before.\nCreate an iterator out of the walker and given <code>context</code>.\nReturn an iterator of the neighbors of node <code>a</code>.\nCreate a new <code>Topo</code>, using the graph’s visitor map, and …\nReturn the next node in the current topological order …\nReturn an upper bound of the node indices in the graph …\nClear visited state, and put all initial nodes in the to …\nReset the visitor map (and resize to new size of graph if …\nThe source node of the edge.\nThe stack of nodes to visit\nThe stack of nodes to visit\nThe queue of nodes to visit\nThe target node of the edge.\nConvert <code>a</code> to an integer index.\nConvert <code>a</code> to an integer index.\nMark <code>a</code> as visited.\nCreate a new visitor map\nAdvance to the next item\nA reference to the weight of the edge.\nCreate a new <code>Topo</code> with initial nodes.\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nOverflow <code>usize::MAX</code> or other error during size computation\nError type for APIs with fallible heap allocation\nAn iterator that removes the items from a <code>SmallVec</code> and …\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nThe type of the array’s elements.\nA <code>Vec</code>-like container that can store a small number of …\nConvenience trait for constructing a <code>SmallVec</code>\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer.\nExtracts a mutable slice of the entire vector.\nReturns the remaining items of this iterator as a mutable …\nReturns a raw pointer to the vector’s buffer.\nExtracts a slice containing the entire vector.\nReturns the remaining items of this iterator as a slice.\nThe number of items the vector can hold without …\nRemove all elements from the vector.\nRemoves consecutive duplicate elements.\nRemoves consecutive duplicate elements using the given …\nRemoves consecutive elements that map to the same key.\nCreates a draining iterator that removes the specified …\nCopy elements from a slice and append them to the vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nConstructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …\nThe array passed as an argument is moved to be an inline …\nConstructs a new <code>SmallVec</code> on the stack from an array …\nCreates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.\nCreates a <code>SmallVec</code> directly from the raw components of …\nCopy the elements from a slice into a new <code>SmallVec</code>.\nConstruct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.\nRe-allocate to set the capacity to …\nThe maximum number of elements this vector can hold inline\nInsert an element at position <code>index</code>, shifting all elements …\nCopy elements from a slice into the vector at position …\nInsert multiple elements at position <code>index</code>, shifting all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …\nConvert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …\nConvert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …\nReturns <code>true</code> if the vector is empty\nThe number of elements stored in the vector\nConstruct an empty vector\nConstruct an empty vector.\nRemove an item from the end of the vector and return it, …\nAppend an item to the vector.\nRemove and return the element at position <code>index</code>, shifting …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nResizes the vector so that its length is equal to <code>len</code>.\nResizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nSets the length of a vector.\nShrink the capacity of the vector as much as possible.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nReturns <code>true</code> if the data has spilled into a separate …\nRemove the element at position <code>index</code>, replacing it with …\nConstruct a new <code>SmallVec</code> from a slice.\nShorten the vector, keeping the first <code>len</code> elements and …\nRe-allocate to set the capacity to …\nReserve capacity for <code>additional</code> more elements to be …\nReserve the minimum capacity for <code>additional</code> more elements …\nConstruct an empty vector with enough capacity …\nThe layout that was passed to the allocator\nMemory allocation APIs\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCollection types.\nUtilities related to FFI bindings.\nUtilities for formatting and printing <code>String</code>s.\nCreates a <code>String</code> using interpolation of runtime …\nSingle-threaded reference-counting pointers. ‘Rc’ …\nUtilities for the slice primitive type.\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nThread-safe reference-counting pointers.\nTypes and Traits for working with asynchronous tasks.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nThe minimum byte alignment for a memory block of this …\nCreates a layout describing the record that can hold a …\nAllocate memory with the global allocator.\nAllocate memory as described by the given <code>layout</code>.\nAllocate zero-initialized memory with the global allocator.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a layout describing the record for a <code>[T; n]</code>.\nCreates a “by reference” adapter for this instance of …\nCreates a <code>NonNull</code> that is dangling, but well-aligned for …\nDeallocate memory with the global allocator.\nDeallocate the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nCreates a layout describing the record for <code>self</code> followed by\nCreates a layout describing the record for <code>self</code> followed by\nProduces layout describing a record that could be used to …\nProduces layout describing a record that could be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …\nCreates a layout, bypassing all checks.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignal a memory allocation error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.\nCreates a layout by rounding the size of this layout up to …\nReturns the amount of padding we must insert after <code>self</code> to …\nReallocate memory with the global allocator.\nShrink or grow a block of memory to the given <code>new_size</code> in …\nCreates a layout describing the record for <code>n</code> instances of …\nCreates a layout describing the record for <code>n</code> instances of …\nAttempts to shrink the memory block.\nThe minimum size in bytes for a memory block of this …\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nReturns the argument unchanged.\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nMoves the string into a <code>Cow::Owned</code>.\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nCreates a clone-on-write pointer from an owned instance of …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nCreates a clone-on-write pointer from a reference to …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nReturns a reference to the underlying allocator.\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nAttempt to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nReturns the argument unchanged.\nConvert a vector into a boxed slice.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nReturns the argument unchanged.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nCreates a boxed <code>Path</code> from a reference.\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.")