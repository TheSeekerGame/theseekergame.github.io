searchState.loadedDescShard("bevy_internal", 0, "This module is separated into its own crate to enable …\nThis plugin group will add all the default plugins for a …\nThis plugin group will add the minimal plugins for a <em>Bevy</em> …\nIntegrate with platform accessibility APIs.\nProvides types and plugins for animations.\nBuild bevy apps, create plugins, and read events.\nLoad and store assets and resources for Apps.\nProvides types and plugins for audio playback.\nContains core plugins.\nCore render pipeline.\nUseful diagnostic plugins and types for bevy apps.\nBevy’s entity-component-system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBevy interface with <code>GilRs</code> - “Game Input Library for Rust…\nImmediate mode drawing api for visual debugging.\nSupport for GLTF file loading.\nEntity hierarchies and property inheritance\nResources and events for inputs, e.g. mouse/keyboard, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogging capabilities\nMath types (Vec3, Mat4, Quat, etc) and helpers.\nPhysically based rendering.\n<code>use bevy::prelude::*;</code> to import common components, …\nUtilities for working with untyped pointers in a more safe …\nType reflection used for dynamically interacting with rust …\nCameras, meshes, textures, shaders, and pipelines. Use …\nSave/load collections of entities and components to/from …\nItems for sprites, rects, texture atlases, etc.\nPools for async, IO, and compute tasks.\nText drawing, styling, and font assets.\nContains time utilities.\nLocal and global transforms (e.g. translation, scale, …\nUser interface components and widgets.\nVarious miscellaneous utilities for easing development\nConfiguration, creation, and management of one or more …\nWindow creation, configuration, and handling\nComponent to wrap a <code>accesskit::Node</code>, representing this …\nPlugin managing non-GUI aspects of integrating with …\nResource that tracks whether an assistive technology has …\nSet enum for the systems relating to accessibility\nWrapper struct for <code>accesskit::ActionRequest</code>. Required to …\nResource representing which entity has keyboard focus, if …\nResource whose value determines whether the accessibility …\nUpdate the accessibility tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if an access technology is active and …\nReturns <code>true</code> if the ECS should update the accessibility …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets whether accessibility updates were requested by an …\nSets whether the ECS should update the accessibility tree.\nAn action to be taken on an accessibility node.\nHandles requests from assistive technologies or other …\nA 2D affine transform. Derived from kurbo.\nA click will be performed on one of the node’s ancestors.\nDefines a custom action for a UI element.\nRequires <code>ActionRequest::data</code> to be set to …\nDecrement a numeric value by one step.\nDo the default action for an object, typically this means …\nDescribes the action that will be performed on a given …\nA transform that is flipped on the x-axis.\nA transform that is flipped on the y-axis. Useful for …\nA generic container that should be ignored by assistive …\nE.g. most toolbars and separators.\nThe identity transform.\nIncrement a numeric value by one step.\nIndicates if a form control has invalid input or if a web …\nBehaves similar to an ARIA grid but is primarily used by …\nContains the bullet, number, or other marker for a list …\nA single accessible object. A complete UI is represented …\nBuilds a <code>Node</code>.\nAllows nodes that have the same role, actions, and set of …\nThe stable identity of a <code>Node</code>, unique within the node’s …\nThe point at the origin; (0, 0).\nLanguage specific ordering (alpha, roman, cjk-ideographic, …\nA 2D point. Derived from kurbo.\nA rectangle. Derived from kurbo.\nDelete any selected text in the control’s text value and …\nThe type of an accessibility node.\nScroll any scrollable containers to make the target object …\nOptional target rectangle for <code>Action::ScrollIntoView</code>, in …\nScroll the given object to a specified point in the tree’…\nTarget for <code>Action::ScrollToPoint</code>, in platform-native …\nRequires <code>ActionRequest::data</code> to be set to …\nTarget for <code>Action::SetScrollOffset</code>, in the coordinate space\nDon’t focus this node, but set it as the sequential …\nRequires <code>ActionRequest::data</code> to be set to …\nReplace the value of the control with the specified value …\nA 2D size. Derived from kurbo.\nThis is just like a multi-line document, but signals that …\nThe data associated with an accessibility tree that’s …\nA serializable representation of an atomic change to a <code>Tree</code>…\nA 2D vector. Derived from kurbo.\nE.g. menu or combo box.\nThe point (0, 0).\nThe empty rectangle at the origin.\nA size with zero width or height.\nThe vector (0, 0).\nTake absolute value of width and height.\nA single character, usually part of this node’s name, …\nA single character, usually part of this node’s name, …\nThe position where the selection started, and which does …\nThe name of the application this tree belongs to.\nThe area of the rectangle.\nGet the coefficients of the transform.\nBackground color in RGBA.\nBackground color in RGBA.\nThe bounding box of this node, in the node’s coordinate …\nThe bounding box of this node, in the node’s coordinate …\nThe index of an item in <code>Node::character_lengths</code>, or the …\nFor inline text. The length (non-inclusive) of each …\nFor inline text. The length (non-inclusive) of each …\nFor inline text. This is the position of each character …\nFor inline text. This is the position of each character …\nFor inline text. This is the advance width of each …\nFor inline text. This is the advance width of each …\nIndicates that this node clips its children, i.e. may have …\nIndicates that this node clips its children, i.e. may have …\nFor <code>Role::ColorWell</code>, specifies the selected color in RGBA.\nFor <code>Role::ColorWell</code>, specifies the selected color in RGBA.\nReturns <code>true</code> if <code>point</code> lies within <code>self</code>.\nCompute the determinant of this transform.\nNote: division by a scalar is implemented by multiplying …\nPerform the requested action. If the requested action is …\nThe active end of the selection, which changes as the …\nThe node within this tree that has keyboard focus when the …\nOnly present when different from parent.\nOnly present when different from parent.\nFont size is in pixels.\nFont size is in pixels.\nFont weight can take on any arbitrary numeric value. …\nFont weight can take on any arbitrary numeric value. …\nForeground color in RGBA.\nForeground color in RGBA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA new rectangle from origin and size.\nA new rectangle from two points.\nThe height of the rectangle.\nThe height.\nInner HTML of an element. Only used for a top-level math …\nInner HTML of an element. Only used for a top-level math …\nThe intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the inverse transform.\nUse for a control or group of controls that disallows …\nUse for a control or group of controls that disallows …\nWhether this rectangle has zero area.\nWhether this node is expanded, collapsed, or neither.\nWhether this node is expanded, collapsed, or neither.\nIs this map finite?\nExclude this node and its descendants from the tree …\nExclude this node and its descendants from the tree …\nIndicates whether this node causes a hard line-break (e.g. …\nIndicates whether this node causes a hard line-break (e.g. …\nIf a dialog box is marked as explicitly modal.\nIf a dialog box is marked as explicitly modal.\nIs this map NaN?\nIndicates whether this node causes a page break.\nIndicates whether this node causes a page break.\nUse for a textbox that allows focus/selection but not …\nUse for a textbox that allows focus/selection but not …\nIndicates whether this node is selected or unselected.\nIndicates whether this node is selected or unselected.\nThis element allows touches to be passed through when a …\nThis element allows touches to be passed through when a …\nA keystroke or sequence of keystrokes, complete with any …\nA keystroke or sequence of keystrokes, complete with any …\nOnly present when different from parent.\nOnly present when different from parent.\nThe list style type. Only available on list items.\nThe list style type. Only available on list items.\nAccesses a shared class set guarded by a mutex.\nCreates an affine transformation that takes the unit …\nReturns the maximum value for the x-coordinate of the …\nReturns the maximum value for the y-coordinate of the …\nReturns the minimum value for the x-coordinate of the …\nReturns the minimum value for the y-coordinate of the …\nConstruct an affine transform from coefficients.\nCreate a new <code>Point</code> with the provided <code>x</code> and <code>y</code> coordinates.\nA new rectangle from minimum and maximum coordinates.\nCreate a new <code>Size</code> with the provided <code>width</code> and <code>height</code>.\nCreate a new vector.\nThe node’s role must be <code>Role::InlineTextBox</code>.\nZero or more new or updated nodes. Order doesn’t matter.\nThe origin of the rectangle.\nIf a text input has placeholder text, it should be exposed …\nIf a text input has placeholder text, it should be exposed …\nOn radio buttons this should be set to a list of all of …\nOn radio buttons this should be set to a list of all of …\nAn optional string that may override an assistive …\nAn optional string that may override an assistive …\nThe identifier of the tree’s root node.\nAn affine transform representing rotation.\nAn affine transform representing uniform scaling.\nAn affine transform representing non-uniform scaling with …\nThe size of the rectangle.\nAn optional string that may override an assistive …\nAn optional string that may override an assistive …\nConvert this vector into a <code>Point</code>.\nConvert this vector into a <code>Size</code>.\nConvert this point into a <code>Vec2</code>.\nConvert this size into a <code>Vec2</code>, with <code>width</code> mapped to <code>x</code> and …\nThe name of the UI toolkit in use.\nThe version of the UI toolkit.\nIf a node’s only accessible name comes from a tooltip, …\nIf a node’s only accessible name comes from a tooltip, …\nAn affine transform to apply to any coordinates within …\nAn affine transform to apply to any coordinates within …\nCompute the bounding box of a transformed rectangle.\nAn affine transform representing translation.\nRarely updated information about the tree as a whole. This …\nThe smallest rectangle enclosing two rectangles.\nCompute the union with one point.\nThe width of the rectangle.\nThe width.\nCreate a new <code>Rect</code> with the same size as <code>self</code> and a new …\nCreate a new <code>Rect</code> with the same origin as <code>self</code> and a new …\nFor inline text. The length of each word in characters, as …\nFor inline text. The length of each word in characters, as …\nThe x coordinate.\nThe x-coordinate.\nThe minimum x coordinate (left edge).\nThe maximum x coordinate (right edge).\nThe y coordinate.\nThe y-coordinate.\nThe minimum y coordinate (top edge in y-down spaces).\nThe maximum y coordinate (bottom edge in y-down spaces).\nA list of <code>VariableCurve</code>, and the <code>EntityPath</code> to which they …\nAnimation controls\nAdds animation support to an app\nThe animation will finish after running “n” times.\nCubic spline interpolation. The value of the two closest …\nPath to an entity, with <code>Name</code>s. Each entity in a path must …\nThe animation will never finish.\nInterpolation method to use between keyframes.\nList of keyframes for one of the attribute of a <code>Transform</code>.\nLinear interpolation between the two closest keyframes.\nThe animation will finish after running once.\nRepetition behavior of an animation.\nKeyframes for rotation.\nKeyframes for scale.\nStep interpolation, the value of the start keyframe is …\nKeyframes for translation.\nDescribes how an attribute of a <code>Transform</code> or <code>MorphWeights</code> …\nKeyframes for morph target weights.\nAdd a <code>VariableCurve</code> to an <code>EntityPath</code>.\nHandle to the animation clip being played.\nSystem that will play all animations, using any entity …\nWhether this animation clip can run on entity with given …\nNumber of times the animation has completed.\n<code>VariableCurve</code>s for each bone. Indexed by the bone ID.\nDuration of the clip, represented in seconds\nTime elapsed playing the animation\nFind the index of the keyframe at or before the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the curves for a bone.\nGets the curves by it’s <code>EntityPath</code>.\nInterpolation method to use between keyframes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the number of keyframes is zero.\nCheck if the playing animation has finished, according to …\nIs the animation paused\nCheck if the animation is playing in reverse.\nCheck if the given animation clip is being played.\nTimestamp for each of the keyframes.\nList of the keyframes.\nReturns the number of keyframes.\nParts of the path\nPause the animation\nStart playing an animation, resetting state of the player, …\nStart playing an animation, resetting state of the player, …\nSets repeat to <code>RepeatAnimation::Forever</code>.\nRepetition behavior of the animation.\nReset the animation to its initial state, as if no time …\nUnpause the animation\nSeek time inside of the animation. Always within the range …\nSeek to a specific time in the animation.\nSet the repetition behaviour of the animation.\nSet the speed of the animation playback\nSpeed of the animation playback\nStart playing an animation, resetting state of the player. …\nStart playing an animation, resetting state of the player. …\nAn animatable value type.\nA list of <code>VariableCurve</code>, and the <code>EntityPath</code> to which they …\nAnimation controls\nAdds animation support to an app\nAn individual input for <code>Animatable::blend</code>.\nCubic spline interpolation. The value of the two closest …\nPath to an entity, with <code>Name</code>s. Each entity in a path must …\nInterpolation method to use between keyframes.\nList of keyframes for one of the attribute of a <code>Transform</code>.\nLinear interpolation between the two closest keyframes.\nKeyframes for rotation.\nKeyframes for scale.\nStep interpolation, the value of the start keyframe is …\nKeyframes for translation.\nDescribes how an attribute of a <code>Transform</code> or <code>MorphWeights</code> …\nKeyframes for morph target weights.\nWhether or not to additively blend this input into the …\nBlends one or more values together.\nReturns the argument unchanged.\nInterpolates between <code>a</code> and <code>b</code> with  a interpolation factor …\nInterpolation method to use between keyframes.\nCalls <code>U::from(self)</code>.\nTimestamp for each of the keyframes.\nList of the keyframes.\nParts of the path\nPost-processes the value using resources in the <code>World</code>. …\nThe input value to be blended.\nThe individual item’s weight. This may not be bound to …\nPlugins are being added.\nA container of app logic and data.\nAn event that indicates the <code>App</code> should exit. This will …\nA strongly-typed class of labels used to identify an <code>App</code>.\nGenerates an impl of the <code>AppLabel</code> trait.\nCleanup has been executed for all plugins added.\nA type representing an unsafe function that returns a …\nAn object safe version of <code>Eq</code>. This trait is automatically …\nGenerates a dynamic plugin entry point function for the …\nFinish has been executed for all plugins added.\nRuns first in the schedule.\nRuns first in the <code>FixedMain</code> schedule.\nThe schedule that runs last in <code>FixedMain</code>\nThe schedule that contains systems which only run after a …\nDefines the schedules to be run for the <code>FixedMain</code> …\nThe schedule that runs after the <code>FixedUpdate</code> schedule, for …\nThe schedule that contains logic that must run before …\nThe schedule that contains most gameplay logic.\nA shorthand for <code>Interned&lt;dyn AppLabel&gt;</code>.\nRuns last in the schedule.\nIndicates that the <code>App</code>’s schedule should run repeatedly.\nThe schedule that contains the app logic that is evaluated …\nDefines the schedules to be run for the <code>Main</code> schedule, …\nInitializes the <code>Main</code> schedule, sub schedules, and …\nIndicates that the <code>App</code>’s schedule should run only once.\nA collection of Bevy app logic and configuration.\nCombines multiple <code>Plugin</code>s into a single unit.\nFacilitates the creation and configuration of a <code>PluginGroup</code>…\nTypes that represent a set of <code>Plugin</code>s.\nPlugins state in the application\nThe schedule that runs once after <code>Startup</code>.\nThe schedule that contains logic that must run after <code>Update</code>…\nThe schedule that runs before <code>Startup</code>.\nThe schedule that contains logic that must run before …\nAll plugins already added are ready.\nRuns the <code>FixedMain</code> schedule in a loop according until all …\nDetermines the method used to run an <code>App</code>’s <code>Schedule</code>.\nConfigures an <code>App</code> to run its <code>Schedule</code> according to a given …\nThe schedule that contains scene spawning.\nThe schedule that runs once when the app starts.\nRuns state transitions.\nA <code>SubApp</code> contains its own <code>Schedule</code> and <code>World</code> separate from …\nThe schedule that contains app logic. Ideally containing …\nAdds the plugin <code>Plugin</code> at the end of this …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> after the plugin …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> before the plugin …\nSetup the application to manage events of type <code>T</code>.\nAdds one or more <code>Plugin</code>s.\nAdds a new <code>schedule</code> to the <code>App</code>.\nAdds a system to the given schedule in this app’s …\nWhen doing ambiguity checking this ignores systems that …\nWhen doing ambiguity checking this ignores systems that …\nThe <code>SubApp</code>’s instance of <code>App</code>\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nConfigures the <code>App</code> to which this plugin is added.\nConfigures the <code>Plugin</code>s that are to be added.\nRun <code>Plugin::cleanup</code> for each plugin. This is usually …\nRuns after all plugins are built and finished, but before …\nApplies the provided <code>ScheduleBuildSettings</code> to all …\nConfigures a collection of system sets in the provided …\nDisables a <code>Plugin</code>, preventing it from being added to the …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nClones this <code>AppLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nApplies the function to the <code>Schedule</code> associated with <code>label</code>.\nCreates a new empty <code>App</code> with minimal default configuration.\nEnables a <code>Plugin</code>.\nExtracts data from main world to this sub-app.\nRun <code>Plugin::finish</code> for each plugin. This is usually called …\nFinish adding this plugin to the <code>App</code>, once all plugins …\nConsumes the <code>PluginGroupBuilder</code> and builds the contained …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a vector of references to any plugins of type <code>T</code> …\nGets read-only access to the <code>Schedule</code> with the provided …\nGets read-write access to a <code>Schedule</code> with the provided …\nRetrieves a <code>SubApp</code> inside this <code>App</code> with the given label, …\nRetrieves a <code>SubApp</code> inside this <code>App</code> with the given label, …\nSuppress warnings and errors that would result from …\nInitialize a non-send <code>Resource</code> with standard starting …\nInitialize a <code>Resource</code> with standard starting values by …\nInitializes a new empty <code>schedule</code> to the <code>App</code> under the …\nInitializes a <code>State</code> with standard starting values.\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nAdds the given <code>schedule</code> after the <code>after</code> schedule\nInserts a non-send resource to the app.\nInserts a <code>Resource</code> to the current <code>App</code> and overwrites any …\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nInserts a specific <code>State</code> to the current <code>App</code> and overrides …\nInserts an existing sub app into the app\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nChecks if a <code>Plugin</code> has already been added.\nIf the plugin can be meaningfully instantiated several …\nThe labels to run for the main phase of the <code>Main</code> schedule …\nThe labels to run for the <code>FixedMain</code> schedule (in the order …\nThe schedule that systems are added to by default.\nConfigures a name for the <code>Plugin</code> which is primarily used …\nConfigures a name for the <code>PluginGroup</code> which is primarily …\nCreates a new <code>App</code> with some default structure to enable …\nCreates a new <code>SubApp</code>.\nCheck the state of all plugins already added to this app. …\nHas the plugin finished its setup? This can be useful for …\nRegister a new <code>Diagnostic</code> with an <code>App</code>.\nRegisters the type <code>T</code> in the <code>TypeRegistry</code> resource, adding …\nAdds the type data <code>D</code> to type <code>T</code> in the <code>TypeRegistry</code> …\nRemoves a sub app from the app. Returns <code>None</code> if the label …\nStarts the application by calling the app’s runner …\nRuns the <code>SubApp</code>’s default schedule.\nA system that runs the fixed timestep’s “main schedule…\nSee <code>RunMode::Loop</code>.\nA system that runs the “main schedule”\nDetermines whether the <code>Schedule</code> is run once or repeatedly.\nSee <code>RunMode::Once</code>.\nThe runner function is primarily responsible for managing …\nSets the value of the given <code>Plugin</code>, if it exists\nSets the value of the given <code>Plugin</code>, if it exists.\nSets the function that will be called when the app is run.\nStart a new builder for the <code>PluginGroup</code>.\nThe labels to run for the startup phase of the <code>Main</code> …\nRetrieves a <code>SubApp</code> stored inside this <code>App</code>.\nRetrieves a <code>SubApp</code> stored inside this <code>App</code>.\nAdvances the execution of the <code>Schedule</code> by one cycle.\nThe main ECS <code>World</code> of the <code>App</code>. This stores and provides …\nThe minimum <code>Duration</code> to wait after a <code>Schedule</code> has …\nA container of app logic and data.\nGenerates a dynamic plugin entry point function for the …\nRuns first in the schedule.\nRuns first in the <code>FixedMain</code> schedule.\nThe schedule that runs last in <code>FixedMain</code>\nThe schedule that runs after the <code>FixedUpdate</code> schedule, for …\nThe schedule that contains logic that must run before …\nThe schedule that contains most gameplay logic.\nRuns last in the schedule.\nThe schedule that contains the app logic that is evaluated …\nA collection of Bevy app logic and configuration.\nCombines multiple <code>Plugin</code>s into a single unit.\nThe schedule that runs once after <code>Startup</code>.\nThe schedule that contains logic that must run after <code>Update</code>…\nThe schedule that runs before <code>Startup</code>.\nThe schedule that contains logic that must run before …\nThe schedule that contains scene spawning.\nThe schedule that runs once when the app starts.\nRuns state transitions.\nThe schedule that contains app logic. Ideally containing …\nConfigures the <code>App</code> to which this plugin is added.\nConfigures the <code>Plugin</code>s that are to be added.\nRuns after all plugins are built and finished, but before …\nFinish adding this plugin to the <code>App</code>, once all plugins …\nIf the plugin can be meaningfully instantiated several …\nThe schedule that systems are added to by default.\nConfigures a name for the <code>Plugin</code> which is primarily used …\nConfigures a name for the <code>PluginGroup</code> which is primarily …\nHas the plugin finished its setup? This can be useful for …\nThe runner function is primarily responsible for managing …\nSets the value of the given <code>Plugin</code>, if it exists\nThe main ECS <code>World</code> of the <code>App</code>. This stores and provides …\nEmitted whenever an <code>Asset</code> is added.\nAlways check if assets have meta files. If the meta does …\nThe top level <code>Asset</code> loaded by this <code>AssetLoader</code>.\nAdds asset-related builder methods to <code>App</code>.\nA type erased container for an <code>Asset</code> value that is capable …\nEvents that occur for a specific loaded <code>Asset</code>, such as “…\nSchedule where events accumulated in <code>Assets</code> are applied to …\nProvides <code>Handle</code> and <code>UntypedHandle</code> <em>for a specific asset type</em>…\nA unique runtime-only identifier for an <code>Asset</code>. This is …\nA generational runtime-only identifier for a specific <code>Asset</code>…\nAn error that occurs during an <code>Asset</code> load.\nAn event emitted when a specific <code>Asset</code> fails to load.\nLoads an <code>Asset</code> from a given byte <code>Reader</code>. This can accept …\nConfigures how / if meta files will be checked. If an asset…\nRepresents a path to an asset in a “virtual filesystem”…\nProvides “asset” loading and processing functionality. …\nLoads and tracks the state of <code>Asset</code> values from a …\nThe “asset mode” the server is currently in.\nStores <code>Asset</code> values identified by their <code>AssetId</code>.\nA mutable iterator over <code>Assets</code>.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nAn owned and dynamically typed Future used when you can’…\nThe uuid for the default <code>AssetId</code>. It is valid to assign a …\nThe load state of an asset’s dependencies.\nAn error that occurs while deserializing <code>AssetMeta</code>.\nProvides type-erased access to an <code>AssetLoader</code>.\nA “type erased / boxed” counterpart to <code>LoadedAsset</code>. …\nThe type of error which could be encountered by this …\nThe asset failed to load.\nOne or more dependencies have failed to load\nOne or more dependencies have failed to load in this asset…\nA strong or weak handle to a specific <code>Asset</code>. If a <code>Handle</code> …\nThis asset id <em>should</em> never be valid. Assigning a value to …\nA small / efficient runtime identifier that can be used to …\nA small / efficient runtime identifier that can be used to …\nError that occurs when the <code>AssetPath::label</code> section of a …\nError that occurs when the <code>AssetPath::source</code> section of a …\nEncountered an I/O error while loading an asset.\nA context that provides access to assets in <code>AssetLoader</code>s, …\nAn error that occurs when attempting to call …\nThe load state of an asset.\nThe asset has been loaded and has been added to the <code>World</code>\nDependencies have all loaded\nDependencies in this asset’s dependency tree have all …\nThe successful result of an <code>AssetLoader::load</code> call. This …\nA “loaded folder” containing handles for all assets …\nA “loaded asset” containing the untyped handle for an …\nEmitted whenever an <code>Asset</code> has been fully loaded (including …\nThe asset is in the process of loading.\nDependencies are still loading\nDependencies in this asset’s dependency tree are still …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nError that occurs when a path string has an …\nError that occurs when a path string has an …\nEmitted whenever an <code>Asset</code> value is modified.\nNever check if assets have meta files and always use the …\nThe asset has not started loading yet\nThe asset has not started loading yet\nThe asset has not started loading yet\nAn error that occurs when parsing a string type to create …\nOnly look up meta files for the provided paths. The …\nThis server loads processed assets.\nAssets will be “pre-processed”. This enables assets to …\nAn error produced when calling …\nThe recursive load state of an asset’s dependencies.\nType data for the <code>TypeRegistry</code> used to operate on …\nReflect type data struct relating a <code>Handle&lt;T&gt;</code> back to the <code>T</code>…\nEmitted whenever an <code>Asset</code> is removed.\nThe settings type used by this <code>AssetLoader</code>.\nA “strong” reference to a live (or loading) <code>Asset</code>. If …\nThe internal “strong” <code>Asset</code> handle storage for …\nA system set that holds all “track asset” operations.\nCaused when trying to convert an <code>UntypedHandle</code> into an …\nCaused when trying to convert an <code>UntypedAssetId</code> into an …\nThis server loads unprocessed assets.\nLoads assets from their <code>AssetSource</code>’s default <code>AssetReader</code>…\nErrors preventing the conversion of to/from an …\nAn “untyped” / “generic-less” <code>Asset</code> identifier …\nErrors preventing the conversion of to/from an …\nAn untyped version of <code>AssetLoadFailedEvent</code>.\nAn untyped variant of <code>Handle</code>, which internally stores the …\nEmitted when the last <code>super::Handle::Strong</code> of an <code>Asset</code> is …\nSchedule where <code>Assets</code> resources are updated.\nA stable-across-runs / const asset identifier. This will …\nA stable-across-runs / const asset identifier. This will …\nA “weak” reference to an <code>Asset</code>. If a <code>Handle</code> is …\nAdds the given <code>asset</code> and allocates a new strong <code>Handle</code> for …\nEquivalent of <code>Assets::add</code>\nQueues a new asset to be tracked by the <code>AssetServer</code> and …\nThis will add the given <code>asset</code> as a “labeled <code>Asset</code>” …\nAdd a <code>LoadedAsset</code> that is a “labeled sub asset” of the …\nA system that applies accumulated asset change events to …\nGets the source asset path for this load context.\nReturns the <code>TypeId</code> of the top-level <code>Asset</code> loaded by the …\nRetrieves the <code>TypeId</code> of the stored <code>Asset</code> type.\nThe <code>TypeId</code> of the asset\nReturns the type name of the top-level <code>Asset</code> loaded by the …\nRetrieves the <code>type_name</code> of the stored <code>Asset</code> type.\nThe <code>TypeId</code> of the <code>Assets&lt;T&gt;</code> resource\nBegins a new labeled asset load. Use the returned …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nClones this into an “owned” value. If internally a …\nCreates a <code>Handle::Weak</code> clone of this <code>Handle</code>, which will …\nCreates an <code>UntypedHandle::Weak</code> clone of this <code>UntypedHandle</code>…\nCloses the writer.\nReturns <code>true</code> if the <code>id</code> exists in this collection. …\nReturns the default meta value for the <code>AssetLoader</code> (erased …\nDeserializes metadata from the input <code>meta</code> bytes into the …\nReturns a boxed object from a boxed trait object if the …\nA way to go from a <code>Handle&lt;T&gt;</code> in a <code>dyn Any</code> to a …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nCreates a new <code>embedded</code> asset by embedding the bytes of the …\nReturns the <code>Path</code> for a given <code>embedded</code> asset. This is used …\nWhy the asset failed to load.\nWhy the asset failed to load.\nReturns a list of extensions supported by this asset …\nReturns a list of extensions supported by this <code>AssetLoader</code>…\nThe default file path to use (relative to the project …\n“Finishes” this context by populating the final <code>Asset</code> …\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AssetPath</code> from a <code>Path</code>.\nRetrieves a reference to the internal <code>Asset</code> type, if it …\nRetrieves a reference to the <code>Asset</code> with the given <code>id</code>, if …\nEquivalent of <code>Assets::get</code>\nRetrieves the default <code>AssetLoader</code> for the given <code>Asset</code> …\nRetrieves the default <code>AssetLoader</code> for the given <code>Asset</code> …\nReturns the registered <code>AssetLoader</code> associated with the …\nReturns the registered <code>AssetLoader</code> associated with the …\nReturns the full extension (including multiple ‘.’ …\nReturns an active handle for the given path, if the asset …\nRetrieves an <code>AssetHandleProvider</code> capable of reserving new …\nReturns an active untyped handle for the given path, if …\nReturns all active untyped handles for the given path, if …\nReturns a handle to an asset of type <code>A</code> with the label <code>label</code>…\nReturns the <code>ErasedLoadedAsset</code> for the given label, if it …\nRetrieves the main <code>LoadState</code> of a given asset <code>id</code>.\nRetrieves all loads states for the given asset id.\nRetrieves a mutable reference to the <code>Asset</code> with the given …\nEquivalent of <code>Assets::get_mut</code>\nRetrieves an <code>Asset</code> stored for the given <code>id</code> if it exists. …\nReturns the path for the given <code>id</code>, if it has one.\nReturns an active untyped handle for the given path and …\nRetrieves the default <code>AssetLoader</code> for the given path, if …\nReturns an active untyped asset id for the given path, if …\nReturns all active untyped asset IDs for the given path, …\nRetrieves the <code>RecursiveDependencyLoadState</code> of a given …\nRetrieves the <code>AssetSource</code> for the given <code>source</code>.\nEquivalent of <code>Assets::get_mut</code>, but works with an …\nA system that manages internal <code>AssetServer</code> events, such as …\nThe <code>TypeId</code> of the <code>Handle&lt;T&gt;</code> for this asset\nReturns <code>true</code> if an asset with the label <code>label</code> exists in …\nReturns the <code>AssetId</code> of this <code>Asset</code>.\nReturns the <code>UntypedAssetId</code> for the referenced asset.\nReturns an iterator over the <code>AssetId</code> of every <code>Asset</code> stored …\nEquivalent of <code>Assets::ids</code>\nInitializes the given <code>Asset</code> in the <code>App</code> by:\nInitializes the given loader in the <code>App</code>’s <code>AssetServer</code>.\nInserts the given <code>asset</code>, identified by the given <code>id</code>. If an …\nEquivalent of <code>Assets::insert</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this into an “owned” value. If internally a …\nReturns an <code>AssetId</code> with <code>Self::INVALID_UUID</code>, which <em>should</em> …\nReturns true if the trait object wraps an object of type …\nReturns <code>true</code> if this event is <code>AssetEvent::Added</code> and …\nReturns <code>true</code> if there are no assets in this collection.\nEquivalent of <code>Assets::is_empty</code>\nReturns <code>true</code> if this event is …\nReturns true if the asset and all of its dependencies …\nReturns <code>true</code> if the given <code>id</code> corresponds to an asset that …\nReturns <code>true</code> if this event is <code>AssetEvent::Modified</code> and …\nReturns <code>true</code> if this event is <code>AssetEvent::Removed</code> and …\nReturns <code>true</code> if this is a strong handle.\nReturns <code>true</code> if this event is <code>AssetEvent::Unused</code> and …\nReturns <code>true</code> if this is a weak handle.\nReturns an iterator over the <code>AssetId</code> and <code>Asset</code> ref of …\nIterate over all labels for “labeled assets” in the …\nReturns an iterator over the <code>AssetId</code> and mutable <code>Asset</code> ref …\nGets the “sub-asset label”.\nGets the “sub-asset label”.\nCreates a new <code>LoadContext</code> for the given <code>label</code>. The <code>load</code> …\nReturns the number of assets currently stored in the …\nEquivalent of <code>Assets::len</code>\nAsynchronously loads <code>AssetLoader::Asset</code> (and any other …\nAsynchronously loads the asset(s) from the bytes provided …\nRetrieves a handle for the asset at the given path and …\nBegins loading an <code>Asset</code> of type <code>A</code> stored at <code>path</code>. This …\nLoads the asset at the given <code>path</code> directly. This is an …\nLoads the asset at the given <code>path</code> directly from the …\nLoads all assets from the specified folder recursively. …\nLoads an “internal” asset by embedding the string …\nLoads an “internal” binary asset by embedding the …\nRetrieves the main <code>LoadState</code> of a given asset <code>id</code>.\nRetrieves a handle for the asset at the given path and …\nLoad an asset without knowing its type. The method returns …\nAsynchronously load an asset that you do not know the type …\nLoads the <code>Asset</code> of type <code>A</code> at the given <code>path</code> with the given …\nBegins loading an <code>Asset</code> of type <code>A</code> stored at <code>path</code>. The …\nThe “meta transform” for the strong handle. This will …\nReturns the <code>AssetServerMode</code> this server is currently in.\nThe <code>AssetMode</code> to use for this server.\nCreate a new instance of <code>AssetServer</code>. If <code>watch_for_changes</code> …\nCreate a new loaded asset. This will use …\nCreate a new instance of <code>AssetServer</code>. If <code>watch_for_changes</code> …\nReturns an <code>AssetPath</code> for the parent folder of this path, …\nCreates a new <code>AssetPath</code> from a string in the asset path …\nGets the source path for this load context.\nReturns the path if this is (1) a strong handle and (2) …\nReturns the path if this is (1) a strong handle and (2) …\nGets the path to the asset in the “virtual filesystem”.\nThe asset path that was attempted.\nThe asset path that was attempted.\nPreregisters a loader for the given extensions, that will …\nPre-register a loader that will later be added.\nThe default file path to use (relative to the project …\nReads some bytes from the byte stream.\nReads the asset at the given path and returns its bytes\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nLike <code>read()</code>, except it reads into a slice of buffers.\nRetrieves the  <code>RecursiveDependencyLoadState</code> of a given …\nRegisters a new <code>Asset</code> type. <code>Asset</code> types must be registered …\nRegisters the given <code>loader</code> in the <code>App</code>’s <code>AssetServer</code>.\nRegisters the given <code>processor</code> in the <code>App</code>’s <code>AssetProcessor</code>…\nRegisters the asset type <code>T</code> using <code>[App::register]</code>, and adds …\nRegisters the given <code>AssetSourceBuilder</code> with the given <code>id</code>.\nRegisters a new <code>AssetLoader</code>. <code>AssetLoader</code>s must be …\nKicks off a reload of the asset stored at the given path. …\nRemoves (and returns) the <code>Asset</code> with the given <code>id</code>, if its …\nEquivalent of <code>Assets::remove</code>\nRemoves a “sub-asset label” from this <code>AssetPath</code>, if …\nRemoves (and returns) the <code>Asset</code> with the given <code>id</code>, if its …\nReserves a new <code>Handle</code> for an asset that will be stored in …\nReserves a new strong <code>UntypedHandle</code> (with a new …\nResolves a relative asset path via concatenation. The …\nResolves an embedded asset path via concatenation. The …\nSets the default asset processor for the given <code>extension</code>.\nGets the “asset source”, if one was defined. If none …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCast (and take ownership) of the <code>Asset</code> value of the given …\nTakes the “sub-asset label” from this <code>AssetPath</code>, if …\nA system that synchronizes the state of assets in this …\nCreates a new <code>AssetPath</code> from a string in the asset path …\nConverts to a typed Handle. This will panic if the …\nTry to convert this to a “typed” <code>AssetId</code>.\nReturns the <code>TypeId</code> of the <code>AssetLoader</code>.\nReturns the <code>TypeId</code> of the referenced <code>Asset</code>.\nReturns the stored <code>TypeId</code> of the referenced <code>Asset</code>.\nReturns the type name of the <code>AssetLoader</code>.\nConverts to a typed Handle. This will panic if the …\nConverts this to a “typed” <code>AssetId</code>.\nA way to go from a <code>UntypedHandle</code> to a <code>Handle&lt;T&gt;</code> in a …\nConverts to a typed Handle. This will check the type when …\nConverts this to a “typed” <code>AssetId</code>. When compiled in …\nConverts to a typed Handle. This <em>will not check if the </em>…\nConverts this to a “typed” <code>AssetId</code> without checking …\nConverts this to an “untyped” / “generic-less” …\nConverts this <code>Handle</code> to an “untyped” / “generic-less…\nConverts this to an “untyped” / “generic-less” …\nIf set, will override the default “watch for changes” …\nReturns true if the <code>AssetServer</code> watches for changes.\nCreate a new <code>Handle::Weak</code> with the given <code>u128</code> encoding of …\nReturns this asset path with the given label. This will …\nReturns this asset path with the given asset source. This …\nGets the path to the asset in the “virtual filesystem” …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nAn asset at this path was added.\nA folder at the given path was added.\nAsset metadata at this path was added.\nPerforms read operations on an asset storage. <code>AssetReader</code> …\nErrors that occur while loading assets.\nA collection of unprocessed and processed <code>AssetReader</code>, …\nMetadata about an “asset source”, such as how to …\nA <code>Resource</code> that hold (repeatable) functions capable of …\nAn “asset source change event” that occurs whenever …\nA reference to an “asset source”, which maps to an …\nA collection of <code>AssetSources</code>.\nA handle to an “asset watcher” process, that will …\nPreforms write operations on an asset storage. <code>AssetWriter</code> …\nErrors that occur while loading assets.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nThe default asset source.\nThe HTTP request completed but returned an unhandled HTTP …\nEncountered an I/O error while loading an asset.\nEncountered an I/O error while loading an asset.\nAn error returned when an <code>AssetSource</code> does not exist for a …\nAn error returned when an <code>AssetWriter</code> does not exist for a …\nAn error returned when a processed <code>AssetReader</code> does not …\nAn error returned when a processed <code>AssetWriter</code> does not …\nAn asset at this path was modified.\nAsset metadata at this path was modified.\nA non-default named asset source.\nPath not found.\nAn asset at this path was removed.\nA folder at the given path was removed.\nAsset metadata at this path was removed.\nSomething of unknown type was removed. It is the job of …\nAn asset at this path was renamed.\nA folder at the given path was renamed.\nAsset metadata at this path was renamed.\nAn <code>AsyncRead</code> implementation capable of reading a <code>Vec&lt;u8&gt;</code>.\nReturns <code>None</code> if this is <code>AssetSourceId::Default</code> and <code>Some</code> …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nStarts building a new <code>AssetSource</code>.\nBuilds a new <code>AssetSource</code> with the given <code>id</code>. If <code>watch</code> is …\nBuilds a new <code>AssetSources</code> collection. If <code>watch</code> is true, …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nClones into an owned [<code>AssetSourceId&lt;&#39;static&gt;</code>]. This is …\nCloses the writer.\nReturn’s this source’s unprocessed event receiver, if …\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis will cause processed <code>AssetReader</code> futures (such as …\nThis will cause processed <code>AssetReader</code> futures (such as …\nGets the <code>AssetSource</code> with the given <code>id</code>, if it exists.\nReturns a builder function for this platform’s default …\nReturns the default non-existent <code>AssetWatcher</code> warning for …\nReturns a builder function for this platform’s default …\nReturns a builder function for this platform’s default …\nGets a mutable builder with the given <code>id</code>, if it exists.\nReturns this source’s id.\nIterates over the <code>AssetSourceId</code> of every <code>AssetSource</code> in …\nInitializes the default <code>AssetSourceBuilder</code> if it has not …\nInserts a new builder with the given <code>id</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is not already an owned / static id, create one. …\nReturns true if the provided path points to a directory.\nIterates all asset sources in the collection (including …\nMutably iterates all asset sources in the collection …\nIterates all processed asset sources in the collection …\nMutably iterates all processed asset sources in the …\nCreate a new <code>VecReader</code> for <code>bytes</code>.\nCreates a new <code>AssetSourceId</code>\nReturns a builder containing the “platform default source…\nReturn’s this source’s processed event receiver, if …\nReturn’s this source’s processed <code>AssetReader</code>, if it …\nReturn’s this source’s processed <code>AssetWriter</code>, if it …\nReturns a future to load the full file data at the …\nReads some bytes from the byte stream.\nReturns an iterator of directory entry names at the …\nReads the exact number of bytes required to fill <code>buf</code>.\nReturns a future to load the full file data at the …\nReads asset metadata bytes at the given <code>path</code> into a <code>Vec&lt;u8&gt;</code>…\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nLike <code>read()</code>, except it reads into a slice of buffers.\nReturn’s this source’s unprocessed <code>AssetReader</code>.\nRemoves the asset stored at the given path.\nRemoves all assets (and directories) in this directory, …\nRemoves the directory at the given path, including all …\nRemoves the directory at the given path, but only if it is …\nRemoves the asset meta stored at the given path. This …\nRenames the asset at <code>old_path</code> to <code>new_path</code>\nRenames the asset meta for the asset at <code>old_path</code> to …\nReturns true if the assets in this source should be …\nCreates an adapter which will read at most <code>limit</code> bytes …\nWill use the given <code>reader</code> function to construct processed …\nEnables a warning for the processed source watcher, which …\nWill use the given <code>watcher</code> function to construct processed …\nWill use the given <code>writer</code> function to construct processed …\nWill use the given <code>reader</code> function to construct …\nEnables a warning for the unprocessed source watcher, …\nWill use the given <code>watcher</code> function to construct …\nWill use the given <code>writer</code> function to construct …\nWrites the full asset bytes at the provided path.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites the asset <code>bytes</code> to the given <code>path</code>.\nWrites the full asset meta bytes at the provided path. …\nWrites the asset meta <code>bytes</code> to the given <code>path</code>.\nLike <code>write()</code>, except that it writes a slice of buffers.\nReturn’s this source’s unprocessed <code>AssetWriter</code>, if it …\nThis field is only relevant if <code>path</code> is determined to be an …\nThe path of the removed asset or folder (undetermined). …\nA <code>Resource</code> that manages “rust source files” in a …\nReturns the argument unchanged.\nInserts a new asset. <code>full_path</code> is the full path (as <code>file</code> …\nInserts new asset metadata. <code>full_path</code> is the full path (as …\nCalls <code>U::from(self)</code>.\nRegisters a <code>embedded</code> <code>AssetSource</code> that uses this …\nI/O implementation for the local filesystem.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the base path of the assets directory, which is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FileAssetIo</code> at a path relative to the …\nCreates a new <code>FileAssetIo</code> at a path relative to the …\nReturns the root directory where assets are loaded from.\nOpens path “gates” for a <code>GatedReader</code>.\nA “gated” reader that will prevent asset reads from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GatedReader</code>, which wraps the given <code>reader</code>. …\nOpens the <code>path</code> “gate”, allowing a <em>single</em> <code>AssetReader</code> …\nAsset data stored in a <code>Dir</code>.\nA clone-able (internally Arc-ed) / thread-safe “in memory…\nIn-memory <code>AssetReader</code> implementation. This is primarily …\nStores either an allocated vec of bytes or a static array …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Dir</code> for the given <code>path</code>.\nAn <code>AssetReader</code> that will prevent asset (and asset …\nAn <code>AsyncRead</code> impl that will hold its asset’s transaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ProcessorGatedReader</code>.\nConfigures how an asset source file should be handled by …\nThis is a minimal counterpart to <code>AssetAction</code> that exists …\nAsset metadata that informs how an <code>Asset</code> should be handled …\nA dynamic type-erased counterpart to <code>AssetMeta</code> that …\nThis is a minimal counterpart to <code>AssetMeta</code> that exists to …\nDo nothing with the asset\nLoad the asset with the given loader and settings See …\nProcess the asset with the given processor and settings. …\nInformation about a dependency used to process an asset. …\nInfo produced by the <code>AssetProcessor</code> for a given processed …\nThis is a minimal counterpart to <code>ProcessedInfo</code> that exists …\nSettings used by the asset system, such as by <code>AssetLoader</code>, …\nHow to handle this asset in the asset system. See …\nDeserializes the given serialized byte representation of …\nReturns a boxed object from a boxed trait object if the …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nReturns a reference to the object within the trait object …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA hash of the asset bytes, the asset .meta data, and the …\nA hash of the asset bytes and the asset .meta data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns true if the trait object wraps an object of type …\nReturns a reference to the <code>AssetLoader</code> settings, if they …\nReturns a mutable reference to the <code>AssetLoader</code> settings, …\nThe version of the meta format being used. This will …\nInformation about the “process dependencies” used to …\nReturns a reference to the <code>ProcessedInfo</code> if it exists.\nInformation produced by the <code>AssetProcessor</code> <em>after</em> …\nReturns a mutable reference to the <code>ProcessedInfo</code> if it …\nSerializes the internal <code>AssetMeta</code>.\nEmitted whenever an <code>Asset</code> is added.\nAdds asset-related builder methods to <code>App</code>.\nEvents that occur for a specific loaded <code>Asset</code>, such as “…\nA unique runtime-only identifier for an <code>Asset</code>. This is …\nProvides “asset” loading and processing functionality. …\nLoads and tracks the state of <code>Asset</code> values from a …\nStores <code>Asset</code> values identified by their <code>AssetId</code>.\nA strong or weak handle to a specific <code>Asset</code>. If a <code>Handle</code> …\nA small / efficient runtime identifier that can be used to …\nEmitted whenever an <code>Asset</code> has been fully loaded (including …\nEmitted whenever an <code>Asset</code> value is modified.\nAssets will be “pre-processed”. This enables assets to …\nEmitted whenever an <code>Asset</code> is removed.\nA “strong” reference to a live (or loading) <code>Asset</code>. If …\nLoads assets from their <code>AssetSource</code>’s default <code>AssetReader</code>…\nAn untyped variant of <code>Handle</code>, which internally stores the …\nEmitted when the last <code>super::Handle::Strong</code> of an <code>Asset</code> is …\nA stable-across-runs / const asset identifier. This will …\nA “weak” reference to an <code>Asset</code>. If a <code>Handle</code> is …\nThe default file path to use (relative to the project …\nInitializes the given <code>Asset</code> in the <code>App</code> by:\nInitializes the given loader in the <code>App</code>’s <code>AssetServer</code>.\nThe <code>AssetMode</code> to use for this server.\nPreregisters a loader for the given extensions, that will …\nThe default file path to use (relative to the project …\nRegisters the given <code>loader</code> in the <code>App</code>’s <code>AssetServer</code>.\nRegisters the given <code>processor</code> in the <code>App</code>’s <code>AssetProcessor</code>…\nRegisters the asset type <code>T</code> using <code>[App::register]</code>, and adds …\nRegisters the given <code>AssetSourceBuilder</code> with the given <code>id</code>.\nSets the default asset processor for the given <code>extension</code>.\nIf set, will override the default “watch for changes” …\nA “background” asset processor that reads asset values …\nA type-erased variant of <code>Process</code> that enables interacting …\nThe processor has finished processing all valid assets and …\nAn error that occurs when initializing the <code>AssetProcessor</code>.\nThe processor is still initializing, which involves …\nA flexible <code>Process</code> implementation that loads the source …\nSettings for the <code>LoadAndSave</code> <code>Process::Settings</code> …\nA flexible <code>Process</code> implementation that loads the source …\nSettings for the <code>LoadTransformAndSave</code> <code>Process::Settings</code> …\nAn error that occurs when validating individual …\nThe <code>AssetLoader</code> that will be used to load the final …\nAsset “processor” logic that reads input asset bytes …\nProvides scoped data access to the <code>AssetProcessor</code>. This …\nAn error that is encountered during <code>Process::process</code>.\nThe (successful) result of processing an asset\nThe final status of processing an asset\nThe processor is currently processing assets.\nThe “current” in memory view of the asset space. This …\nThe current state of the <code>AssetProcessor</code>.\nA “write ahead” logger that helps ensure asset …\nAn error that occurs when reading from the …\nThe configuration / settings used to process the asset. …\nAn error that occurs when validating the …\nAn error that occurs when writing to the …\nThe source bytes of the asset being processed.\nReturns the default type-erased <code>AssetMeta</code> for the …\nDeserialized <code>meta</code> as type-erased <code>AssetMeta</code>, operating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the default processor for the given <code>extension</code>, if …\nReturns the processor with the given <code>processor_type_name</code>, …\nRetrieves the <code>AssetSource</code> for this processor\nRetrieves the current <code>ProcessorState</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens for changes to assets in the source <code>AssetSource</code> …\nLoad the source asset using the <code>L</code> <code>AssetLoader</code> and the …\nThe <code>AssetLoader::Settings</code> for <code>LoadTransformAndSave</code>.\nThe <code>AssetLoader::Settings</code> for <code>LoadAndSave</code>.\nCreates a new <code>AssetProcessor</code> instance.\nProcesses the asset stored on <code>context</code> in some way using …\nType-erased variant of <code>Process::process</code>.\nProcesses all assets. This will:\nRegister a new asset processor.\nThe <code>AssetSaver::Settings</code> for <code>LoadTransformAndSave</code>.\nThe <code>AssetSaver::Settings</code> for <code>LoadAndSave</code>.\nThe “internal” <code>AssetServer</code> used by the <code>AssetProcessor</code>. …\nSet the default processor for the given <code>extension</code>. Make …\nStarts the processor in a background thread.\nThe <code>AssetTransformer::Settings</code> for <code>LoadTransformAndSave</code>.\nReturns a future that will not finish until processing has …\nReturns a future that will not finish until the processor …\nReturns a future that will not finish until the path has …\nThe RON deserializer.\nContains the error value\nA <code>Value</code> to <code>Value</code> map.\nA wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.\nContains the success value\nRoundtrip serde options.\nThe RON serializer.\nExtensions that are enabled by default during …\nA convenience function for building a deserializer and …\nRoundtrip serde Options module.\nDefault recursion limit that is checked during …\nSerializes <code>value</code> and returns it as string.\nValue module.\nThe RON deserializer.\nThis type represents all possible errors that can occur …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type represents all possible errors that can occur …\nRoundtrip serde options.\nExtensions that are enabled by default during …\nDefault recursion limit that is checked during …\nPretty serializer configuration.\nThe RON serializer.\nEnable compact arrays\nLimit the pretty-ness up to the given depth.\nEnumerate array items in comments\nEnable extensions. Only configures ‘implicit_some’, ‘…\nIndentation string\nNew line string\nSeparate tuple members with indentation\nSeparator string\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> in the recommended RON layout in a pretty …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nA wrapper for <code>f64</code>, which guarantees that the inner value …\nA <code>Value</code> to <code>Value</code> map.\nA wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.\nThe top level <code>Asset</code> saved by this <code>AssetSaver</code>.\nSaves an <code>Asset</code> of a given <code>AssetSaver::Asset</code> type. …\nA type-erased dynamic variant of <code>AssetSaver</code> that allows …\nThe type of error which could be encountered by this saver.\nThe type of <code>AssetLoader</code> used to load this <code>Asset</code>\nAn <code>Asset</code> (and any labeled “sub assets”) intended to be …\nThe settings type used by this <code>AssetSaver</code>.\nReturns the argument unchanged.\nCreates a new <code>SavedAsset</code> from <code>asset</code> if its internal value …\nCreates a new <code>SavedAsset</code> from the a <code>TransformedAsset</code>\nRetrieves the value of this asset.\nReturns the type-erased labeled asset, if it exists and …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the labeled asset, if it exists and matches this …\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nCalls <code>U::from(self)</code>.\nIterate over all labels for “labeled assets” in the …\nSaves the given runtime <code>Asset</code> by writing it to a byte …\nSaves the given runtime <code>ErasedLoadedAsset</code> by writing it to …\nThe type name of the <code>AssetSaver</code>.\nThe <code>Asset</code> type which this <code>AssetTransformer</code> takes as and …\nThe <code>Asset</code> type which this <code>AssetTransformer</code> outputs.\nTransforms an <code>Asset</code> of a given <code>AssetTransformer::AssetInput</code>…\nThe type of error which could be encountered by this …\nThe settings type used by this <code>AssetTransformer</code>.\nAn <code>Asset</code> (and any “sub assets”) intended to be …\nA labeled sub-asset of <code>TransformedAsset</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TransformedAsset</code> from <code>asset</code> if its internal …\nCreates a new <code>TransformedSubAsset</code> from <code>asset</code> if its …\nRetrieves the value of this asset.\nRetrieves the value of this asset.\nReturns the type-erased labeled asset, if it exists and …\nReturns the type-erased labeled asset, if it exists and …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the labeled asset, if it exists and matches this …\nReturns the labeled asset, if it exists and matches this …\nMutably retrieves the value of this asset.\nMutably retrieves the value of this asset.\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nAdds <code>asset</code> as a labeled sub asset using <code>label</code> and <code>handle</code>\nAdds <code>asset</code> as a labeled sub asset using <code>label</code> and <code>handle</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all labels for “labeled assets” in the …\nIterate over all labels for “labeled assets” in the …\nCreates a new <code>TransformedAsset</code> from <code>asset</code>, transfering the …\nTakes the labeled assets from <code>labeled_source</code> and places …\nTransformes the given <code>TransformedAsset</code> to …\nA trait that allows adding a custom audio source to the …\nBundle for playing a standard bevy audio asset\nLoads files as <code>AudioSource</code> <code>Assets</code>\nAdds support for audio playback to a Bevy Application\nUsed to control audio during playback.\nCommon interactions with an audio sink.\nA source of audio data\nBundle for playing a sound.\nA trait for working generically across different <strong>Sample</strong> …\nWill play the associated audio source once and despawn the …\nA type implementing this trait can be converted to a …\nThe type of the iterator of the audio samples, which …\nThe type of the audio samples. Usually a <code>u16</code>, <code>i16</code> or <code>f32</code>, …\nThe default scale factor applied to the positions of audio …\nDespawn the entity when the sound finishes playing.\nThe equilibrium value for the wave that this <code>Sample</code> type …\nWhen multiplying two samples of a signal together, it is …\nUse this <code>Resource</code> to control the global volume of all …\nThe multiplicative identity of the signal.\nWill play the associated audio source in a loop.\nRepeat the sound forever.\nWill play the associated audio source once.\nPlay the sound once. Do nothing when it ends.\nA source of sine wave sound\nBundle for playing a bevy note sound\nThe way Bevy manages the sound playback.\nInitial settings to be used when audio starts playing. If …\nWill play the associated audio source once and remove the …\nRemove the audio components from the entity, when the …\nRepresents a value of a single sample.\nWhen summing two samples of a signal together, it is …\nA source of samples.\nUsed to control spatial audio during playback.\nSettings for the listener for spatial audio sources.\nA scale factor applied to the positions of audio sources …\nA volume level equivalent to a non-negative float.\nZero (silent) volume level\nAdds (or “offsets”) the amplitude of the <code>Sample</code> by the …\nRegisters an audio source. The type must implement …\nMultiplies the value of this sample by the given amount.\nAmplifies the sound by the given value.\nStores the source in a buffer in addition to returning it. …\nRaw data of the audio source.\nReturns the number of channels. Channels are always …\nConverts the samples of this source to another type.\nReturns the number of samples before the current frame …\nBuild and return a <code>Self::Decoder</code> of the implementing type\nThe scale factor applied to the positions of audio sources …\nDelays the sound by a certain duration.\nDuration for which sound will be played\nReturns true if this sink has no more sounds to play.\nFades in the sound.\nFrequency at which sound will be played\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>.\nGet the value of the volume level.\nThe global volume for all audio entities.\nApplies a high-pass filter to the source.\nApplies a high-pass filter to the source while allowing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this sink paused?\nLeft ear position relative to the <code>GlobalTransform</code>.\nLinear interpolation between two samples.\nProcesses the asset in an asynchronous closure.\nApplies a low-pass filter to the source. <strong>Warning</strong>: Probably …\nApplies a low-pass filter to the source while allowing the …\nMixes this source with another one.\nThe desired playback behavior.\nMultiplies (or “scales”) the amplitude of the <code>Sample</code> …\nCreate a new volume level.\nCreates a new <code>SpatialListener</code> component.\nCreate a new <code>GlobalVolume</code> with the given volume.\nCreate a new <code>SpatialScale</code> with the same value for all 3 …\nCreates a new note\nCreate a new <code>SpatialScale</code> with the same value for <code>x</code> and <code>y</code>, …\nMakes the sound pausable.\nPauses playback of this sink.\nHelper to start in a paused state.\nCreate the sink in paused state. Useful for “deferred …\nCalls the <code>access</code> closure on <code>Self</code> the first time the source …\nResumes playback of a paused sink.\nRepeats this source forever.\nAdds a basic reverb effect.\nRight ear position relative to the <code>GlobalTransform</code>.\nReturns the rate at which the source should be played. In …\nCalls <code>saturating_add</code> on the sample.\nSet the two ears position.\nSet the emitter position.\nSet the listener position, with an ear on each side …\nChanges the speed of the sound.\nChanges the volume of the sound.\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nImmediately skips a certain duration of this source.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nEnables spatial audio for this source.\nOptional scale factor applied to the positions of this …\nGets the speed of the sound.\nChanges the play speed of the sound. Does not adjust the …\nSpeed to play at.\nStops the sink.\nMakes the sound stoppable.\nMixes this sound fading out with another sound fading in …\nTakes a certain duration of this source and then stops.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nConvert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nToggles the playback of this sink.\nReturns the total duration of this source, if known.\nGets the volume of the sound.\nVolume to play at.\nThe global volume of all audio.\nHelper to enable or disable spatial audio.\nHelper to use a custom spatial scale.\nHelper to set the speed from start of playback.\nHelper to set the volume from start of playback.\nReturns the value corresponding to the absence of sound.\nBundle for playing a standard bevy audio asset\nUsed to control audio during playback.\nCommon interactions with an audio sink.\nA source of audio data\nBundle for playing a sound.\nA type implementing this trait can be converted to a …\nThe type of the iterator of the audio samples, which …\nThe type of the audio samples. Usually a <code>u16</code>, <code>i16</code> or <code>f32</code>, …\nUse this <code>Resource</code> to control the global volume of all …\nA source of sine wave sound\nBundle for playing a bevy note sound\nInitial settings to be used when audio starts playing. If …\nUsed to control spatial audio during playback.\nSettings for the listener for spatial audio sources.\nRaw data of the audio source.\nBuild and return a <code>Self::Decoder</code> of the implementing type\nDuration for which sound will be played\nReturns true if this sink has no more sounds to play.\nFrequency at which sound will be played\nIs this sink paused?\nLeft ear position relative to the <code>GlobalTransform</code>.\nThe desired playback behavior.\nPauses playback of this sink.\nCreate the sink in paused state. Useful for “deferred …\nResumes playback of a paused sink.\nRight ear position relative to the <code>GlobalTransform</code>.\nChanges the speed of the sound.\nChanges the volume of the sound.\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nEnables spatial audio for this source.\nOptional scale factor applied to the positions of this …\nGets the speed of the sound.\nSpeed to play at.\nStops the sink.\nToggles the playback of this sink.\nGets the volume of the sound.\nVolume to play at.\nThe global volume of all audio.\nConvenient query for giving a human friendly name to an …\nAutomatically generated [<code>WorldQuery</code>] item type for …\nMaintains a count of frames rendered since the start of …\nAdds frame counting functionality to Apps.\nComponent used to identify an entity. Stores a hash for …\nA dummy type that is <code>!Send</code>, to force systems to run on the …\nMarker trait for “plain old data”.\nDerive the <code>Pod</code> trait for a struct\nHelper for configuring and creating the default task …\nSetup of default task pools: <code>AsyncComputeTaskPool</code>, …\nDefines a simple way to determine how many threads to use …\nRegistration of default types to the <code>TypeRegistry</code> resource.\nTrait for types that can be safely created with <code>zeroed</code>.\nDerive the <code>Zeroable</code> trait for a struct\nGets the name of the entity as a <code>&amp;str</code>.\nUsed to determine number of async compute threads to …\nRe-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.\nCast <code>&amp;[A]</code> into <code>&amp;[B]</code>.\nUsed to determine number of compute threads to allocate\nInserts the default thread pools into the given resource …\nThe unique identifier of the entity as a fallback.\nThe unique identifier of the entity as a fallback.\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to determine number of IO threads to allocate\nUnder no circumstance use more than this many threads for …\nIf the number of physical cores is greater than …\nForce using at least this many threads\nIf the number of physical cores is less than …\nUpdates the name of the entity in place.\nA <code>Name</code> that the entity might have that is displayed if …\nA <code>Name</code> that the entity might have that is displayed if …\nCreates a new <code>Name</code> from any string-like type.\nTarget using this percentage of total cores, clamped by …\nThe Bevy Core Prelude.\nSets the entity’s name.\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_table</code> for each member that implements …\nOptions for the <code>TaskPool</code> created at application start.\nA system used to increment <code>FrameCount</code> with wrapping …\nCreate a configuration that forces using the given number …\nCalls <code>zeroed</code>.\nConvenient query for giving a human friendly name to an …\nAdds frame counting functionality to Apps.\nComponent used to identify an entity. Stores a hash for …\nHelper for configuring and creating the default task …\nSetup of default task pools: <code>AsyncComputeTaskPool</code>, …\nRegistration of default types to the <code>TypeRegistry</code> resource.\nUsed to determine number of async compute threads to …\nUsed to determine number of compute threads to allocate\nThe unique identifier of the entity as a fallback.\nUsed to determine number of IO threads to allocate\nIf the number of physical cores is greater than …\nIf the number of physical cores is less than …\nA <code>Name</code> that the entity might have that is displayed if …\nOptions for the <code>TaskPool</code> created at application start.\nAdds a skybox to a 3D camera, based on a cubemap texture.\nScale factor applied to the skybox image. After applying …\nExperimental features that are not yet finished. Please …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun a prepass before the main pass to generate depth, …\nAdds support for specialized “blit pipelines”, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a threshold filter to the input image to extract …\nApplies a bloom effect to an HDR-enabled 2d or 3d camera.\nThe default bloom preset.\nA preset that’s similar to how older games did bloom.\nA preset that applies a very strong bloom, and blurs the …\nControls whether bloom textures are blended between or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTightens how much the light scatters (default: 1.0).\nControls the baseline of how much the image is scattered …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow frequency contribution boost. Controls how much more …\nLow frequency contribution boost curve. Controls the …\nBaseline of the quadratic threshold curve (default: 0.0).\nControls how much to blend between the thresholded and …\nAdds Support for Contrast Adaptive Sharpening (CAS).\nApplies a contrast adaptive sharpening (CAS) filter to the …\nWhether to try and avoid sharpening areas that are already …\nEnable or disable sharpening.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdjusts sharpening strength. Higher values increase the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for the “main 3d render graph”.\nThe depth clear operation to perform for the main 3d pass.\nClear with a specified value. Note that 0.0 is the far …\nBetter quality. Suitable for high end GPUs. (e.g. Desktop)\nLoad from memory.\nBest performance at the cost of quality. Suitable for …\nA <code>bevy_render::render_graph::Node</code> that runs the <code>Opaque3d</code> …\nA <code>bevy_render::render_graph::Node</code> that runs the …\nA balanced option between quality and performance.\nThe quality of the screen space transmission blur effect, …\nThe highest quality, suitable for non-realtime rendering. …\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha mask phase of the 3D Deferred pass.\nOpaque phase of the 3D Deferred pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender node used by the prepass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBundle to apply temporal anti-aliasing.\nRender <code>bevy_render::render_graph::Node</code> used by temporal …\nPlugin for temporal anti-aliasing. Disables multisample …\nComponent to apply temporal anti-aliasing to a 3D …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet to true to delete the saved temporal history (past …\nuses the <code>FULLSCREEN_SHADER_HANDLE</code> to output a\nAdds support for Fast Approximate Anti-Aliasing (FXAA)\nUse lower sensitivity for a sharper, faster, result. Use …\nTrims the algorithm from processing darks.\nEnable render passes for FXAA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis enables “msaa writeback” support for the <code>core_2d</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for the “main 3d render graph”.\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an orthographic projection camera with a custom <code>Z</code> …\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nAlpha mask phase of the 3D prepass.\nIf added to a <code>crate::prelude::Camera3d</code> then deferred …\nIf added to a <code>crate::prelude::Camera3d</code> then depth values …\nIf added to a <code>crate::prelude::Camera3d</code> then screen space …\nIf added to a <code>crate::prelude::Camera3d</code> then vertex world …\nOpaque phase of the 3D prepass.\nTextures that are written to by the prepass.\nThe deferred gbuffer generated by the deferred pass. …\nA texture that specifies the deferred lighting pass id for …\nThe depth texture generated by the prepass. Exists only if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe motion vectors texture generated by the prepass. …\nThe normals texture generated by the prepass. Exists only …\nThe size of the textures.\nRender node used by the prepass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSame base implementation that Godot 4.0 uses for Tonemap …\nBy Troy Sobotka https://github.com/sobotka/AgX Very …\nDefault Filmic Display Transform from blender. Somewhat …\nEnables a debanding shader that applies dithering to …\nBypass tonemapping.\nSuffers from lots hue shifting, brights don’t desaturate …\nSuffers from hue shifting. Brights don’t desaturate much …\nBy Tomasz Stachowiak Has little hue shifting in the darks …\nOptionally enables a tonemapping shader that attempts to …\n3D LUT (look up table) textures used for tonemapping\nCurrent Bevy default. By Tomasz Stachowiak …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault max history length for new diagnostics.\nA timeline of <code>DiagnosticMeasurement</code>s of a specific type. …\nA single measurement of a <code>Diagnostic</code>.\nUnique diagnostic path, separated by <code>/</code>.\nRecord new <code>DiagnosticMeasurement</code>’s.\nAdds core diagnostics resources to an App.\nA collection of <code>Diagnostic</code>s.\nAdds “entity count” diagnostic to an App.\nAdds “frame time” diagnostic to an App, specifically …\nAn App Plugin that logs diagnostics to the console.\nExtend <code>App</code> with new <code>register_diagnostic</code> function.\nAdds a System Information Diagnostic, specifically …\nAdd a new <code>Diagnostic</code>.\nAdd a new value as a <code>DiagnosticMeasurement</code>.\nAdd a measurement to an enabled <code>Diagnostic</code>. The …\nReturns full path, joined by <code>/</code>\nReturn the simple moving average of this diagnostic’s …\nClear the history of this diagnostic.\nReturns an iterator over path components.\nCreate a new <code>DiagnosticPath</code>. Usable in const contexts.\nReturn the duration between the oldest and most recent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>DiagnosticPath</code> from an iterator over …\nReturn the maximum number of elements for this diagnostic.\nGet the latest <code>DiagnosticMeasurement</code> from an enabled …\nReturn the number of elements for this diagnostic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over all <code>Diagnostic</code>s.\nReturn an iterator over all <code>Diagnostic</code>s, by mutable …\nGet the latest measurement from this diagnostic.\nCreate a new <code>DiagnosticPath</code> from the specified string.\nCreate a new diagnostic with the given path.\nReturn the exponential moving average of this diagnostic.\nGet the latest value from this diagnostic.\nSet the maximum history length.\nThe smoothing factor used for the exponential smoothing …\nAdd a suffix to use when logging the value, can be used to …\nHelper macro to generate tuple pyramids. Useful to …\nTypes for defining <code>Archetype</code>s, collections of entities …\nTypes for handling <code>Bundle</code>s.\nTypes that detect when their internal data mutate.\nTypes for declaring and storing <code>Component</code>s.\nEntity handling types.\nEvent handling types.\nA module for the unified <code>Identifier</code> ID struct, for use as …\nMost commonly used re-exported types.\nContains APIs for retrieving component data from the world.\nTypes that enable reflection support.\nAlerting events when a component is removed from an entity.\nContains APIs for ordering systems and executing them on a …\nStorage layouts for ECS data.\nTools for controlling behavior in an ECS application.\nDefines the <code>World</code> and APIs for accessing it directly.\nMetadata for a single archetype within a <code>World</code>.\nAn opaque unique joint ID for a <code>Component</code> in an <code>Archetype</code> …\nMetadata about an <code>Entity</code> in a <code>Archetype</code>.\nThe next <code>ArchetypeId</code> in an <code>Archetypes</code> collection.\nAn opaque unique ID for a single <code>Archetype</code> within a <code>World</code>.\nAn opaque location within a <code>Archetype</code>.\nThe backing store of all <code>Archetype</code>s within a <code>World</code>.\nThe ID for the <code>Archetype</code> without any components.\nArchetypes and bundles form a graph. Adding or removing a …\nIndex indicating an invalid archetype row. This is meant …\nSafety:\nReturns the number of components that are stored in …\nGets an iterator of all of the components in the archetype.\nChecks if the archetype contains a specific component. …\nFetches a immutable reference to the archetype’s <code>Edges</code>, …\nFetches an immutable reference to the archetype without …\nFetches the entities contained in this archetype.\nFetches the row in the <code>Table</code> where the components for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the “generation”, a handle to the current …\nFetches an immutable reference to an <code>Archetype</code> using its …\nChecks the cache for the target archetype when adding a …\nFetches the corresponding <code>ArchetypeComponentId</code> for a …\nChecks the cache for the target archetype when removing a …\nGets the type of storage where a component in the …\nChecks the cache for the target archetype when removing a …\nThe ID of the entity.\nFetches the ID for the archetype.\nGets the index of the row.\nThe plain value of this <code>ArchetypeId</code>.\nThe first archetype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the archetype has any entities.\nReturns a read-only iterator over all archetypes.\nGets the total number of entities that belong to the …\nFetches the total number of <code>Archetype</code>s within the world.\nCreates a <code>ArchetypeRow</code>.\nCreate an <code>ArchetypeId</code> from a plain value.\nGets an iterator of all of the components stored in …\nGets an iterator of all of the components stored in <code>Table</code>s.\nFetches the archetype’s <code>Table</code> ID.\nThe row in the <code>Table</code> where the entity’s components are …\nThe <code>Bundle</code> trait enables insertion and removal of <code>Component</code>…\nFor a specific <code>World</code>, this stores a unique value …\nStores metadata associated with a specific type of <code>Bundle</code> …\nMetadata for bundles. Stores a <code>BundleInfo</code> for each type of …\nThe parts from <code>Bundle</code> that don’t require statically …\nReturns the ID of each component stored in this bundle.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the metadata associated with a specific type of …\nGets the value identifying a specific type of bundle. …\nReturns a value identifying the associated <code>Bundle</code> type.\nReturns the index of the associated <code>Bundle</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe (arbitrarily chosen) minimum number of world tick …\nTypes that can read change detection information. This …\nTypes that implement reliable change detection.\nThe type contained within this smart pointer\nThe maximum change tick difference that won’t overflow …\nUnique mutable borrow of an entity’s component or of a …\nUnique mutable borrow of resources or an entity’s …\nUnique borrow of a non-<code>Send</code> resource.\nShared borrow of an entity’s component with access to …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nReturns a pointer to the value without taking ownership of …\nReturns an immutable pointer to the value without taking …\nManually bypasses change detection, allowing you to mutate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the pointer to the value, marking it as changed.\nReturns <code>true</code> if this value was added after the system last …\nReturns <code>true</code> if this value was added or mutably …\nReturns the change tick recording the time this data was …\nTurn this <code>MutUntyped</code> into a <code>Mut</code> by mapping the inner <code>PtrMut</code>…\nReturns a <code>MutUntyped</code> with a smaller lifetime. This is …\nOverwrites this smart pointer with the given value, if and …\nFlags this value as having been changed.\nOverwrites this smart pointer with the given value, if and …\nManually sets the change tick recording the time when this …\nTransforms this <code>MutUntyped</code> into a <code>Mut&lt;T&gt;</code> with the same …\nA data type that can be used to store data for an entity.\nA value describing a component or resource, which may or …\nA value which uniquely identifies the type of a <code>Component</code> …\nA <code>SystemParam</code> that provides access to the <code>ComponentId</code> for …\nStores metadata for a type of component or resource stored …\nTypes used to specify the storage strategy for a component.\nRecords when a component or resource was added and when it …\nStores metadata associated with each kind of <code>Component</code> in …\nThe maximum relative age for a change tick. The value of …\nA value indicating the storage strategy specified by this …\nProvides fast addition and removal of components, but …\nMarker type for components stored in a <code>ComponentSparseSet</code>.\nA marker type indicating the storage type used for this …\nThe storage used for a specific component type.\nProvides fast and cache-friendly iteration, but slower …\nMarker type for components stored in a <code>Table</code>.\nA value that tracks when a system ran relative to other …\nInterior-mutable access to the <code>Tick</code>s for a single …\nThe tick indicating when the value was added to the world.\nReturns the tick recording the time this component or …\nThe tick indicating the last time the value was modified.\nReturns the <code>ComponentId</code> of the given <code>Component</code> type <code>T</code>.\nGet the function which should be called to clean up values …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the value of this change tick.\nGets the <code>ComponentId</code> for the type <code>T</code>.\nType-erased equivalent of <code>Components::component_id()</code>.\nGets the metadata associated with the given component.\nGets the metadata associated with the given component.\nReturns the name associated with the given component.\nType-erased equivalent of <code>Components::resource_id()</code>.\nReturns a value uniquely identifying the current component.\nReturns the index of the current component.\nInitializes a component of type <code>T</code> with this instance. If a …\nInitializes a component described by <code>descriptor</code>.\nInitializes a non-send resource of type <code>T</code> with this …\nInitializes a <code>Resource</code> of type <code>T</code> with this instance. If a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the component or resource was added after …\nReturns <code>true</code> if the component or resource was added or …\nReturns <code>true</code> if there are no components registered with …\nReturns <code>true</code> if this <code>Tick</code> occurred since the system’s …\nReturns <code>true</code> if the underlying component type can be …\nGets an iterator over all components registered with this …\nReturns the tick recording the time this component or …\nReturns the layout used to store values of this component …\nReturns the number of components registered with this …\nReturns the name of the current component.\nReturns the name of the current component.\nCreates a new <code>ComponentId</code>.\nCreate a new <code>ComponentDescriptor</code> for the type <code>T</code>.\nCreates a new <code>Tick</code> wrapping the given value.\nCreate a new <code>ComponentDescriptor</code> for a resource.\nCreate a new <code>ComponentDescriptor</code>.\nReturns the <code>ComponentId</code> of the given <code>Resource</code> type <code>T</code>.\nSets the value of this change tick.\nManually sets the change tick.\nReturns a value indicating the storage strategy for the …\nReturns a value indicating the storage strategy for the …\nReturns the <code>TypeId</code> of the underlying component type. …\nReturns the <code>TypeId</code> of the underlying component type. …\nA <code>World</code>’s internal metadata store on all of its entities.\nLightweight identifier of an entity.\nA <code>BuildHasher</code> that results in a <code>EntityHasher</code>.\nA <code>HashMap</code> pre-configured to use <code>EntityHash</code> hashing.\nA <code>HashSet</code> pre-configured to use <code>EntityHash</code> hashing.\nA very fast hash that is only designed to work on …\nA location of an entity in an archetype.\nAn implementor of this trait knows how to map an <code>Entity</code> …\nOperation to map all contained <code>Entity</code> fields in a type to …\nAn <code>Iterator</code> returning a sequence of <code>Entity</code> values from\nA wrapper for <code>EntityHashMap&lt;Entity&gt;</code>, augmenting it with …\nAllocate an entity ID directly.\nAllocate a specific entity ID, overwriting its generation.\nThe ID of the <code>Archetype</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Archetype</code>.\nClears all <code>Entity</code> from the World.\nReturns true if the <code>Entities</code> contains <code>entity</code>.\nAllocates space for entities previously reserved with …\nSafety\nFlushes all reserved entities to an “invalid” state. …\nDestroy an entity, allowing it to be reused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the location of an <code>Entity</code>. Note: for pending …\nGets a reference to the underlying <code>EntityHashMap&lt;Entity&gt;</code>.\nGets a mutable reference to the underlying …\nReturns the corresponding mapped entity or reserves a new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if any entity is currently active.\nThe count of currently allocated entities.\nUpdates all <code>Entity</code> references stored inside using …\nMap an entity to another entity\nReturns the corresponding mapped entity or reserves a new …\nEnsure at least <code>n</code> allocations can succeed without …\nReserve entity IDs concurrently.\nReserve one entity ID concurrently.\nGet the <code>Entity</code> with a given id, if it exists in this …\nThe ID of the <code>Table</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Table</code>.\nThe count of all entities in the <code>World</code> that have ever been …\nCreates an <code>SceneEntityMapper</code> from a provided <code>World</code> and …\nA type that can be stored in an <code>Events&lt;E&gt;</code> resource You can …\nAn <code>EventId</code> uniquely identifies an event stored in a …\nAn iterator that yields any unread events from an …\nAn iterator that yields any unread events (and their IDs) …\nReads events of type <code>T</code> in order and tracks which events …\nSends events of type <code>T</code>.\nAn event collection that represents the events that …\nStores the state for an <code>EventReader</code>.\n<code>Iterator</code> over sent <code>EventIds</code> from a batch.\nSee <code>EventReader::clear()</code>\nA run condition that checks if the event’s …\nA system that calls <code>Events::update</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUniquely identifies the event associated with this ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>EventReader::is_empty()</code>\nSee <code>EventReader::len</code>\nAmount of events we missed.\nCreates a new iterator that yields any <code>events</code> that have …\nSee <code>EventReader::read</code>\nSee <code>EventReader::read_with_id</code>\nResets the <code>EventUpdateSignal</code>\nSignals the <code>event_update_system</code> to run after <code>FixedUpdate</code> …\nIterate over only the events.\nA unified identifier for all entity and similar IDs. Has …\nError types for <code>super::Identifier</code> conversions. An ID can …\nReturns the argument unchanged.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nReturns the value of the high segment of the <code>Identifier</code>. …\nCalls <code>U::from(self)</code>.\nReturns the kind of <code>Identifier</code> from the high segment.\nReturns the value of the low segment of the <code>Identifier</code>.\nReturns the masked value of the high segment of the …\nConstruct a new <code>Identifier</code>. The <code>high</code> parameter is masked …\nConvert the <code>Identifier</code> into a <code>u64</code>.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nAn  Error type for <code>super::Identifier</code>, mostly for providing …\nA given ID has an invalid configuration of bits for …\nA given ID has an invalid value for initialising to a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA filter on a component that only retains results added …\nThe <code>AnyOf</code> query parameter fetches entities with any of the …\nA <code>Resource</code> storing <code>TypeRegistry</code> for type registrations …\nThe <code>Bundle</code> trait enables insertion and removal of <code>Component</code>…\nA filter on a component that only retains results added or …\nA <code>Command</code> queue to perform structural changes to the <code>World</code>.\nA data type that can be used to store data for an entity.\nA system that determines if one or more scheduled systems …\nA <code>SystemParam</code> that stores a buffer which gets applied to …\nTypes that can read change detection information. This …\nTypes that implement reliable change detection.\nLightweight identifier of an entity.\nAn implementor of this trait knows how to map an <code>Entity</code> …\nProvides mutable access to a single entity and all of its …\nA read-only reference to a particular <code>Entity</code> and all of …\nA mutable reference to a particular <code>Entity</code>, and the entire …\nA type that can be stored in an <code>Events&lt;E&gt;</code> resource You can …\nReads events of type <code>T</code> in order and tracks which events …\nSends events of type <code>T</code>.\nAn event collection that represents the events that …\nCreates an instance of the type this trait is implemented …\nReturns a bool that describes if an entity has the …\nWrapper type to mark a <code>SystemParam</code> as an input.\nThe input type to this system. See <code>System::In</code>.\nThe system’s input. See <code>In</code> for <code>FunctionSystem</code>s.\nThe type contained within this smart pointer\nConversion trait to turn something into a <code>System</code>.\nTypes that can convert into a <code>SystemConfigs</code>.\nTypes that can be converted into a <code>SystemSet</code>.\nTypes that can convert into a <code>SystemSetConfigs</code>.\nA system local <code>SystemParam</code>.\nUnique mutable borrow of an entity’s component or of a …\nThe next state of <code>State&lt;S&gt;</code>.\nShared borrow of a non-<code>Send</code> resource.\nUnique borrow of a non-<code>Send</code> resource.\nThe label of a <code>Schedule</code> that runs whenever <code>State&lt;S&gt;</code> enters …\nThe label of a <code>Schedule</code> that runs whenever <code>State&lt;S&gt;</code> exits …\nThe label of a <code>Schedule</code> that <strong>only</strong> runs whenever <code>State&lt;S&gt;</code> …\nA filter that tests if any of the given filters apply.\nThe return type of this system. See <code>System::Out</code>.\nThe system’s output.\nAn entity ID with a placeholder value. This may or may not …\nAn alternative to <code>Commands</code> that can be used in parallel …\nThe <code>SystemParam</code>/s used by this system to access the <code>World</code>.\nA collection of potentially conflicting <code>SystemParam</code>s …\nSystem parameter that provides selective access to the …\nBuilder struct to create <code>QueryState</code> instances at runtime.\nProvides scoped access to a <code>World</code> state according to a …\n<code>System</code> types that do not modify the <code>World</code> when run. This …\nShared borrow of an entity’s component with access to …\nA struct used to operate on reflected <code>Component</code> trait of a …\nA struct used to operate on the reflected <code>FromWorld</code> trait …\nA struct used to operate on reflected <code>Resource</code> of a type.\nA <code>SystemParam</code> that yields entities that had their <code>T</code> …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nA type that can be inserted into a <code>World</code> as a singleton.\nA collection of systems, and the metadata and executor …\nResource that stores <code>Schedule</code>s mapped to <code>ScheduleLabel</code>s …\nThe type of <code>SystemSet</code> this instance converts into.\nA finite-state machine whose transitions have associated …\nEvent sent when any state transition of <code>S</code> happens.\nTypes that can define world-wide states in a finite-state …\nA marker type indicating the storage type used for this …\nAn ECS system that can be added to a <code>Schedule</code>\nThe type of <code>System</code> that this instance converts into.\nA trait implemented for all functions that can be used as …\nTypes that identify logical groups of systems.\nDerive macro generating an impl of the trait <code>SystemSet</code>.\nFilter that selects entities with a component <code>T</code>.\nFilter that selects entities without a component <code>T</code>.\nStores and exposes operations on entities, components, …\nReturns a reference to the the <code>FilteredAccess</code> that will be …\nPushes a generic <code>Command</code> to the command queue.\nAdds the specified <code>Schedule</code> to the world. The schedule can …\nAdd a collection of systems to the schedule.\nRun after all systems in <code>set</code>. If <code>set</code> has any systems that …\nRuns before all systems in <code>set</code>. If <code>set</code> has any systems …\nthe state we’re in now\nRun after all systems in <code>set</code>.\nRun after all systems in <code>set</code>.\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from …\nTakes a function over mutable access to a <code>QueryBuilder</code>, …\nReturns a new run condition that only returns <code>true</code> if both …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nTake all commands from <code>other</code> and append them to <code>self</code>, …\nUses reflection to set the value of this <code>Component</code> type in …\nUses reflection to set the value of this <code>Resource</code> type in …\nInstructs the executor to call <code>System::apply_deferred</code> on …\nApplies any <code>Deferred</code> system parameters (or other system …\nDirectly applies any accumulated <code>Deferred</code> system …\nUses reflection to set the value of this <code>Component</code> type in …\nUses reflection to set the value of this <code>Resource</code> type in …\nIf a new state is queued in <code>NextState&lt;S&gt;</code>, this system:\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nReturns the system’s archetype component <code>Access</code>.\nReturns the archetype components accessed by this query.\nRetrieves this world’s <code>Archetypes</code> collection.\nAllows you access to the dereferenced value of this …\nAllows you access to the dereferenced value of this …\nAllows you access to the dereferenced value of this …\nCasts this value to a form where it can be compared with …\nConverts this <code>QueryState</code> reference to a <code>QueryState</code> that …\nGets a <code>QueryLens</code> with the same accesses as the existing …\nConverts this <code>QueryState</code> reference to a <code>QueryState</code> that …\nGets read-only access to all of the entity’s components.\nCreates a new <code>UnsafeWorldCell</code> view with complete …\nCreates a new <code>UnsafeWorldCell</code> view with only read access …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nthe state we were in before\nRun before all systems in <code>set</code>.\nRun before all systems in <code>set</code>.\nCreate a <code>QueryState</code> with the accesses of the builder.\nRetrieves this world’s <code>Bundles</code> collection.\nManually bypasses change detection, allowing you to mutate …\nRetrieves a <code>WorldCell</code>, which safely enables multiple …\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of system sets.\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of systems.\nReads the current change tick of this world.\nChecks any <code>Tick</code>s stored on this system and wraps their …\nIterates all component change ticks and clamps any older …\nRemoves all events.\nConsumes all available events.\nConsumes all available events.\nRuns both <code>clear_entities</code> and <code>clear_resources</code>, invalidating …\nDespawns all entities in this <code>World</code>.\nClears all resources in this <code>World</code>.\nClears the internal component tracker state.\nCopies a reference to a resource.\nTemporarily provides access to the <code>Commands</code> for the …\nReturns a shared reference to the component <code>T</code> of the given …\nReturns the system’s component <code>Access</code>.\nReturns the components accessed by this query.\nReturns the <code>ComponentId</code> of the given <code>Component</code> type <code>T</code>.\nReturns a mutable reference to the component <code>T</code> of the …\nRetrieves this world’s <code>Components</code> collection.\nApplies the provided <code>ScheduleBuildSettings</code> to all …\nConfigures a collection of system sets in this schedule, …\nReturns <code>true</code> if the given <code>Entity</code> matches the query.\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component of type …\nReturns whether entity contains this <code>Component</code>\nDoes a schedule with the provided label already exist?\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if a resource of type <code>R</code> exists. Otherwise …\nReturns <code>true</code> if a resource of type <code>R</code> exists. Otherwise …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nGets the value of this <code>Component</code> type from entity from …\nGets the value of this <code>Resource</code> type from <code>source_world</code> and …\nAdds accesses required for <code>T</code> to self.\nCreates a schedule with a default label. Only use in …\nReturns the system’s default system sets.\nDespawns the current entity.\nDespawns the given <code>entity</code>, if it exists. This will also …\nDespawns the provided entity and its children.\nAdd a run condition to each contained system.\nCreates a draining iterator that removes all events.\nClones this <code>SystemSet</code>.\nFeeds this value into the given <code>Hasher</code>.\nRetrieves this world’s <code>Entities</code> collection.\nRetrieves this world’s <code>Entities</code> collection mutably.\nRetrieves an <code>EntityRef</code> that exposes read-only operations …\nReturns the <code>EntityCommands</code> for the requested <code>Entity</code>.\nRetrieves an <code>EntityWorldMut</code> that exposes read and write …\nGets an Entry into the world for this entity and component …\nFetch underlying <code>Events</code>.\nAdds access to self’s underlying <code>FilteredAccess</code> …\nAdds filter from <code>T</code> to self.\nThe underlying function pointers implementing methods on …\nThe underlying function pointers implementing methods on …\nThe underlying function pointers implementing methods on …\nRuns <code>func</code> on each query result for the given <code>World</code>. This …\nRuns <code>f</code> on each read-only query item.\nRuns <code>func</code> on each query result for the given <code>World</code>. This …\nRuns <code>f</code> on each query item.\nRuns <code>func</code> on each query result for the given <code>World</code>. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert this <code>NonSendMut</code> into a <code>Mut</code>. This allows keeping …\nConvert this <code>ResMut</code> into a <code>Mut</code>. This allows keeping the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe state being exited.\nReconstruct an <code>Entity</code> previously destructured with …\nCreates a new <code>QueryState</code> from a given <code>QueryBuilder</code> and …\nCreates a new entity ID with the specified <code>index</code> and a …\nCreates <code>Self</code> using data from the given <code>World</code>.\nConstructs default reflected <code>FromWorld</code> from world using …\nReturns the generation of this Entity’s index. The …\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns the read-only query item for the given <code>Entity</code>.\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nRetrieves a reference to the given <code>entity</code>’s <code>Component</code> of …\nReturns a reference to the schedule associated with <code>label</code>, …\nGet the current state.\nGets access to the component of type <code>T</code> for the current …\nReturns the schedule’s current <code>ScheduleBuildSettings</code>.\nGets the component of the given <code>ComponentId</code> from the …\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves an immutable untyped reference to the given …\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nReturns a shared reference to the component <code>T</code> of the given …\nReturns a mutable reference to the component <code>T</code> of the …\nReturns a mutable reference to the component <code>T</code> of the …\nReturns a mutable reference to the component <code>T</code> of the …\nRetrieves an <code>EntityRef</code> that exposes read-only operations …\nReturns the <code>EntityCommands</code> for the requested <code>Entity</code>, if it …\nRetrieves an <code>EntityWorldMut</code> that exposes read and write …\nGet a specific event by id if it still exists in the …\nReturns the schedule’s current execution strategy.\nReturns the query item for the given <code>Entity</code>, with the …")