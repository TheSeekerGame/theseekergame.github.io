searchState.loadedDescShard("bevy_utils", 0, "General utilities for first-party Bevy engine crates.\nA <code>Hasher</code> for hashing an arbitrary stream of bytes.\nA borrowed value\nAn owned and dynamically typed Future used when you can’…\nMuch like a <code>Cow</code>, but owned values are Arc-ed to make …\nA <code>Duration</code> type to represent a span of time, typically …\nA shortcut alias for <code>hashbrown::hash_map::Entry</code>.\nA hasher builder that will create a fixed hasher.\nA wrapper for floats that implements <code>Ord</code>, <code>Eq</code>, and <code>Hash</code> …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nA pre-hashed value of a specific type. Pre-hashing enables …\nA measurement of a monotonically nondecreasing clock. …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nThe duration of one nanosecond.\n<code>BuildHasher</code> for <code>TypeId</code>s.\nAn occupied entry.\nA type which calls a function when dropped. This can be …\nAn owned <code>Arc</code>-ed value\nA <code>BuildHasher</code> that results in a <code>PassHasher</code>.\nA no-op hash that only works on <code>u64</code>s. Will panic if …\nA <code>HashMap</code> pre-configured to use <code>Hashed</code> keys and <code>PassHash</code> …\nExtension methods intended to add functionality to …\nProvides a Hasher factory. This is typically used (e.g. by …\nThe duration of one second.\nA stable hash map implementing aHash, a high speed keyed …\nA stable hash set implementing aHash, a high speed keyed …\nA static value reference. This exists to avoid conversion …\nA measurement of the system clock, useful for talking to …\nAn error returned from the <code>duration_since</code> and <code>elapsed</code> …\nAn error which can be returned when converting a …\nA specialized hashmap type with Key of <code>TypeId</code> Iteration …\nAn anchor in time which can be used to create new …\nA Universally Unique Identifier (UUID).\nA vacant entry.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nPanics\nHelper macro to generate tuple pyramids. Useful to …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a <code>Braced</code> formatter.\nConstructs a new AHasher with keys based on this …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nClones into an owned [<code>CowArc&lt;&#39;static&gt;</code>]. If internally a …\nCalls the <code>tracing::debug!</code> macro on a value.\nCall <code>debug!</code> once per call site.\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nConstructs a new AHasher with fixed keys. If <code>std</code> is …\nMacro to define a new label trait\nLike <code>tracing::trace</code>, but conditional on cargo feature …\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.\nDivide <code>Duration</code> by <code>f32</code>.\nDivide <code>Duration</code> by <code>f64</code>.\nReturns the positive duration which represents how far …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed from an earlier point …\nReturns the amount of time elapsed since this instant.\nReturns the difference from this system time to the …\nA buffer that can be used for <code>encode_...</code> calls, that is …\nA fast impl of <code>PartialEq</code> that first checks that <code>other</code>’s …\nProcesses a <code>Result</code> by calling the <code>tracing::error!</code> macro in …\nCall <code>error!</code> once per call site.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nCreates a new <code>Duration</code> from the specified number of weeks.\nUtilities for working with <code>Future</code>s.\nCreate a new <code>RandomState</code> <code>BuildHasher</code> based on the provided …\nIf the UUID is the correct version (v1, or v6) this will …\nTries to get or insert the value for the given <code>key</code> using …\nShortens a type name to remove all module paths.\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nThe pre-computed hash.\nCalculates the hash of a single value. This provides a …\nGet a <code>Hyphenated</code> formatter.\nCalls the <code>tracing::info!</code> macro on a value.\nCall <code>info!</code> once per call site.\nProvides types used to statically intern immutable values.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConverts this into an “owned” value. If internally a …\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nReturns true if this <code>Duration</code> spans no time.\nTraits used by label implementations\nThe ‘max UUID’ (all ones).\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nPre-hashes the given value using the <code>BuildHasher</code> …\nReturns an object that will invoke the specified callback …\nCreate a new <code>RandomState</code> <code>BuildHasher</code> using random keys.\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a random UUID.\nCreates a UUID using a name from a namespace, based on the …\nThe ‘nil UUID’ (all zeros).\nReturns an instant corresponding to “now”.\nReturns the system time corresponding to “now”.\nCall some expression only once per call site.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nGet a <code>Simple</code> formatter.\nReturns the amount of time elapsed from another instant to …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nA reimplementation of the currently unstable …\nA reimplementation of the currently unstable …\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns a 128bit little-endian value containing the value.\nCall <code>trace!</code> once per call site.\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nUUID utilities.\nProcesses a <code>Result</code> by calling the <code>tracing::warn!</code> macro in …\nCall <code>warn!</code> once per call site.\nBuild a <code>RandomState</code> from a single key. The provided key …\nAllows for explicitly setting the seeds to used. All …\nPolls a future once, and returns the output if ready or …\nConsumes a future, polls it once, and immediately returns …\nA trait for internable values.\nAn interned value. Will stay valid until the end of the …\nA thread-safe interner which can be used to create …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the <code>Interned&lt;T&gt;</code> corresponding to <code>value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a static reference to <code>self</code>, possibly leaking …\nCreates a new empty interner\nReturns <code>true</code> if the two references point to the same value.\nFeeds the reference to the hasher.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn object safe version of <code>Hash</code>. This trait is …\nCasts the type to <code>dyn Any</code>.\nCasts the type to <code>dyn Any</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given <code>Hasher</code>.\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nAn error type returned when an integer cannot be parsed …\nAn error type returned when a checked integral type …\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nSee <code>Exclusive</code> for stdlib’s upcoming implementation, …\nReturns the argument unchanged.\nBuild a mutable reference to a <code>SyncCell</code> from a mutable …\nGet a reference to this <code>SyncCell</code>’s inner value.\nCalls <code>U::from(self)</code>.\nConstruct a new instance of a <code>SyncCell</code> from the given …\nFor types that implement <code>Sync</code>, get shared access to this …\nDeconstruct this <code>SyncCell</code> into its inner value.\n<code>UnsafeCell</code>, but <code>Sync</code>.\nThe core primitive for interior mutability in Rust.\nReturns a <code>&amp;[SyncUnsafeCell&lt;T&gt;]</code> from a <code>&amp;SyncUnsafeCell&lt;[T]&gt;</code>.\nCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.\nCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.\nCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.\nReturns a <code>&amp;mut SyncUnsafeCell&lt;T&gt;</code> from a <code>&amp;mut T</code>.\nConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.\nGets a mutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the value.\nUnwraps the value, consuming the cell.\nConstructs a new instance of <code>SyncUnsafeCell</code> which will …\nConstructs a new instance of <code>UnsafeCell</code> which will wrap …\nGets a mutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value. The …\nA Universally Unique Identifier (UUID).\nGenerates a new UUID from the given UUIDs <code>a</code> and <code>b</code>, where …")