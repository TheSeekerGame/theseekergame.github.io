searchState.loadedDescShard("bevy_core_pipeline", 0, "Adds a skybox to a 3D camera, based on a cubemap texture.\nScale factor applied to the skybox image. After applying …\nExperimental features that are not yet finished. Please …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun a prepass before the main pass to generate depth, …\nAdds support for specialized “blit pipelines”, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a threshold filter to the input image to extract …\nApplies a bloom effect to an HDR-enabled 2d or 3d camera.\nThe default bloom preset.\nA preset that’s similar to how older games did bloom.\nA preset that applies a very strong bloom, and blurs the …\nControls whether bloom textures are blended between or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTightens how much the light scatters (default: 1.0).\nControls the baseline of how much the image is scattered …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow frequency contribution boost. Controls how much more …\nLow frequency contribution boost curve. Controls the …\nBaseline of the quadratic threshold curve (default: 0.0).\nControls how much to blend between the thresholded and …\nAdds Support for Contrast Adaptive Sharpening (CAS).\nApplies a contrast adaptive sharpening (CAS) filter to the …\nWhether to try and avoid sharpening areas that are already …\nEnable or disable sharpening.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdjusts sharpening strength. Higher values increase the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an orthographic projection camera with a custom <code>Z</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for the “main 3d render graph”.\nThe depth clear operation to perform for the main 3d pass.\nClear with a specified value. Note that 0.0 is the far …\nBetter quality. Suitable for high end GPUs. (e.g. Desktop)\nLoad from memory.\nBest performance at the cost of quality. Suitable for …\nA <code>bevy_render::render_graph::Node</code> that runs the <code>Opaque3d</code> …\nA <code>bevy_render::render_graph::Node</code> that runs the …\nA balanced option between quality and performance.\nThe quality of the screen space transmission blur effect, …\nThe highest quality, suitable for non-realtime rendering. …\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha mask phase of the 3D Deferred pass.\nOpaque phase of the 3D Deferred pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender node used by the prepass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBundle to apply temporal anti-aliasing.\nRender <code>bevy_render::render_graph::Node</code> used by temporal …\nPlugin for temporal anti-aliasing. Disables multisample …\nComponent to apply temporal anti-aliasing to a 3D …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet to true to delete the saved temporal history (past …\nuses the <code>FULLSCREEN_SHADER_HANDLE</code> to output a\nAdds support for Fast Approximate Anti-Aliasing (FXAA)\nUse lower sensitivity for a sharper, faster, result. Use …\nTrims the algorithm from processing darks.\nEnable render passes for FXAA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis enables “msaa writeback” support for the <code>core_2d</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha mask phase of the 3D prepass.\nIf added to a <code>crate::prelude::Camera3d</code> then deferred …\nIf added to a <code>crate::prelude::Camera3d</code> then depth values …\nIf added to a <code>crate::prelude::Camera3d</code> then screen space …\nIf added to a <code>crate::prelude::Camera3d</code> then vertex world …\nOpaque phase of the 3D prepass.\nTextures that are written to by the prepass.\nThe deferred gbuffer generated by the deferred pass. …\nA texture that specifies the deferred lighting pass id for …\nThe depth texture generated by the prepass. Exists only if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe motion vectors texture generated by the prepass. …\nThe normals texture generated by the prepass. Exists only …\nThe size of the textures.\nRender node used by the prepass.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSame base implementation that Godot 4.0 uses for Tonemap …\nBy Troy Sobotka https://github.com/sobotka/AgX Very …\nDefault Filmic Display Transform from blender. Somewhat …\nEnables a debanding shader that applies dithering to …\nBypass tonemapping.\nSuffers from lots hue shifting, brights don’t desaturate …\nSuffers from hue shifting. Brights don’t desaturate much …\nBy Tomasz Stachowiak Has little hue shifting in the darks …\nOptionally enables a tonemapping shader that attempts to …\n3D LUT (look up table) textures used for tonemapping\nCurrent Bevy default. By Tomasz Stachowiak …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")