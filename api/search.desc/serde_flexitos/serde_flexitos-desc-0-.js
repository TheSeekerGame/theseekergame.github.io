searchState.loadedDescShard("serde_flexitos", 0, "This crate provides types and function for flexible …\nType alias for deserialize functions of trait object type <code>O</code>…\nError while getting deserialize function.\nThe type of unique identifiers this registry uses. …\nRegistry implementation mapping unique identifiers of type …\nMultiple deserialize functions were registered for <code>id</code>.\nNo deserialize function was registered for <code>id</code>.\nRegistry mapping unique identifiers of types to their …\nThe trait object type this registry maps deserialize …\n<code>DeserializeSeed</code> and <code>Visitor</code> impls for deserializing trait …\nDeserialize a trait object with <code>deserializer</code>, using this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the deserialize function for <code>id</code>.\nGets the trait object name, for diagnostic purposes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new registry, using <code>trait_object_name</code> as the …\nRegister <code>deserialize_fn</code> as the deserialize function for <code>id</code>.\nRegister a default deserialize function for type <code>T</code> as the …\n<code>Serialize</code> implementation for serialization of trait …\nSerialize <code>trait_object</code> of type <code>O</code> with <code>serializer</code>, using <code>id</code> …\nDeserialize <code>HashMap&lt;K, V&gt;</code>, using <code>key_deserialize_seed</code> to …\nDeserialize <code>Box&lt;&lt;R as Registry&gt;::TraitObject&gt;</code> from a …\nDeserialize <code>Vec&lt;Box&lt;&lt;R as Registry&gt;::TraitObject&gt;&gt;</code>, using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserialize <code>HashMap&lt;Box&lt;K&gt;, V&gt;</code>, deserializing <code>Box&lt;K&gt;</code> as a …\nDeserialize <code>HashMap&lt;Box&lt;K&gt;, Box&lt;V&gt;&gt;</code>:\nDeserialize <code>HashMap&lt;K, Box&lt;V&gt;&gt;</code>, deserializing <code>Box&lt;V&gt;</code> as a …\nSerialize <code>trait_object</code> as a single <code>id</code>-<code>trait_object</code> pair …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether <code>T</code> implements <code>erased_serde::Serialize</code>.")