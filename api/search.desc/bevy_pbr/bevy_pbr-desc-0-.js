searchState.loadedDescShard("bevy_pbr", 0, "Combines the color of the fragments with the colors behind …\nSets how a material’s base color alpha channel is used …\nAn ambient light, which lights the entire scene equally.\nHolds <code>AssetId</code>s of the texture or textures that this light …\nA more general form of the <code>FogFalloff::Exponential</code> mode. …\nThe base color alpha value defines the opacity of the …\nControls how cascaded shadow mapping works. Prefer using …\nBuilder for <code>CascadeShadowConfig</code>.\nMethod by Ignacio Castaño for The Witness using 9 samples …\nConfiguration of the clustering strategy for clustered …\nConfigure the far z-plane mode used for the furthest depth …\nConfigure the depth-slicing strategy for clustered forward …\nConstant max z-depth\n<code>ParallaxMappingMethod::Relief</code> with a 5 steps, a reasonable …\nDefault render method used for opaque materials.\nA Directional light.\nA component bundle for <code>DirectionalLight</code> entities.\nControls the resolution of <code>DirectionalLight</code> shadow maps.\nAn exponential fog falloff with a given <code>density</code>.\nA squared exponential fog falloff with a given <code>density</code>.\nA material that extends a base <code>Material</code> with additional …\nHandle for the fog WGSL Shader internal asset\nFixed number of <code>Z</code> slices, <code>X</code> and <code>Y</code> calculated to give …\nAllows switching between different fog falloff modes, and …\nMetadata for fog\nA plugin that consolidates fog extraction, preparation and …\nConfigures the “classic” computer graphics distance fog…\nThe GPU-side representation of the fog configuration that…\nHardware 2x2.\nMethod by Jorge Jimenez for Call of Duty: Advanced Warfare …\nThe ID of the lightmap shader.\nA marker component for a light probe, which is a cuboid …\nA trait implemented by all components that represent light …\nAdds support for light probes: cuboid bounding regions …\nA GPU buffer that stores information about all light …\nA per-view shader uniform that specifies all the light …\nA component that applies baked indirect diffuse global …\nA plugin that provides an implementation of lightmaps.\nA linear fog falloff that grows in intensity between <code>start</code> …\nMaximum number of joints supported for skinned meshes.\nThe maximum number of each type of light probe that each …\nHow many textures are allowed in the view bind group …\nReduce transparency to fully opaque or fully transparent …\nMaterials are used alongside <code>MaterialPlugin</code> and …\nA subset of the <code>Material</code> trait for defining extensions to …\nA component bundle for entities with a <code>Mesh</code> and a <code>Material</code>.\nRender pipeline data for a given <code>Material</code>.\nA key uniquely identifying a specialized <code>MaterialPipeline</code>.\nAdds the necessary ECS resources and render logic to …\nCommon <code>Material</code> properties, calculated for a specific …\nCalculate the required maximum z-depth based on currently …\nBind groups for meshes currently loaded.\nAll possible <code>BindGroupLayout</code>s in bevy’s default mesh …\nMSAA uses the highest 3 bits for the MSAA log2(sample …\nA key that uniquely identifies a <code>MeshPipelineViewLayout</code>.\nCombines the color of the fragments with the colors behind …\nDisable light cluster calculations for this view\nAdd this component to make a <code>Mesh</code> not cast shadows.\nAdd this component to make a <code>Mesh</code> not receive shadows.\nA simple linear interpolation, using a single texture …\nBase color alpha values are overridden to be fully opaque …\nRender method used for opaque materials.\nThe parallax mapping method to use to compute depth based …\nA component bundle for PBR entities with a <code>Mesh</code> and a …\nSets up the entire PBR infrastructure of bevy.\nA light that emits light in all directions from a central …\nA component bundle for <code>PointLight</code> entities.\nSimilar to <code>AlphaMode::Blend</code>, however assumes RGB channel …\nAll <code>Material</code> values of a given type that should be …\nData prepared for a <code>Material</code> instance.\nSets up everything required to use the prepass pipeline.\nSets up the prepasses for a <code>Material</code>.\nA 2% contrast threshold was originally proposed by …\nDiscovers the best depth value based on binary search.\nStores data for all lightmaps in the render world.\nStores all prepared representations of <code>Material</code> assets for …\nA component, part of the render world, that stores the …\nBundle to apply screen space ambient occlusion.\nPlugin for screen space ambient occlusion.\nComponent to apply screen space ambient occlusion to a 3d …\nSets the bind group for a given <code>Material</code> at the configured …\nAdd this component to a <code>Camera3d</code> to control how to …\nOne single cluster. Optimal for low-light complexity …\nA light that emits light in a given direction from a …\nA component bundle for spot light entities\nA material with “standard” properties used in PBR …\nBitflags info about the material a shader is currently …\nThe pipeline key for <code>StandardMaterial</code>.\nThe GPU representation of the uniform data of a …\nAdd this component to make a <code>Mesh</code> using a PBR material …\nInserted on each <code>Entity</code> with an <code>ExtractedView</code> to keep …\nIf the light probe can be attached to the view itself (as …\nA component attached to each camera in the render world …\nExplicit <code>X</code>, <code>Y</code> and <code>Z</code> counts (may yield non-square <code>X/Y</code> …\nControls if <code>DeferredPbrLightingPlugin</code> is added.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nWhen the alpha mode mask flag is set, any base color alpha …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nReturns this material’s <code>AlphaMode</code>. Defaults to …\nThe <code>AlphaMode</code> of this material.\nHow to apply the alpha channel of the <code>base_color_texture</code>.\nThe resulting (non-absorbed) color after white light …\nColor white light takes after travelling through the …\nHow far, on average, light travels through the volume …\nHow far light travels through the volume underneath the …\nThe color of the surface of the material before lighting.\nDoubles as diffuse albedo for non-metallic, specular for …\nThe texture component of the material’s color before …\nWhether binding arrays (a.k.a. bindless textures) are …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe (positive) distance to the far boundary of each …\nA direct scale factor multiplied with <code>color</code> before being …\nReturns the cascade config as specified by this builder.\nThe color of the fog effect.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreates an instance of <code>RenderViewLightProbes</code> containing …\nWhether to cull the “front”, “back” or neither …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s deferred fragment shader. If …\nReturns this material’s deferred fragment shader. If …\nUsed for selecting the deferred lighting pass for deferred …\nID for specifying which deferred lighting pass should be …\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nReturns this material’s deferred vertex shader. If …\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nAdjust rendered depth.\nThe depth map used for parallax mapping.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe amount of light transmitted <em>diffusely</em> through the …\nAmount of diffuse light transmitted through the material\nColor used to modulate the influence of directional light …\nThe exponent applied to the directional light alignment …\nSupport two-sided lighting by automatically flipping the …\nColor the material “emits” to the camera.\nThe emissive map, multiplies pixels with <code>emissive</code> to get …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nMap of view entity to the visible entities for each …\nEnvironment maps and reflection probes.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThis system extracts all created or modified assets of the …\nDetermines which falloff mode to use, and its parameters.\nStrategy for how to evaluate the far <code>Z</code> plane of the …\nSets the far bound of the first cascade, relative to the …\nFar <code>Z</code> plane of the first depth slice\nThe <code>StandardMaterialFlags</code> accessible in the <code>wgsl</code> shader.\nNormal map textures authored for DirectX have their …\nWhether to enable fog for this material.\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Exponential</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::Atmospheric</code> value from the given …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nCreates a <code>FogFalloff::ExponentialSquared</code> value from the …\nGenerates all possible view layouts for the mesh pipeline, …\nGet the <code>BindGroup</code> for <code>GpuMesh</code> with given <code>handle_id</code> and …\nReturns the asset ID or asset IDs of the texture or …\nIlluminance in lux (lumens per square meter), representing …\nThe lightmap texture.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nAngle defining the distance from the spot light direction …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the intensity of this light probe.\nLuminous power in lumens, representing the amount of light …\nLuminous power in lumens, representing the amount of light …\nluminous intensity in lumens per steradian\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of refraction of the material.\nIndex of Refraction\nIrradiance volumes, also known as voxel global …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCalculates the extinction coefficient β, from V and Cₜ, …\nBuilds a unique label for each layout based on the flags\nConstants for operating with the light units: lumens, and …\nThe exposure (brightness) level of the lightmap, if …\nThe exposure (brightness) level of the lightmap, if …\nIncludes the lightmap texture and uniform.\nIn how many layers to split the depth maps for parallax …\nIn how many layers to split the depth maps for Steep …\nUsing <code>ParallaxMappingMethod::Relief</code>, how many additional …\nThe maximum shadow distance. Areas further from the camera …\nHow “metallic” the material appears, within <code>[0.0, 1.0]</code>.\nFrom [0.0, 1.0], dielectric to pure metallic\nMetallic and roughness maps, stored as a single texture.\nThe minimum shadow distance, which can help improve the …\nThe (positive) distance to the near boundary of the first …\nThe mesh model uniform (transform) and nothing else.\nAlso includes the uniform and <code>MorphAttributes</code> for morph …\nAlso includes both uniforms for skinning and morph …\nCreates a new light probe component.\nPrepare the layouts used by the default bevy <code>Mesh</code>.\nUsed to fake the lighting of bumps and dents on a material.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of shadow cascades. More cascades increases …\nSpecifies the level of exposure to ambient light.\nReturns if this material should be rendered by the …\nReturns if this material should be rendered by the …\nRender method used for opaque materials. (Where <code>alpha_mode</code> …\nAngle defining the distance from the spot light direction …\nSets the overlap proportion between cascades. The overlap …\nThe proportion of overlap each cascade has with the …\nHow deep the offset introduced by the depth map should be.\nThe depth of the <code>StandardMaterial::depth_map</code> to apply.\nWhich parallax mapping method to use.\n<code>MeshUniform</code>s are stored in arrays in buffers. If storage …\nLinear perceptual roughness, clamped to <code>[0.089, 1.0]</code> in …\nPrepares fog metadata and writes the fog-related uniform …\nThis system prepares all assets of the corresponding …\nControls if the prepass is enabled for the Material. For …\nControls if the prepass is enabled for the …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass fragment shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns this material’s prepass vertex shader. If …\nReturns whether the material would like to read from …\nReturns whether the material would like to read from …\nWhether the material would like to read from …\nSpecular intensity for non-metals on a linear scale of …\nSpecular intensity for non-metals on a linear scale of […\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIs this material should be rendered by the deferred …\nLinear perceptual roughness, clamped to [0.089, 1.0] in …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nA bias applied along the direction of the fragment’s …\nAlso includes the uniform for skinning\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nCustomizes the default <code>RenderPipelineDescriptor</code> for a …\nThe amount of light transmitted <em>specularly</em> through the …\nAmount of specular light transmitted through the material\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThickness of the volume beneath the material surface.\nThickness of the volume underneath the material surface\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWhether to apply only the base color to this material.\nThe rectangle within the lightmap texture that the UVs are …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nEnables or disables the light\nEnables or disables the light\nEnables or disables the light\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nSpecify if clusters should automatically resize in <code>X/Y</code> if …\nMultiplier applied to the world distance (within the …\nMultiplier applied to the world distance (within the …\nDistance from the camera where fog is completely opaque, …\nControls how much light is removed due to atmospheric …\nControls how much light is added due to light scattering …\nDistance from the camera where fog is completely …\nHow many additional steps to use at most to find the depth …\nSamples per slice side is also tweakable, but recommended …\nHigher slice count means less noise, but worse performance.\nComponent with a <code>depth_id</code> for specifying which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle to the environment map helper shader.\nLike <code>EnvironmentMapLight</code>, but contains asset IDs instead …\nA pair of cubemap textures that represent the surroundings …\nInformation about the environment map attached to the …\nA bundle that contains everything needed to make an entity …\nThe blurry image that represents diffuse radiance …\nThe cubemaps that make up this environment map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks this environment map as a light probe.\nContains a transform that specifies the position of this …\nThe typically-sharper, mipmapped image that represents …\nLabel for the screen space ambient occlusion render node.\nLabel for the shadow pass node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe component that defines an irradiance volume.\nReturns the argument unchanged.\nScale factor applied to the diffuse and specular light …\nCalls <code>U::from(self)</code>.\nThe 3D texture that represents the ambient cubes, encoded …\nApproximations for converting the wattage of lamps to …\nPredefined for lux values in several locations.\nThe amount of light (lux) from ambient daylight (not …\nThe amount of light (lux) during the dark limit of civil …\nThe amount of light (lux) during sunrise or sunset on a …\nThe amount of light (lux) in very dark overcast day\nThe amount of light (lux) in direct sunlight.\nThe amount of light (lux) in full daylight (not direct …\nThe amount of light (lux) during a full moon on a clear …\nThe amount of light (lux) in an office building’s …\nThe amount of light (lux) in family living room lights.\nThe amount of light (lux) in a moonless, overcast night …\nThe amount of light (lux) in an office.\nThe amount of light (lux) on a overcast day; typical TV …\nDisables wireframe rendering for any entity it is attached …\nEnables wireframe rendering for any entity it is attached …\nSets the color of the <code>Wireframe</code> of the entity it is …\nA <code>Plugin</code> that draws wireframes.\nIf <code>Self::global</code> is set, any <code>Entity</code> that does not have a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to show wireframes for all meshes. Can be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")