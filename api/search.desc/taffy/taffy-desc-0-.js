searchState.loadedDescShard("taffy", 0, "Taffy\nAxis enums representing CSS Grid axis\nUpdates the stored layout of the provided <code>node</code> and its …\nThe Error types produced by Taffy.\nGeometric primitives useful for layout\nFinal and cached data structures that represent the …\nContains numerical helper traits and functions\nUI <code>Node</code> types and related data structures.\nCommonly used types\nA representation of CSS layout properties in Rust, used …\nHelper functions which it make it easier to create …\nThe baseline requirements of any UI Tree so Taffy can …\nThe simple absolute horizontal and vertical axis\nThe CSS abstract axis …\nThe axis in the block dimension, i.e. the vertical axis in …\nThe horizontal axis\nThe axis in the inline dimension, i.e. the horizontal axis …\nThe vertical axis\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the other variant of the enum\nReturns the other variant of the enum\nThe parent <code>Node</code> does not have a child at <code>child_index</code>. It …\nContains the error value\nThe child <code>Node</code> was not found in the <code>Taffy</code> instance.\nThe supplied <code>Node</code> was not found in the <code>Taffy</code> instance.\nThe parent <code>Node</code> was not found in the <code>Taffy</code> instance.\nContains the success value\nAn error that occurs while trying to access or modify a …\nThe error Taffy generates on invalid operations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe total number of children the parent has\nThe index that was looked up\nThe parent node whose child was being looked up\nAn abstract “line”. Represents any type that has a …\nGeneric struct which holds a “min” value and a “max…\nA <code>Size</code> with <code>None</code> width and height\nA <code>Point</code> with values (None, None)\nA 2-dimensional coordinate.\nAn axis-aligned UI rectangle\nThe width and height of a <code>Rect</code>\nCreates a new Rect with <code>0.0</code> as all parameters\nA <code>Size</code> with zero width and height\nA <code>Point</code> with values (0,0), representing the origin\nReturns a Size where the left, right, top, and bottom …\nReturns a Line where both the start and end values are the …\nReturns a Size where both the width and height values are …\nReturns a Point where both the x and y values are the auto …\nReturn true if both components are Some, else false.\nThis can represent either the y-coordinate of the bottom …\nThe end position of a line\nApplies f32_max to each component separately\nReturns a Rect where the left, right, top and bottom …\nReturns a Line where both the start and end values are the …\nReturns a Size where both the width and height values are …\nReturns a Point where both the x and y values are the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Rect with <code>Dimension::Percent</code>\nGenerates a <code>Size&lt;Dimension&gt;</code> using <code>Dimension::Percent</code> values\nCreate a new Rect with <code>Dimension::Points</code>\nGenerates a <code>Size&lt;Dimension&gt;</code> using <code>Dimension::Points</code> values\nGet either the width or height depending on the …\nGet either the width or height depending on the …\nDetermine whether at least one of the components (“min”…\nThe y extent of the rectangle\nReturns a <code>Line&lt;T&gt;</code> representing the left and right …\nResolves the span for an indefinite placement (a placement …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Size&lt;AvailableSpace&gt;</code> into <code>Size&lt;Option&lt;f32&gt;&gt;</code>\nApply a mapping function if the <code>GridPlacement</code> is a <code>Track</code>. …\nWhether the track position is definite in this axis (or …\nThis can represent either the x-coordinate of the starting …\nApplies the function <code>f</code> to the left, right, top, and bottom …\nApplies the function <code>f</code> to both the width and height\nApplies the function <code>f</code> to both the width and height\nApplies the function <code>f</code> to the height\nApplies the function <code>f</code> to the width\nThe value representing the maximum\nReturns a Size where the left, right, top, and bottom …\nReturns a Line where both the start and end values are the …\nReturns a Size where both the width and height values are …\nReturns a Point where both the x and y values are the …\nExtract the max track sizing function\nApplies aspect_ratio (if one is supplied) to the Size:\nIf passed value is Some then return …\nThe value representing the minimum\nReturns a Size where the left, right, top, and bottom …\nReturns a Line where both the start and end values are the …\nReturns a Size where both the width and height values are …\nReturns a Point where both the x and y values are the …\nExtract the min track sizing function\nCreates a new Rect\nA <code>Size&lt;Option&lt;f32&gt;&gt;</code> with <code>Some(width)</code> and <code>Some(height)</code> as …\nPerforms Option::or on each component separately\nReturns a Rect where the left, right, top and bottom …\nReturns a Line where both the start and end values are the …\nReturns a Size where both the width and height values are …\nReturns a Point where both the x and y values are the …\nReturns a Rect where the left, right, top and bottom …\nReturns a Line where both the start and end values are the …\nReturns a Size where both the width and height values are …\nReturns a Point where both the x and y values are the …\nFor absolutely positioned items:\nIf at least one of the of the start and end positions is a …\nIf neither of the start and end positions is a track index …\nThis can represent either the x-coordinate of the ending …\nThe start position of a line\nAdds the start and end values together and returns the …\nThis can represent either the y-coordinate of the top edge,\nPerforms Option::unwrap_or on each component separately\nReturns a <code>Line&lt;T&gt;</code> containing the top and bottom properties …\nThe x extent of the rectangle\nThe x-coordinate\nThe y-coordinate\nReturns a Size where the left, right, top, and bottom …\nReturns a Line where both the start and end values are the …\nReturns a Size where both the width and height values are …\nReturns a Point where both the x and y values are the zero …\nApplies the function <code>f</code> to both the width and height of …\nCached intermediate layout results\nThe layout algorithm should be executed such that an …\nOnly content contributions should be taken into account\nInherent size styles should be taken into account in …\nThe final result of a layout algorithm for a single <code>Node</code>.\nA full layout for this node and all children should be …\nWhether we are performing a full layout, or we merely need …\nA struct containing both the size of a node and it’s …\nWhether styles should be taken into account when computing …\nThe first baseline of the node in each dimension, if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe bottom-left corner of the node\nCreates a new zero-<code>Layout</code>.\nThe relative ordering of the node\nThe size of the node\nThe width and height of the node\nCreates a new zero-<code>Layout</code> with the supplied <code>order</code> value.\nStores a boxed function\nA function type that can be used in a <code>MeasureFunc</code>\nA function that can be used to compute the intrinsic size …\nA node in a layout.\nStores an unboxed function\nA tree of UI <code>Nodes</code>, suitable for UI layout\nAdds a <code>child</code> <code>Node</code> under the supplied <code>parent</code>\nReturns the child <code>Node</code> of the parent <code>node</code> at the provided …\nReturns the number of children of the <code>parent</code> <code>Node</code>\nReturns a list of children that belong to the parent <code>Node</code>\nDrops all nodes in the tree\nUpdates the stored layout of the provided <code>node</code> and its …\nIndicates whether the layout of this node (and its …\nDisable rounding of layout values. Rounding is enabled by …\nEnable rounding of layout values. Rounding is enabled by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn this node layout relative to its parent\nCreates a new <code>Taffy</code>\nCreates and adds a new unattached leaf node to the tree, …\nCreates and adds a new unattached leaf node to the tree, …\nCreates and adds a new node, which may have any number of …\nRemove a specific <code>Node</code> from the tree and drops it\nRemoves the <code>child</code> of the parent <code>node</code>\nRemoves the child at the given <code>index</code> from the <code>parent</code>\nReplaces the child at the given <code>child_index</code> from the <code>parent</code>…\nDirectly sets the <code>children</code> of the supplied <code>parent</code>\nSets the <code>MeasureFunc</code> of the associated node\nSets the <code>Style</code> of the provided <code>node</code>\nGets the <code>Style</code> of the provided <code>node</code>\nReturns the total number of nodes in the tree\nCreates a new <code>Taffy</code> that can store <code>capacity</code> nodes before …\nApply the flexbox algorithm and recursively layout the …\nThe offset is computed relative to this item’s closest …\nSets the distribution of space between and around content …\nUsed to control how child <code>Nodes</code> are aligned. For Flexbox …\nUsed to control how the specified <code>Nodes</code> is aligned. …\nThe dimension should be automatically computed\nThe dimension should be automatically computed\nTrack maximum size should be automatically sized\nTrack minimum size should be automatically sized\nAuto-repeating tracks should be generated to fit the …\nAuto-repeating tracks should be generated to fit the …\nThe amount of space available to a node in a given axis …\nItems are aligned such as their baselines align\nItems are aligned such as their baselines align\nItems are aligned such as their baselines align\nItems are aligned such as their baselines align\nItems are packed along the center of the cross axis\nItems are packed along the center of the cross axis\nItems are packed along the center of the cross axis\nItems are centered around the middle of the axis\nItems are packed along the center of the cross axis\nItems are centered around the middle of the axis\nDefines +y as the main axis\nItems are placed by filling each column in turn, adding …\nCombines <code>Column</code> with the dense packing algorithm.\nDefines -y as the main axis\nThe specified tracks should be repeated exacts N times\nThe <code>Default</code> layout, in a form that can be used in const …\nThe amount of space available is the specified number of …\nA unit of linear measurement\nSets the layout used for the children of this node\nItems are packed toward the end of the axis\nItems are packed toward the end of the axis\nItems are packed toward the end of the axis\nItems are packed toward the end of the axis\nItems are packed toward the end of the axis\nItems are packed toward the end of the axis\nTrack maximum size should be sized according to the …\nTrack maximum size should be a fixed points or percentage …\nTrack minimum size should be a fixed points or percentage …\nThe children will follow the flexbox layout algorithm\nThe direction of the flexbox layout main axis.\nItems are packed towards the flex-relative end of the axis.\nItems are packed towards the flex-relative end of the axis.\nItems are packed towards the flex-relative end of the axis.\nItems are packed towards the flex-relative end of the axis.\nItems are packed towards the flex-relative end of the axis.\nItems are packed towards the flex-relative end of the axis.\nItems are packed towards the flex-relative start of the …\nItems are packed towards the flex-relative start of the …\nItems are packed towards the flex-relative start of the …\nItems are packed towards the flex-relative start of the …\nItems are packed towards the flex-relative start of the …\nItems are packed towards the flex-relative start of the …\nControls whether flex items are forced onto one line or …\nThe dimension as a fraction of the total available grid …\nThe children will follow the CSS Grid layout algorithm\nControls whether grid items are placed row-wise or …\nA grid line placement specification. Used for grid-[…\nThe first argument to a repeated track definition. This …\nSets the distribution of space between and around content …\nUsed to control how child <code>Nodes</code> are aligned. Does not …\nUsed to control how the specified <code>Nodes</code> is aligned. …\nA unit of linear measurement\nA unit of linear measurement\nThe amount of space available is indefinite and the node …\nTrack maximum size should be content sized under a …\nTrack minimum size should be content sized under a …\nMaximum track sizing function\nThe amount of space available is indefinite and the node …\nTrack maximum size should be content sized under a …\nTrack minimum size should be content sized under a …\nMinimum track sizing function\nItems will not wrap and stay on a single line\nThe sizing function for a grid track (row/column) (either …\nThe children will not be laid out, and will follow …\nThe dimension is stored in percentage relative to the …\nThe dimension is stored in percentage relative to the …\nThe dimension is stored in percentage relative to the …\nPoints are abstract absolute units. Users of Taffy may …\nPoints are abstract absolute units. Users of Taffy may …\nPoints are abstract absolute units. Users of Taffy may …\nThe positioning strategy for this item.\nThe offset is computed relative to the final position …\nAutomatically generate grid tracks to fit the available …\nDefines +x as the main axis\nItems are placed by filling each row in turn, adding new …\nCombines <code>Row</code> with the dense packing algorithm.\nDefines -x as the main axis\nA single non-repeated track\nThe gap between the first and last items is exactly HALF …\nThe gap between the first and last items is exactly HALF …\nThe first and last items are aligned flush with the edges …\nThe first and last items are aligned flush with the edges …\nThe gap between the first and last items is exactly THE …\nThe gap between the first and last items is exactly THE …\nItems are packed toward the start of the axis\nItems are packed toward the start of the axis\nItems are packed toward the start of the axis\nItems are packed toward the start of the axis\nItems are packed toward the start of the axis\nItems are packed toward the start of the axis\nStretch to fill the container\nStretch to fill the container\nStretch to fill the container\nItems are stretched to fill the container\nStretch to fill the container\nItems are stretched to fill the container\nThe flexbox layout information for a single <code>Node</code>.\nThe sizing function for a grid track (row/column) See …\nItems will wrap according to this item’s <code>FlexDirection</code>\nItems will wrap in the opposite direction to this item’s …\nHow should content contained within this item be aligned …\nHow this node’s children aligned in the cross/block axis?\nHow this node should be aligned in the cross/block axis …\nSets the preferred aspect ratio for the item\nHow large should the border be on each side?\nCompute free_space given the passed used_space\nResolve the maximum size of the track as defined by either:\nReturns fixed point values directly. Attempts to resolve …\nReturns fixed point values directly. Attempts to resolve …\nWhat layout strategy should be used?\nSets the initial main axis size of the item\nWhich direction does the main axis flow in?\nThe relative rate at which this item grows when it is …\nThe relative rate at which this item shrinks when it is …\nShould elements wrap, or stay in a single line?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow large should the gaps between items in a grid or flex …\nDefined the size of implicitly created columns\nControls how items get placed into the grid for …\nDefines the size of implicitly created rows\nDefines which column in the grid the item should start and …\nDefines which row in the grid the item should start and …\nDefines the track sizing functions (heights) of the grid …\nDefines the track sizing functions (widths) of the grid …\nDetermine whether at least one of the components (“min”…\nHow should the position of this element be tweaked …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet Points value if value is Points variant\nConvert to Option Definite values become Some(value). …\nApply a mapping function if the [<code>GridPlacement</code>] is a <code>Track</code>…\nWhether the track definition is a auto-repeated fragment\nReturns true for definite values, else false\nWhether grid auto placement uses the sparse placement …\nReturns true if the max track sizing function is <code>Flex</code>, …\nReturns true if the max track sizing function is <code>MinContent</code>…\nReturns true if the min track sizing function is <code>MinContent</code>…\nReturns true if the max track sizing function is <code>MaxContent</code>…\nCompare equality with another AvailableSpace, treating …\nHow should contained within this item be aligned in the …\nHow this node’s children should be aligned in the inline …\nHow this node should be aligned in the inline axis Falls …\nIf passed value is Some then return …\nHow large should the margin be on each side?\nThe value representing the maximum\nControls the maximum size of the item\nExtract the max track sizing function\nIf passed value is Some then return …\nThe value representing the minimum\nControls the minimum size of the item\nExtract the min track sizing function\nReturn self if definite or a default value\nReturn self if definite or a the result of the default …\nHow large should the padding be on each side?\nWhat should the <code>position</code> value of this struct use as a …\nWhether grid auto placement fills areas row-wise or …\nReturns:\nResolve percentage values against the passed parent_size, …\nResolve percentage values against the passed parent_size, …\nSets the initial size of the item\nReturn the definite value. Panic is the value is not …\nReturn the definite value or a default value\nReturn the definite value or the result of the default …\nWhether the track sizing functions depends on the size of …\nWhether the track sizing functions depends on the size of …\nThe auto value for type implementing TaffyZero\nTrait to create constant percent values from plain numbers\nTrait to create constant percent values from plain numbers\nTrait to create constant points values from plain numbers\nThe max_content value for type implementing TaffyZero\nThe min_content value for type implementing TaffyZero\nTrait to abstract over auto values\nTrait to create constant points values from plain numbers\nTrait to abstract over grid line values\nTrait to abstract over grid span values\nTrait to abstract over max_content values\nTrait to abstract over min_content values\nTrait to abstract over zero values\nThe zero value for type implementing TaffyZero\nReturns the auto value for that type\nReturns a grid template containing <code>count</code> evenly sized …\nReturns a value of the inferred type which represent a …\nConverts into a LengthPercentage into Self\nShorthand for minmax(0, Nfr). Probably what you want if …\nCreate a <code>Fraction</code> track sizing function (<code>fr</code> in CSS)\nConverts into an <code>Into&lt;f32&gt;</code> into Self\nConverts an i16 into Self\nConverts into an <code>Into&lt;f32&gt;</code> into Self\nConverts into an <code>Into&lt;f32&gt;</code> into Self\nConverts an iu6 into Self\nSpecifies a grid line to place a grid item between in CSS …\nReturns the auto value for that type\nReturns the auto value for that type\nReturns a MinMax with min value of min and max value of max\nReturns a value of the inferred type which represent a …\nReturns a value of the inferred type which represent a …\nReturns an auto-repeated track definition\nReturns a GridPlacement::Span\nReturns the zero value for that type\nType representing an iterator of the children of a node\nAny item that implements the LayoutTree can be layed out …\nGet a cache entry for this Node by index\nGet a specific child of a node, where the index represents …\nGet the number of children for the given node\nGet the list of children IDs for the given node\nReturns true if the node has no children\nGet the node’s output “Final Layout”\nModify the node’s output layout\nMark a node as dirty to tell Taffy that something has …\nMeasure a node. Taffy uses this to force reflows of things …\nNode needs to be measured\nGet any available parent for this node\nGet the <code>Style</code> for this Node.")